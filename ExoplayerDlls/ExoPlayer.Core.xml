<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ExoPlayer.Core</name>
    </assembly>
    <members>
        <member name="T:Com.Google.Android.Exoplayer2.Source.BaseMediaSource">
            <summary>Base <c>MediaSource</c> implementation to handle parallel reuse and to keep a list of <c>MediaSourceEventListener</c>s.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Source.BaseMediaSource.IsEnabled">
            <summary>Returns whether the source is enabled.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Source.BaseMediaSource.PlayerId">
            <summary>Returns the <c>PlayerId</c> of the player using this media source.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.BaseMediaSource.DisableInternal">
            <summary>Disables the source, see <c>#disable(MediaSourceCaller)</c>.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.BaseMediaSource.EnableInternal">
            <summary>Enables the source, see <c>#enable(MediaSourceCaller)</c>.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.BaseMediaSource.ReleaseSourceInternal">
            <summary>Releases the source, see <c>#releaseSource(MediaSourceCaller)</c>.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.BaseMediaSource.MaybeThrowSourceInfoRefreshError">
            <summary>Throws any pending error encountered while loading or refreshing source information.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.BaseMediaSource.ReleasePeriod(Com.Google.Android.Exoplayer2.Source.IMediaPeriod)">
            <param name="mediaPeriod">The period to release.</param>
            <summary>Releases the period.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.BaseMediaSourceInvoker.ReleaseSourceInternal">
            <summary>Releases the source, see <c>#releaseSource(MediaSourceCaller)</c>.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.BaseMediaSourceInvoker.MaybeThrowSourceInfoRefreshError">
            <summary>Throws any pending error encountered while loading or refreshing source information.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.BaseMediaSourceInvoker.ReleasePeriod(Com.Google.Android.Exoplayer2.Source.IMediaPeriod)">
            <param name="mediaPeriod">The period to release.</param>
            <summary>Releases the period.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Source.Ads.AdsMediaSource">
            <summary>A <c>MediaSource</c> that inserts ads linearly into a provided content media source.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Source.Ads.IAdsLoader">
            <summary>Interface for loaders of ads, which can be used with <c>AdsMediaSource</c>.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.Ads.IAdsLoader.HandlePrepareComplete(Com.Google.Android.Exoplayer2.Source.Ads.AdsMediaSource,System.Int32,System.Int32)">
            <param name="adsMediaSource">The ads media source for which preparation of ad media completed.</param>
            <param name="adGroupIndex">The index of the ad group.</param>
            <param name="adIndexInAdGroup">The index of the ad in the ad group.</param>
            <summary>Notifies the ads loader that preparation of an ad media period is complete.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.Ads.IAdsLoader.HandlePrepareError(Com.Google.Android.Exoplayer2.Source.Ads.AdsMediaSource,System.Int32,System.Int32,Java.IO.IOException)">
            <param name="adsMediaSource">The ads media source for which preparation of ad media failed.</param>
            <param name="adGroupIndex">The index of the ad group.</param>
            <param name="adIndexInAdGroup">The index of the ad in the ad group.</param>
            <param name="exception">The preparation error.</param>
            <summary>Notifies the ads loader that the player was not able to prepare media for a given ad.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.Ads.IAdsLoader.Release">
            <summary>Releases the loader.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Source.Ads.ServerSideAdInsertionMediaSource">
            <summary>A <c>MediaSource</c> for server-side inserted ad breaks.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Source.Ads.ServerSideAdInsertionUtil">
            <summary>A static utility class with methods to work with server-side inserted ads.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Source.Ads.SinglePeriodAdTimeline">
            <summary>A <c>Timeline</c> for sources that have ads.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Source.BehindLiveWindowException">
            <summary>Thrown when a live playback falls behind the available media window.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Source.BundledExtractorsAdapter">
            <summary>
              <c>ProgressiveMediaExtractor</c> built on top of <c>Extractor</c> instances, whose
            implementation classes are bundled in the app.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Source.Chunk.BaseMediaChunk">
            <summary>A base implementation of <c>MediaChunk</c> that outputs to a <c>BaseMediaChunkOutput</c>.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Source.Chunk.BaseMediaChunk.ClippedEndTimeUs">
            <summary>The time from which output will end, or <c>C#TIME_UNSET</c> if output will end at the end of
            the chunk.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Source.Chunk.BaseMediaChunk.ClippedStartTimeUs">
            <summary>The time from which output will begin, or <c>C#TIME_UNSET</c> if output will begin from the
            start of the chunk.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Source.Chunk.BaseMediaChunk.Output">
            <summary>Returns the output most recently passed to <c>#init(BaseMediaChunkOutput)</c>.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.Chunk.BaseMediaChunk.GetFirstSampleIndex(System.Int32)">
            <summary>Returns the index of the first sample in the specified track of the output that will originate
            from this chunk.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.Chunk.BaseMediaChunk.Init(Com.Google.Android.Exoplayer2.Source.Chunk.BaseMediaChunkOutput)">
            <param name="output">The output that will receive the loaded media samples.</param>
            <summary>Initializes the chunk for loading, setting the <c>BaseMediaChunkOutput</c> that will receive
            samples as they are loaded.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Source.Chunk.BaseMediaChunkInvoker.IsLoadCompleted">
            <summary>Returns whether the chunk has been fully loaded.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Source.Chunk.BaseMediaChunkIterator">
            <summary>Base class for <c>MediaChunkIterator</c>s.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Source.Chunk.BaseMediaChunkIterator.InterfaceConsts.Empty">
            <summary>An empty media chunk iterator without available data.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.Chunk.BaseMediaChunkIterator.#ctor(System.Int64,System.Int64)">
            <param name="fromIndex">The first available index.</param>
            <param name="toIndex">The last available index.</param>
            <summary>Creates base iterator.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Source.Chunk.BaseMediaChunkIterator.CurrentIndex">
            <summary>Returns the current index this iterator is pointing to.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.Chunk.BaseMediaChunkIterator.CheckInBounds">
            <summary>Verifies that the iterator points to a valid element.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Source.Chunk.BaseMediaChunkIteratorInvoker.ChunkEndTimeUs">
            <summary>Returns the media end time of the chunk, in microseconds.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Source.Chunk.BaseMediaChunkIteratorInvoker.ChunkStartTimeUs">
            <summary>Returns the media start time of the chunk, in microseconds.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Source.Chunk.BaseMediaChunkOutput">
            <summary>A <c>TrackOutputProvider</c> that provides <c>TrackOutput TrackOutputs</c> based on a
            predefined mapping from track type to output.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.Chunk.BaseMediaChunkOutput.#ctor(System.Int32[],Com.Google.Android.Exoplayer2.Source.SampleQueue[])">
            <param name="trackTypes">The track types of the individual track outputs.</param>
            <param name="sampleQueues">The individual sample queues.</param>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.Chunk.BaseMediaChunkOutput.GetWriteIndices">
            <summary>Returns the current absolute write indices of the individual sample queues.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.Chunk.BaseMediaChunkOutput.SetSampleOffsetUs(System.Int64)">
            <summary>Sets an offset that will be added to the timestamps (and sub-sample timestamps) of samples
            subsequently written to the sample queues.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Source.Chunk.BundledChunkExtractor">
            <summary>
              <c>ChunkExtractor</c> implementation that uses ExoPlayer app-bundled <c>Extractor
            Extractors</c>.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Source.Chunk.Chunk">
            <summary>An abstract base class for <c>Loadable</c> implementations that load chunks of data required for
            the playback of streams.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Source.Chunk.Chunk.EndTimeUs">
            <summary>The end time of the media contained by the chunk, or <c>C#TIME_UNSET</c> if the data being
            loaded does not contain media samples.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Source.Chunk.Chunk.LoadTaskId">
            <summary>Identifies the load task for this loadable.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Source.Chunk.Chunk.StartTimeUs">
            <summary>The start time of the media contained by the chunk, or <c>C#TIME_UNSET</c> if the data being
            loaded does not contain media samples.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Source.Chunk.Chunk.TrackSelectionData">
            <summary>Optional data associated with the selection of the track to which this chunk belongs.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Source.Chunk.Chunk.TrackSelectionReason">
            <summary>One of the <c>C.SelectionReason selection reasons</c> if the chunk belongs to a track.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Source.Chunk.Chunk.Type">
            <summary>The <c>DataType data type</c> of the chunk.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Source.Chunk.Chunk.DurationUs">
            <summary>Returns the duration of the chunk in microseconds.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Source.Chunk.Chunk.ResponseHeaders">
            <summary>Returns the response headers associated with the last <c>DataSource#open</c> call.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.Chunk.Chunk.BytesLoaded">
            <summary>Returns the number of bytes that have been loaded.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Source.Chunk.ChunkHolder">
            <summary>Holds a chunk or an indication that the end of the stream has been reached.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Source.Chunk.ChunkHolder.Chunk">
            <summary>The chunk.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Source.Chunk.ChunkHolder.EndOfStream">
            <summary>Indicates that the end of the stream has been reached.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.Chunk.ChunkHolder.Clear">
            <summary>Clears the holder.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Source.Chunk.ChunkSampleStream">
            <summary>A <c>SampleStream</c> that loads media in <c>Chunk</c>s, obtained from a <c>ChunkSource</c>.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Source.Chunk.ChunkSampleStream.InterfaceConsts.FlagOmitSampleData">
            <summary>Specifies that <c>DecoderInputBuffer#data</c>, <c>DecoderInputBuffer#supplementalData</c> and
            <c>DecoderInputBuffer#cryptoInfo</c> should not be populated when reading a sample buffer.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Source.Chunk.ChunkSampleStream.InterfaceConsts.FlagPeek">
            <summary>Specifies that the read position should not be advanced if a sample buffer is read.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Source.Chunk.ChunkSampleStream.InterfaceConsts.FlagRequireFormat">
            <summary>Specifies that if a sample buffer would normally be read next, the format of the stream should
            be read instead.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Source.Chunk.ChunkSampleStream.EmbeddedSampleStream.InterfaceConsts.FlagOmitSampleData">
            <summary>Specifies that <c>DecoderInputBuffer#data</c>, <c>DecoderInputBuffer#supplementalData</c> and
            <c>DecoderInputBuffer#cryptoInfo</c> should not be populated when reading a sample buffer.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Source.Chunk.ChunkSampleStream.EmbeddedSampleStream.InterfaceConsts.FlagPeek">
            <summary>Specifies that the read position should not be advanced if a sample buffer is read.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Source.Chunk.ChunkSampleStream.EmbeddedSampleStream.InterfaceConsts.FlagRequireFormat">
            <summary>Specifies that if a sample buffer would normally be read next, the format of the stream should
            be read instead.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Source.Chunk.ChunkSampleStream.BufferedPositionUs">
            <summary>Returns an estimate of the position up to which data is buffered.</summary>
            <returns>An estimate of the absolute position in microseconds up to which data is buffered, or
                <c>C#TIME_END_OF_SOURCE</c> if the track is fully buffered.</returns>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Source.Chunk.ChunkSampleStream.ChunkSource">
            <summary>Returns the <c>ChunkSource</c> used by this stream.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.Chunk.ChunkSampleStream.DiscardBuffer(System.Int64,System.Boolean)">
            <param name="positionUs">The position to discard up to, in microseconds.</param>
            <param name="toKeyframe">If true then for each track discards samples up to the keyframe before or at
                the specified position, rather than any sample before or at that position.</param>
            <summary>Discards buffered media up to the specified position.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.Chunk.ChunkSampleStream.GetAdjustedSeekPositionUs(System.Int64,Com.Google.Android.Exoplayer2.SeekParameters)">
            <param name="positionUs">The seek position in microseconds.</param>
            <param name="seekParameters">Parameters that control how the seek is performed.</param>
            <summary>Adjusts a seek position given the specified <c>SeekParameters</c>.</summary>
            <returns>The adjusted seek position, in microseconds.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.Chunk.ChunkSampleStream.Release">
            <summary>Releases the stream.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.Chunk.ChunkSampleStream.SeekToUs(System.Int64)">
            <param name="positionUs">The seek position in microseconds.</param>
            <summary>Seeks to the specified position in microseconds.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Source.Chunk.ContainerMediaChunk">
            <summary>A <c>BaseMediaChunk</c> that uses an <c>Extractor</c> to decode sample data.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Source.Chunk.DataChunk">
            <summary>A base class for <c>Chunk</c> implementations where the data should be loaded into a <c>byte[]</c> before being consumed.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.Chunk.DataChunk.Consume(System.Byte[],System.Int32)">
            <param name="data">An array containing the data.</param>
            <param name="limit">The limit of the data.</param>
            <summary>Called by <c>#load()</c>.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.Chunk.DataChunk.GetDataHolder">
            <summary>Returns the array in which the data is held.</summary>
            <returns>The array in which the data is held.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.Chunk.DataChunkInvoker.Consume(System.Byte[],System.Int32)">
            <param name="data">An array containing the data.</param>
            <param name="limit">The limit of the data.</param>
            <summary>Called by <c>#load()</c>.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Source.Chunk.IChunkExtractor">
            <summary>Extracts samples and track <c>Format Formats</c> from chunks.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.Chunk.IChunkExtractor.Release">
            <summary>Releases any held resources.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Source.Chunk.IChunkSource">
            <summary>A provider of <c>Chunk</c>s for a <c>ChunkSampleStream</c> to load.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.Chunk.IChunkSource.GetAdjustedSeekPositionUs(System.Int64,Com.Google.Android.Exoplayer2.SeekParameters)">
            <param name="positionUs">The seek position in microseconds.</param>
            <param name="seekParameters">Parameters that control how the seek is performed.</param>
            <summary>Adjusts a seek position given the specified <c>SeekParameters</c>.</summary>
            <returns>The adjusted seek position, in microseconds.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.Chunk.IChunkSource.GetNextChunk(System.Int64,System.Int64,Java.Util.IList,Com.Google.Android.Exoplayer2.Source.Chunk.ChunkHolder)">
            <param name="playbackPositionUs">The current playback position in microseconds. If playback of the
                period to which this chunk source belongs has not yet started, the value will be the
                starting position in the period minus the duration of any media in previous periods still
                to be played.</param>
            <param name="loadPositionUs">The current load position in microseconds. If <c>queue</c> is empty,
                this is the starting position from which chunks should be provided. Else it's equal to
                <c>MediaChunk#endTimeUs</c> of the last chunk in the <c>queue</c>.</param>
            <param name="queue">The queue of buffered <c>MediaChunk</c>s.</param>
            <param name="out">A holder to populate.</param>
            <summary>Returns the next chunk to load.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.Chunk.IChunkSource.MaybeThrowError">
            <summary>If the source is currently having difficulty providing chunks, then this method throws the
            underlying error.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.Chunk.IChunkSource.OnChunkLoadCompleted(Com.Google.Android.Exoplayer2.Source.Chunk.Chunk)">
            <param name="chunk">The chunk whose load has been completed.</param>
            <summary>Called when the <c>ChunkSampleStream</c> has finished loading a chunk obtained from this
            source.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.Chunk.IChunkSource.Release">
            <summary>Releases any held resources.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Source.Chunk.MediaChunkIterator.Empty">
            <summary>An empty media chunk iterator without available data.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Source.Chunk.IMediaChunkIterator">
            <summary>Iterator for media chunk sequences.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Source.Chunk.IMediaChunkIterator.Empty">
            <summary>An empty media chunk iterator without available data.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.Chunk.IMediaChunkIterator.Next">
            <summary>Moves the iterator to the next media chunk.</summary>
            <returns>Whether the iterator points to a media chunk with available data.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.Chunk.IMediaChunkIterator.Reset">
            <summary>Resets the iterator to the initial position.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Source.Chunk.InitializationChunk">
            <summary>A <c>Chunk</c> that uses an <c>Extractor</c> to decode initialization data for single track.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Source.Chunk.MediaChunk">
            <summary>An abstract base class for <c>Chunk</c>s that contain media samples.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Source.Chunk.MediaChunk.ChunkIndex">
            <summary>The chunk index, or <c>C#INDEX_UNSET</c> if it is not known.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Source.Chunk.MediaChunk.NextChunkIndex">
            <summary>Returns the next chunk index or <c>C#INDEX_UNSET</c> if it is not known.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Source.Chunk.MediaChunkInvoker.IsLoadCompleted">
            <summary>Returns whether the chunk has been fully loaded.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Source.Chunk.MediaParserChunkExtractor">
            <summary>
              <c>ChunkExtractor</c> implemented on top of the platform's <c>MediaParser</c>.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Source.Chunk.SingleSampleMediaChunk">
            <summary>A <c>BaseMediaChunk</c> for chunks consisting of a single raw sample.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Source.ClippingMediaPeriod">
            <summary>Wraps a <c>MediaPeriod</c> and clips its <c>SampleStream</c>s to provide a subsequence of their
            samples.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Source.ClippingMediaPeriod.MediaPeriod">
            <summary>The <c>MediaPeriod</c> wrapped by this clipping media period.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.ClippingMediaPeriod.#ctor(Com.Google.Android.Exoplayer2.Source.IMediaPeriod,System.Boolean,System.Int64,System.Int64)">
            <param name="mediaPeriod">The media period to clip.</param>
            <param name="enableInitialDiscontinuity">Whether the initial discontinuity should be enabled.</param>
            <param name="startUs">The clipping start time, in microseconds.</param>
            <param name="endUs">The clipping end time, in microseconds, or <c>C#TIME_END_OF_SOURCE</c> to
                indicate the end of the period.</param>
            <summary>Creates a new clipping media period that provides a clipped view of the specified <c>MediaPeriod</c>'s sample streams.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.ClippingMediaPeriod.UpdateClipping(System.Int64,System.Int64)">
            <param name="startUs">The clipping start time, in microseconds.</param>
            <param name="endUs">The clipping end time, in microseconds, or <c>C#TIME_END_OF_SOURCE</c> to
                indicate the end of the period.</param>
            <summary>Updates the clipping start/end times for this period, in microseconds.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Source.ClippingMediaSource">
            <summary>
              <c>MediaSource</c> that wraps a source and clips its timeline based on specified start/end
            positions.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.ClippingMediaSource.#ctor(Com.Google.Android.Exoplayer2.Source.IMediaSource,System.Int64)">
            <param name="mediaSource">The single-period source to wrap.</param>
            <param name="durationUs">The duration from the default position in the window in <c>mediaSource</c>'s
                timeline at which to stop providing samples. Specifying a duration that exceeds the <c>mediaSource</c>'s duration will result in the end of the source not being clipped.</param>
            <summary>Creates a new clipping source that wraps the specified source and provides samples from the
            default position for the specified duration.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.ClippingMediaSource.#ctor(Com.Google.Android.Exoplayer2.Source.IMediaSource,System.Int64,System.Int64)">
            <param name="mediaSource">The single-period source to wrap.</param>
            <param name="startPositionUs">The start position within <c>mediaSource</c>'s window at which to start
                providing samples, in microseconds.</param>
            <param name="endPositionUs">The end position within <c>mediaSource</c>'s window at which to stop
                providing samples, in microseconds. Specify <c>C#TIME_END_OF_SOURCE</c> to provide samples
                from the specified start point up to the end of the source. Specifying a position that
                exceeds the <c>mediaSource</c>'s duration will also result in the end of the source not
                being clipped.</param>
            <summary>Creates a new clipping source that wraps the specified source and provides samples between the
            specified start and end position.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.ClippingMediaSource.#ctor(Com.Google.Android.Exoplayer2.Source.IMediaSource,System.Int64,System.Int64,System.Boolean,System.Boolean,System.Boolean)">
            <param name="mediaSource">The single-period source to wrap.</param>
            <param name="startPositionUs">The start position at which to start providing samples, in microseconds.
                If <c>relativeToDefaultPosition</c> is <c>false</c>, this position is relative to the
                start of the window in <c>mediaSource</c>'s timeline. If <c>relativeToDefaultPosition</c>
                is <c>true</c>, this position is relative to the default position in the window in <c>mediaSource</c>'s timeline.</param>
            <param name="endPositionUs">The end position at which to stop providing samples, in microseconds.
                Specify <c>C#TIME_END_OF_SOURCE</c> to provide samples from the specified start point up
                to the end of the source. Specifying a position that exceeds the <c>mediaSource</c>'s
                duration will also result in the end of the source not being clipped. If <c>relativeToDefaultPosition</c> is <c>false</c>, the specified position is relative to the
                start of the window in <c>mediaSource</c>'s timeline. If <c>relativeToDefaultPosition</c>
                is <c>true</c>, this position is relative to the default position in the window in <c>mediaSource</c>'s timeline.</param>
            <param name="enableInitialDiscontinuity">Whether the initial discontinuity should be enabled.</param>
            <param name="allowDynamicClippingUpdates">Whether the clipping of active media periods moves with a
                live window. If <c>false</c>, playback ends when it reaches <c>endPositionUs</c> in the
                last reported live window at the time a media period was created.</param>
            <param name="relativeToDefaultPosition">Whether <c>startPositionUs</c> and <c>endPositionUs</c> are
                relative to the default position in the window in <c>mediaSource</c>'s timeline.</param>
            <summary>Creates a new clipping source that wraps the specified source.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Source.CompositeMediaSource">
            <param name="&lt;T&gt;&lt;T&gt;">The type of the id used to identify prepared child sources.</param>
            <summary>Composite <c>MediaSource</c> consisting of multiple child sources.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.CompositeMediaSource.#ctor">
            <summary>Creates composite media source without child sources.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.CompositeMediaSource.DisableChildSource(Java.Lang.Object)">
            <param name="id">The unique id used to prepare the child source.</param>
            <summary>Disables a child source.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.CompositeMediaSource.EnableChildSource(Java.Lang.Object)">
            <param name="id">The unique id used to prepare the child source.</param>
            <summary>Enables a child source.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.CompositeMediaSource.GetMediaTimeForChildMediaTime(Java.Lang.Object,System.Int64)">
            <param name="id">The unique id used to prepare the child source.</param>
            <param name="mediaTimeMs">A media time in the <c>MediaPeriod</c> of the child source, in
                milliseconds.</param>
            <summary>Returns the media time in the <c>MediaPeriod</c> of the composite source corresponding to the
            specified media time in the <c>MediaPeriod</c> of the child source.</summary>
            <returns>The corresponding media time in the <c>MediaPeriod</c> of the composite source, in
                milliseconds.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.CompositeMediaSource.GetWindowIndexForChildWindowIndex(Java.Lang.Object,System.Int32)">
            <param name="id">The unique id used to prepare the child source.</param>
            <param name="windowIndex">A window index of the child source.</param>
            <summary>Returns the window index in the composite source corresponding to the specified window index in
            a child source.</summary>
            <returns>The corresponding window index in the composite source.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.CompositeMediaSource.PrepareChildSource(Java.Lang.Object,Com.Google.Android.Exoplayer2.Source.IMediaSource)">
            <param name="id">A unique id to identify the child source preparation. Null is allowed as an id.</param>
            <param name="mediaSource">The child <c>MediaSource</c>.</param>
            <summary>Prepares a child source.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.CompositeMediaSource.ReleaseChildSource(Java.Lang.Object)">
            <param name="id">The unique id used to prepare the child source.</param>
            <summary>Releases a child source.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.CompositeMediaSourceInvoker.ReleasePeriod(Com.Google.Android.Exoplayer2.Source.IMediaPeriod)">
            <param name="mediaPeriod">The period to release.</param>
            <summary>Releases the period.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Source.CompositeSequenceableLoader">
            <summary>A <c>SequenceableLoader</c> that encapsulates multiple other <c>SequenceableLoader</c>s.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Source.ConcatenatingMediaSource">
            <summary>Concatenates multiple <c>MediaSource</c>s.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Source.ConcatenatingMediaSource.Size">
            <summary>Returns the number of media sources in the playlist.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.ConcatenatingMediaSource.AddMediaSource(Com.Google.Android.Exoplayer2.Source.IMediaSource)">
            <param name="mediaSource">The <c>MediaSource</c> to be added to the list.</param>
            <summary>Appends a <c>MediaSource</c> to the playlist.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.ConcatenatingMediaSource.AddMediaSource(System.Int32,Com.Google.Android.Exoplayer2.Source.IMediaSource)">
            <param name="index">The index at which the new <c>MediaSource</c> will be inserted. This index must
                be in the range of 0 &amp;lt;= index &amp;lt;= <c>#getSize()</c>.</param>
            <param name="mediaSource">The <c>MediaSource</c> to be added to the list.</param>
            <summary>Adds a <c>MediaSource</c> to the playlist.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.ConcatenatingMediaSource.AddMediaSources(System.Int32,System.Collections.Generic.ICollection{Com.Google.Android.Exoplayer2.Source.IMediaSource})">
            <param name="index">The index at which the new <c>MediaSource</c>s will be inserted. This index must
                be in the range of 0 &amp;lt;= index &amp;lt;= <c>#getSize()</c>.</param>
            <param name="mediaSources">A collection of <c>MediaSource</c>s to be added to the list. The media
                sources are added in the order in which they appear in this collection.</param>
            <summary>Adds multiple <c>MediaSource</c>s to the playlist.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.ConcatenatingMediaSource.AddMediaSources(System.Collections.Generic.ICollection{Com.Google.Android.Exoplayer2.Source.IMediaSource})">
            <param name="mediaSources">A collection of <c>MediaSource</c>s to be added to the list. The media
                sources are added in the order in which they appear in this collection.</param>
            <summary>Appends multiple <c>MediaSource</c>s to the playlist.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.ConcatenatingMediaSource.Clear">
            <summary>Clears the playlist.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.ConcatenatingMediaSource.GetMediaSource(System.Int32)">
            <param name="index">An index in the range of 0 &amp;lt;= index &amp;lt;= <c>#getSize()</c>.</param>
            <summary>Returns the <c>MediaSource</c> at a specified index.</summary>
            <returns>The <c>MediaSource</c> at this index.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.ConcatenatingMediaSource.MoveMediaSource(System.Int32,System.Int32)">
            <param name="currentIndex">The current index of the media source in the playlist. This index must be
                in the range of 0 &amp;lt;= index &amp;lt; <c>#getSize()</c>.</param>
            <param name="newIndex">The target index of the media source in the playlist. This index must be in the
                range of 0 &amp;lt;= index &amp;lt; <c>#getSize()</c>.</param>
            <summary>Moves an existing <c>MediaSource</c> within the playlist.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.ConcatenatingMediaSource.RemoveMediaSource(System.Int32)">
            <param name="index">The index at which the media source will be removed. This index must be in the
                range of 0 &amp;lt;= index &amp;lt; <c>#getSize()</c>.</param>
            <summary>Removes a <c>MediaSource</c> from the playlist.</summary>
            <returns>The removed <c>MediaSource</c>.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.ConcatenatingMediaSource.RemoveMediaSourceRange(System.Int32,System.Int32)">
            <param name="fromIndex">The initial range index, pointing to the first media source that will be
                removed. This index must be in the range of 0 &amp;lt;= index &amp;lt;= <c>#getSize()</c>.</param>
            <param name="toIndex">The final range index, pointing to the first media source that will be left
                untouched. This index must be in the range of 0 &amp;lt;= index &amp;lt;= <c>#getSize()</c>.</param>
            <summary>Removes a range of <c>MediaSource</c>s from the playlist, by specifying an initial index
            (included) and a final index (excluded).</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.ConcatenatingMediaSource.SetShuffleOrder(Com.Google.Android.Exoplayer2.Source.IShuffleOrder)">
            <param name="shuffleOrder">A <c>ShuffleOrder</c>.</param>
            <summary>Sets a new shuffle order to use when shuffling the child media sources.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Source.DefaultCompositeSequenceableLoaderFactory">
            <summary>Default implementation of <c>CompositeSequenceableLoaderFactory</c>.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Source.DefaultMediaSourceFactory">
            <summary>The default <c>MediaSource.Factory</c> implementation.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Source.DefaultMediaSourceFactory.InterfaceConsts.Unsupported">
            <summary>An instance that throws <c>UnsupportedOperationException</c> from <c>#createMediaSource</c>
            and <c>#getSupportedTypes()</c>.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.DefaultMediaSourceFactory.ClearLocalAdInsertionComponents">
            <summary>Clear any values set via <c>#setLocalAdInsertionComponents(AdsLoader.Provider,
            AdViewProvider)</c>.</summary>
            <returns>This factory, for convenience.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.DefaultMediaSourceFactory.ExperimentalUseProgressiveMediaSourceForSubtitles(System.Boolean)">
            <param name="useProgressiveMediaSourceForSubtitles">Indicates that <c>ProgressiveMediaSource</c>
                should be used for subtitles instead of <c>SingleSampleMediaSource</c>.</param>
            <summary>Sets whether a <c>ProgressiveMediaSource</c> or <c>SingleSampleMediaSource</c> is constructed
            to handle <c>MediaItem.LocalConfiguration#subtitleConfigurations</c>.</summary>
            <returns>This factory, for convenience.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.DefaultMediaSourceFactory.SetLiveMaxOffsetMs(System.Int64)">
            <param name="liveMaxOffsetMs">The maximum allowed live offset, in milliseconds, or <c>C#TIME_UNSET</c> to use the media-defined default.</param>
            <summary>Sets the maximum offset from the live edge for live streams, in milliseconds.</summary>
            <returns>This factory, for convenience.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.DefaultMediaSourceFactory.SetLiveMaxSpeed(System.Single)">
            <param name="maxSpeed">The maximum factor by which playback can be sped up for live streams, or <c>C#RATE_UNSET</c> to use the media-defined default.</param>
            <summary>Sets the maximum playback speed for live streams.</summary>
            <returns>This factory, for convenience.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.DefaultMediaSourceFactory.SetLiveMinOffsetMs(System.Int64)">
            <param name="liveMinOffsetMs">The minimum allowed live offset, in milliseconds, or <c>C#TIME_UNSET</c> to use the media-defined default.</param>
            <summary>Sets the minimum offset from the live edge for live streams, in milliseconds.</summary>
            <returns>This factory, for convenience.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.DefaultMediaSourceFactory.SetLiveMinSpeed(System.Single)">
            <param name="minSpeed">The minimum factor by which playback can be sped up for live streams, or <c>C#RATE_UNSET</c> to use the media-defined default.</param>
            <summary>Sets the minimum playback speed for live streams.</summary>
            <returns>This factory, for convenience.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.DefaultMediaSourceFactory.SetLiveTargetOffsetMs(System.Int64)">
            <param name="liveTargetOffsetMs">The target live offset, in milliseconds, or <c>C#TIME_UNSET</c> to
                use the media-defined default.</param>
            <summary>Sets the target live offset for live streams, in milliseconds.</summary>
            <returns>This factory, for convenience.</returns>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Source.EmptySampleStream">
            <summary>An empty <c>SampleStream</c>.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Source.EmptySampleStream.InterfaceConsts.FlagOmitSampleData">
            <summary>Specifies that <c>DecoderInputBuffer#data</c>, <c>DecoderInputBuffer#supplementalData</c> and
            <c>DecoderInputBuffer#cryptoInfo</c> should not be populated when reading a sample buffer.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Source.EmptySampleStream.InterfaceConsts.FlagPeek">
            <summary>Specifies that the read position should not be advanced if a sample buffer is read.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Source.EmptySampleStream.InterfaceConsts.FlagRequireFormat">
            <summary>Specifies that if a sample buffer would normally be read next, the format of the stream should
            be read instead.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Source.ForwardingTimeline">
            <summary>An overridable <c>Timeline</c> implementation forwarding all methods to another timeline.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Source.ICompositeSequenceableLoaderFactory">
            <summary>A factory to create composite <c>SequenceableLoader</c>s.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Source.IMediaPeriod">
            <summary>Loads media corresponding to a <c>Timeline.Period</c>, and allows that media to be read.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.IMediaPeriod.ContinueLoading(System.Int64)">
            <param name="positionUs">The current playback position in microseconds. If playback of this period has
                not yet started, the value will be the starting position in this period minus the duration
                of any media in previous periods still to be played.</param>
            <summary>Attempts to continue loading.</summary>
            <returns>True if progress was made, meaning that <c>#getNextLoadPositionUs()</c> will return a
                different value than prior to the call. False otherwise.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.IMediaPeriod.DiscardBuffer(System.Int64,System.Boolean)">
            <param name="positionUs">The position in microseconds.</param>
            <param name="toKeyframe">If true then for each track discards samples up to the keyframe before or at
                the specified position, rather than any sample before or at that position.</param>
            <summary>Discards buffered media up to the specified position.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.IMediaPeriod.GetAdjustedSeekPositionUs(System.Int64,Com.Google.Android.Exoplayer2.SeekParameters)">
            <param name="positionUs">The seek position in microseconds.</param>
            <param name="seekParameters">Parameters that control how the seek is performed. Implementations may
                apply seek parameters on a best effort basis.</param>
            <summary>Returns the position to which a seek will be performed, given the specified seek position and
            <c>SeekParameters</c>.</summary>
            <returns>The actual position to which a seek will be performed, in microseconds.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.IMediaPeriod.MaybeThrowPrepareError">
            <summary>Throws an error that's preventing the period from becoming prepared.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.IMediaPeriod.ReadDiscontinuity">
            <summary>Attempts to read a discontinuity.</summary>
            <returns>If a discontinuity was read then the playback position in microseconds after the
                discontinuity. Else <c>C#TIME_UNSET</c>.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.IMediaPeriod.ReevaluateBuffer(System.Int64)">
            <param name="positionUs">The current playback position in microseconds. If playback of this period has
                not yet started, the value will be the starting position in this period minus the duration
                of any media in previous periods still to be played.</param>
            <summary>Re-evaluates the buffer given the playback position.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.IMediaPeriod.SeekToUs(System.Int64)">
            <param name="positionUs">The seek position in microseconds.</param>
            <summary>Attempts to seek to the specified position in microseconds.</summary>
            <returns>The actual position to which the period was seeked, in microseconds.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.IMediaPeriod.SelectTracks(Com.Google.Android.Exoplayer2.Trackselection.IExoTrackSelection[],System.Boolean[],Com.Google.Android.Exoplayer2.Source.ISampleStream[],System.Boolean[],System.Int64)">
            <param name="selections">The renderer track selections.</param>
            <param name="mayRetainStreamFlags">Flags indicating whether the existing sample stream can be retained
                for each track selection. A <c>true</c> value indicates that the selection is equivalent
                to the one that was previously passed, and that the caller does not require that the sample
                stream be recreated. If a retained sample stream holds any references to the track
                selection then they must be updated to point to the new selection.</param>
            <param name="streams">The existing sample streams, which will be updated to reflect the provided
                selections.</param>
            <param name="streamResetFlags">Will be updated to indicate new sample streams, and sample streams that
                have been retained but with the requirement that the consuming renderer be reset.</param>
            <param name="positionUs">The current playback position in microseconds. If playback of this period has
                not yet started, the value will be the starting position.</param>
            <summary>Performs a track selection.</summary>
            <returns>The actual position at which the tracks were enabled, in microseconds.</returns>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Source.IMediaSource">
            <summary>Defines and provides media to be played by an <c>ExoPlayer</c>.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Source.IMediaSource.IsSingleWindow">
            <summary>Returns true if the media source is guaranteed to never have zero or more than one window.</summary>
            <returns>true if the source has exactly one window.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.IMediaSource.MaybeThrowSourceInfoRefreshError">
            <summary>Throws any pending error encountered while loading or refreshing source information.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.IMediaSource.ReleasePeriod(Com.Google.Android.Exoplayer2.Source.IMediaPeriod)">
            <param name="mediaPeriod">The period to release.</param>
            <summary>Releases the period.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.IMediaSource.RemoveDrmEventListener(Com.Google.Android.Exoplayer2.Drm.IDrmSessionEventListener)">
            <param name="eventListener">The listener to be removed.</param>
            <summary>Removes a <c>DrmSessionEventListener</c> from the list of listeners which are notified of DRM
            events for this media source.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.IMediaSource.RemoveEventListener(Com.Google.Android.Exoplayer2.Source.IMediaSourceEventListener)">
            <param name="eventListener">The listener to be removed.</param>
            <summary>Removes a <c>MediaSourceEventListener</c> from the list of listeners which are notified of
            media source events.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Source.IMediaSourceEventListener">
            <summary>Interface for callbacks to be notified of <c>MediaSource</c> events.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Source.MediaSourceFactory.Unsupported">
            <summary>An instance that throws <c>UnsupportedOperationException</c> from <c>#createMediaSource</c>
            and <c>#getSupportedTypes()</c>.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Source.IMediaSourceFactory.Unsupported">
            <summary>An instance that throws <c>UnsupportedOperationException</c> from <c>#createMediaSource</c>
            and <c>#getSupportedTypes()</c>.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Source.IProgressiveMediaExtractor">
            <summary>Extracts the contents of a container file from a progressive media stream.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.IProgressiveMediaExtractor.DisableSeekingOnMp3Streams">
            <summary>Disables seeking in MP3 streams.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.IProgressiveMediaExtractor.Release">
            <summary>Releases any held resources.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.IProgressiveMediaExtractor.Seek(System.Int64,System.Int64)">
            <param name="position">The byte offset in the stream from which data will be provided.</param>
            <param name="seekTimeUs">The seek time in microseconds.</param>
            <summary>Notifies the extracting infrastructure that a seek has occurred.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Source.SampleStream.FlagOmitSampleData">
            <summary>Specifies that <c>DecoderInputBuffer#data</c>, <c>DecoderInputBuffer#supplementalData</c> and
            <c>DecoderInputBuffer#cryptoInfo</c> should not be populated when reading a sample buffer.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Source.SampleStream.FlagPeek">
            <summary>Specifies that the read position should not be advanced if a sample buffer is read.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Source.SampleStream.FlagRequireFormat">
            <summary>Specifies that if a sample buffer would normally be read next, the format of the stream should
            be read instead.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Source.ISampleStream">
            <summary>A stream of media samples (and associated format information).</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Source.ISampleStream.FlagOmitSampleData">
            <summary>Specifies that <c>DecoderInputBuffer#data</c>, <c>DecoderInputBuffer#supplementalData</c> and
            <c>DecoderInputBuffer#cryptoInfo</c> should not be populated when reading a sample buffer.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Source.ISampleStream.FlagPeek">
            <summary>Specifies that the read position should not be advanced if a sample buffer is read.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Source.ISampleStream.FlagRequireFormat">
            <summary>Specifies that if a sample buffer would normally be read next, the format of the stream should
            be read instead.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.ISampleStream.MaybeThrowError">
            <summary>Throws an error that's preventing data from being read.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.ISampleStream.SkipData(System.Int64)">
            <param name="positionUs">The specified time.</param>
            <summary>Attempts to skip to the keyframe before the specified position, or to the end of the stream if
            <c>positionUs</c> is beyond it.</summary>
            <returns>The number of samples that were skipped.</returns>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Source.ISequenceableLoader">
            <summary>A loader that can proceed in approximate synchronization with other loaders.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.ISequenceableLoader.ContinueLoading(System.Int64)">
            <param name="positionUs">The current playback position in microseconds. If playback of the period to
                which this loader belongs has not yet started, the value will be the starting position in
                the period minus the duration of any media in previous periods still to be played.</param>
            <summary>Attempts to continue loading.</summary>
            <returns>True if progress was made, meaning that <c>#getNextLoadPositionUs()</c> will return a
                different value than prior to the call. False otherwise.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.ISequenceableLoader.ReevaluateBuffer(System.Int64)">
            <param name="positionUs">The current playback position in microseconds. If playback of this period has
                not yet started, the value will be the starting position in this period minus the duration
                of any media in previous periods still to be played.</param>
            <summary>Re-evaluates the buffer given the playback position.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Source.IShuffleOrder">
            <summary>Shuffled order of indices.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.IShuffleOrder.CloneAndClear">
            <summary>Returns a copy of the shuffle order with all elements removed.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.IShuffleOrder.CloneAndInsert(System.Int32,System.Int32)">
            <param name="insertionIndex">The index in the unshuffled order at which elements are inserted.</param>
            <param name="insertionCount">The number of elements inserted at <c>insertionIndex</c>.</param>
            <summary>Returns a copy of the shuffle order with newly inserted elements.</summary>
            <returns>A copy of this <c>ShuffleOrder</c> with newly inserted elements.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.IShuffleOrder.CloneAndRemove(System.Int32,System.Int32)">
            <param name="indexFrom">The starting index in the unshuffled order of the range to remove.</param>
            <param name="indexToExclusive">The smallest index (must be greater or equal to <c>indexFrom</c>) that
                will not be removed.</param>
            <summary>Returns a copy of the shuffle order with a range of elements removed.</summary>
            <returns>A copy of this <c>ShuffleOrder</c> without the elements in the removed range.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.IShuffleOrder.GetNextIndex(System.Int32)">
            <param name="index">An index.</param>
            <summary>Returns the next index in the shuffle order.</summary>
            <returns>The index after <c>index</c>, or <c>C#INDEX_UNSET</c> if <c>index</c> is the last
                element.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.IShuffleOrder.GetPreviousIndex(System.Int32)">
            <param name="index">An index.</param>
            <summary>Returns the previous index in the shuffle order.</summary>
            <returns>The index before <c>index</c>, or <c>C#INDEX_UNSET</c> if <c>index</c> is the first
                element.</returns>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Source.LoadEventInfo">
            <summary>
              <c>MediaSource</c> load event information.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Source.LoadEventInfo.BytesLoaded">
            <summary>The number of bytes that were loaded up to the event time.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Source.LoadEventInfo.ElapsedRealtimeMs">
            <summary>The value of <c>SystemClock#elapsedRealtime</c> at the time of the load event.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Source.LoadEventInfo.LoadDurationMs">
            <summary>The duration of the load up to the event time.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Source.LoadEventInfo.LoadTaskId">
            <summary>Identifies the load task to which this event corresponds.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Source.LoadEventInfo.ResponseHeaders">
            <summary>The response headers associated with the load, or an empty map if unavailable.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Source.LoadEventInfo.NewId">
            <summary>Returns an non-negative identifier which is unique to the JVM instance.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Source.LoopingMediaSource">
            <summary>Loops a <c>MediaSource</c> a specified number of times.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.LoopingMediaSource.#ctor(Com.Google.Android.Exoplayer2.Source.IMediaSource)">
            <param name="childSource">The <c>MediaSource</c> to loop.</param>
            <summary>Loops the provided source indefinitely.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.LoopingMediaSource.#ctor(Com.Google.Android.Exoplayer2.Source.IMediaSource,System.Int32)">
            <param name="childSource">The <c>MediaSource</c> to loop.</param>
            <param name="loopCount">The desired number of loops. Must be strictly positive.</param>
            <summary>Loops the provided source a specified number of times.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Source.MaskingMediaPeriod">
            <summary>Media period that defers calling <c>MediaSource#createPeriod(MediaPeriodId, Allocator, long)</c>
            on a given source until <c>#createPeriod(MediaPeriodId)</c> has been called.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Source.MaskingMediaPeriod.PreparePositionOverrideUs">
            <summary>Returns the prepare position override set by <c>#overridePreparePositionUs(long)</c>.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Source.MaskingMediaPeriod.PreparePositionUs">
            <summary>Returns the position at which the masking media period was prepared, in microseconds.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.MaskingMediaPeriod.OverridePreparePositionUs(System.Int64)">
            <param name="preparePositionUs">The default prepare position to use, in microseconds.</param>
            <summary>Overrides the default prepare position at which to prepare the media period.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.MaskingMediaPeriod.ReleasePeriod">
            <summary>Releases the period.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.MaskingMediaPeriod.SetMediaSource(Com.Google.Android.Exoplayer2.Source.IMediaSource)">
            <summary>Sets the <c>MediaSource</c> that will create the underlying media period.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Source.MaskingMediaSource">
            <summary>A <c>MediaSource</c> that masks the <c>Timeline</c> with a placeholder until the actual media
            structure is known.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.MaskingMediaSource.#ctor(Com.Google.Android.Exoplayer2.Source.IMediaSource,System.Boolean)">
            <param name="mediaSource">A <c>MediaSource</c>.</param>
            <param name="useLazyPreparation">Whether the <c>mediaSource</c> is prepared lazily. If false, all
                manifest loads and other initial preparation steps happen immediately. If true, these
                initial preparations are triggered only when the player starts buffering the media.</param>
            <summary>Creates the masking media source.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Source.MediaLoadData">
            <summary>Descriptor for data being loaded or selected by a <c>MediaSource</c>.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Source.MediaLoadData.DataType">
            <summary>The <c>DataType data type</c>.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Source.MediaLoadData.MediaEndTimeMs">
            <summary>The end time of the media in the <c>MediaPeriod</c>, or <c>C#TIME_UNSET</c> if the data does
            not belong to a specific <c>MediaPeriod</c> or the end time is unknown.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Source.MediaLoadData.MediaStartTimeMs">
            <summary>The start time of the media in the <c>MediaPeriod</c>, or <c>C#TIME_UNSET</c> if the data
            does not belong to a specific <c>MediaPeriod</c>.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Source.MediaLoadData.TrackSelectionData">
            <summary>Optional data associated with the selection of the track to which the data belongs.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Source.MediaLoadData.TrackSelectionReason">
            <summary>One of the <c>SelectionReason selection reasons</c> if the data belongs to a track.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Source.MediaLoadData.TrackType">
            <summary>One of the <c>TrackType track types</c>, which is a media track type if the data corresponds
            to media of a specific type, or <c>C#TRACK_TYPE_UNKNOWN</c> otherwise.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.MediaLoadData.#ctor(System.Int32)">
            <summary>Creates an instance with the given <c>#dataType</c>.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Source.Mediaparser.InputReaderAdapterV30">
            <summary>
              <c>MediaParser.SeekableInputReader</c> implementation wrapping a <c>DataReader</c>.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Source.Mediaparser.InputReaderAdapterV30.AndResetSeekPosition">
            <summary>Returns the last value passed to <c>#seekToPosition(long)</c> and sets the stored value to
            <c>C#POSITION_UNSET</c>.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.Mediaparser.InputReaderAdapterV30.SetCurrentPosition(System.Int64)">
            <summary>Sets the absolute position in the resource from which the wrapped <c>DataReader</c> reads.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Source.Mediaparser.MediaParserUtil">
            <summary>Miscellaneous constants and utility methods related to the <c>MediaParser</c> integration.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Source.Mediaparser.OutputConsumerAdapterV30">
            <summary>
              <c>MediaParser.OutputConsumer</c> implementation that redirects output to an <c>ExtractorOutput</c>.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.Mediaparser.OutputConsumerAdapterV30.#ctor">
            <summary>Equivalent to <c>#OutputConsumerAdapterV30(Format, int, boolean)
            OutputConsumerAdapterV30(primaryTrackManifestFormat= null, primaryTrackType= C.TRACK_TYPE_NONE,
            expectDummySeekMap= false)</c></summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.Mediaparser.OutputConsumerAdapterV30.DisableSeeking">
            <summary>Overrides future received <c>SeekMap SeekMaps</c> with non-seekable instances.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.Mediaparser.OutputConsumerAdapterV30.SetSampleTimestampUpperLimitFilterUs(System.Int64)">
            <param name="sampleTimestampUpperLimitFilterUs">The maximum allowed sample timestamp, or <c>C#TIME_UNSET</c> to remove filtering.</param>
            <summary>Sets an upper limit for sample timestamp filtering.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.Mediaparser.OutputConsumerAdapterV30.SetSelectedParserName(System.String)">
            <param name="parserName">The name of the selected parser.</param>
            <summary>Defines the container mime type to propagate through <c>TrackOutput#format</c>.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Source.MediaParserExtractorAdapter">
            <summary>
              <c>ProgressiveMediaExtractor</c> implemented on top of the platform's <c>MediaParser</c>.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Source.MergingMediaSource">
            <summary>Merges multiple <c>MediaSource</c>s.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Source.ProgressiveMediaSource">
            <summary>Provides one period that loads data from a <c>Uri</c> and extracted using an <c>Extractor</c>.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Source.ProgressiveMediaSource.DefaultLoadingCheckIntervalBytes">
            <summary>The default number of bytes that should be loaded between each each invocation of <c>MediaPeriod.Callback#onContinueLoadingRequested(SequenceableLoader)</c>.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Source.ProgressiveMediaSource.Factory.InterfaceConsts.Unsupported">
            <summary>An instance that throws <c>UnsupportedOperationException</c> from <c>#createMediaSource</c>
            and <c>#getSupportedTypes()</c>.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Source.SampleQueue">
            <summary>A queue of media samples.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Source.SampleQueue.FirstIndex">
            <summary>Returns the current absolute start index.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Source.SampleQueue.FirstTimestampUs">
            <summary>Returns the timestamp of the first sample, or <c>Long#MIN_VALUE</c> if the queue is empty.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Source.SampleQueue.IsLastSampleQueued">
            <summary>Returns whether the last sample of the stream has knowingly been queued.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Source.SampleQueue.LargestQueuedTimestampUs">
            <summary>Returns the largest sample timestamp that has been queued since the last <c>#reset</c>.</summary>
            <returns>The largest sample timestamp that has been queued, or <c>Long#MIN_VALUE</c> if no
                samples have been queued.</returns>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Source.SampleQueue.LargestReadTimestampUs">
            <summary>Returns the largest sample timestamp that has been read since the last <c>#reset</c>.</summary>
            <returns>The largest sample timestamp that has been read, or <c>Long#MIN_VALUE</c> if no
                samples have been read.</returns>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Source.SampleQueue.ReadIndex">
            <summary>Returns the current absolute read index.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Source.SampleQueue.WriteIndex">
            <summary>Returns the current absolute write index.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.SampleQueue.CreateWithoutDrm(Com.Google.Android.Exoplayer2.Upstream.IAllocator)">
            <param name="allocator">An <c>Allocator</c> from which allocations for sample data can be obtained.</param>
            <summary>Creates a sample queue without DRM resource management.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.SampleQueue.DiscardTo(System.Int64,System.Boolean,System.Boolean)">
            <param name="timeUs">The time to discard up to.</param>
            <param name="toKeyframe">If true then discards samples up to the keyframe before or at the specified
                time, rather than any sample before or at that time.</param>
            <param name="stopAtReadPosition">If true then samples are only discarded if they're before the read
                position. If false then samples at and beyond the read position may be discarded, in which
                case the read position is advanced to the first remaining sample.</param>
            <summary>Discards up to but not including the sample immediately before or at the specified time.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.SampleQueue.DiscardToEnd">
            <summary>Discards all samples in the queue and advances the read position.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.SampleQueue.DiscardToRead">
            <summary>Discards up to but not including the read position.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.SampleQueue.DiscardUpstreamFrom(System.Int64)">
            <param name="timeUs">Samples will be discarded from the write end of the queue until a sample with a
                timestamp smaller than timeUs is encountered (this sample is not discarded). Must be larger
                than <c>#getLargestReadTimestampUs()</c>.</param>
            <summary>Discards samples from the write side of the queue.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.SampleQueue.DiscardUpstreamSamples(System.Int32)">
            <param name="discardFromIndex">The absolute index of the first sample to be discarded. Must be in the
                range [<c>#getReadIndex()</c>, <c>#getWriteIndex()</c>].</param>
            <summary>Discards samples from the write side of the queue.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.SampleQueue.GetSkipCount(System.Int64,System.Boolean)">
            <param name="timeUs">The time to advance to.</param>
            <param name="allowEndOfQueue">Whether the end of the queue is considered a keyframe when <c>timeUs</c> is larger than the largest queued timestamp.</param>
            <summary>Returns the number of samples that need to be <c>#skip(int) skipped</c> to advance the read
            position to the keyframe before or at the specified time.</summary>
            <returns>The number of samples that need to be skipped, which may be equal to 0.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.SampleQueue.InvalidateUpstreamFormatAdjustment">
            <summary>Invalidates the last upstream format adjustment.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.SampleQueue.IsReady(System.Boolean)">
            <param name="loadingFinished">Whether no more samples will be written to the sample queue. When true,
                this method returns true if the sample queue is empty, because an empty sample queue means
                the end of stream has been reached. When false, this method returns false if the sample
                queue is empty.</param>
            <summary>Returns whether there is data available for reading.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.SampleQueue.MaybeThrowError">
            <summary>Throws an error that's preventing data from being read.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.SampleQueue.PeekSourceId">
            <summary>Peeks the source id of the next sample to be read, or the current upstream source id if the
            queue is empty or if the read position is at the end of the queue.</summary>
            <returns>The source id.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.SampleQueue.PreRelease">
            <summary>Calls <c>#discardToEnd()</c> and releases any resources owned by the queue.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.SampleQueue.Release">
            <summary>Calls <c>#reset(boolean) reset(true)</c> and releases any resources owned by the queue.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.SampleQueue.Reset">
            <summary>Convenience method for <c>reset(false)</c>.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.SampleQueue.Reset(System.Boolean)">
            <param name="resetUpstreamFormat">Whether the upstream format should be cleared. If set to false,
                samples queued after the reset (and before a subsequent call to <c>#format(Format)</c>)
                are assumed to have the current upstream format. If set to true, <c>#format(Format)</c>
                must be called after the reset before any more samples can be queued.</param>
            <summary>Clears all samples from the queue.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.SampleQueue.SeekTo(System.Int32)">
            <param name="sampleIndex">The sample index.</param>
            <summary>Attempts to seek the read position to the specified sample index.</summary>
            <returns>Whether the seek was successful.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.SampleQueue.SeekTo(System.Int64,System.Boolean)">
            <param name="timeUs">The time to seek to.</param>
            <param name="allowTimeBeyondBuffer">Whether the operation can succeed if <c>timeUs</c> is beyond the
                end of the queue, by seeking to the last sample (or keyframe).</param>
            <summary>Attempts to seek the read position to the keyframe before or at the specified time.</summary>
            <returns>Whether the seek was successful.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.SampleQueue.SetSampleOffsetUs(System.Int64)">
            <param name="sampleOffsetUs">The timestamp offset in microseconds.</param>
            <summary>Sets an offset that will be added to the timestamps (and sub-sample timestamps) of samples that
            are subsequently queued.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.SampleQueue.SetStartTimeUs(System.Int64)">
            <param name="startTimeUs">The start time, in microseconds.</param>
            <summary>Sets the start time for the queue.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.SampleQueue.Skip(System.Int32)">
            <param name="count">The number of samples to advance the read position by. Must be at least 0 and at
                most <c>#getWriteIndex()</c> - <c>#getReadIndex()</c>.</param>
            <summary>Advances the read position by the specified number of samples.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.SampleQueue.SourceId(System.Int32)">
            <param name="sourceId">The source identifier.</param>
            <summary>Sets a source identifier for subsequent samples.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.SampleQueue.Splice">
            <summary>Indicates samples that are subsequently queued should be spliced into those already queued.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Source.SilenceMediaSource">
            <summary>Media source with a single period consisting of silent raw audio of a given duration.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Source.SilenceMediaSource.MediaId">
            <summary>The media id used by any media item of silence media sources.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Source.SilenceMediaSource.#ctor(System.Int64)">
            <param name="durationUs">The duration of silent audio to output, in microseconds.</param>
            <summary>Creates a new media source providing silent audio of the given duration.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Source.SinglePeriodTimeline">
            <summary>A <c>Timeline</c> consisting of a single period and static window.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Source.SingleSampleMediaSource">
            <summary>Loads data at a given <c>Uri</c> as a single sample belonging to a single <c>MediaPeriod</c>.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Source.TrackGroupArray">
            <summary>An immutable array of <c>TrackGroup</c>s.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Source.TrackGroupArray.Empty">
            <summary>The empty array.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Source.TrackGroupArray.Length">
            <summary>The number of groups in the array.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Source.TrackGroupArray.IsEmpty">
            <summary>Returns whether this track group array is empty.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Source.UnrecognizedInputFormatException">
            <summary>Thrown if the input format was not recognized.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.AbstractConcatenatedTimeline">
            <summary>Abstract base class for the concatenation of one or more <c>Timeline</c>s.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.AbstractConcatenatedTimeline.#ctor(System.Boolean,Com.Google.Android.Exoplayer2.Source.IShuffleOrder)">
            <param name="isAtomic">Whether the child timelines shall be treated as atomic, i.e., treated as a
                single item for repeating and shuffling.</param>
            <param name="shuffleOrder">A shuffle order of child timelines. The number of child timelines must
                match the number of elements in the shuffle order.</param>
            <summary>Sets up a concatenated timeline with a shuffle order of child timelines.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.AbstractConcatenatedTimeline.GetChildIndexByChildUid(Java.Lang.Object)">
            <param name="childUid">A child UID.</param>
            <summary>Returns the index of the child timeline with the given UID or <c>C#INDEX_UNSET</c> if not
            found.</summary>
            <returns>Index of child timeline or <c>C#INDEX_UNSET</c> if UID was not found.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.AbstractConcatenatedTimeline.GetChildIndexByPeriodIndex(System.Int32)">
            <param name="periodIndex">A valid period index within the bounds of the timeline.</param>
            <summary>Returns the index of the child timeline containing the given period index.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.AbstractConcatenatedTimeline.GetChildIndexByWindowIndex(System.Int32)">
            <param name="windowIndex">A valid window index within the bounds of the timeline.</param>
            <summary>Returns the index of the child timeline containing the given window index.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.AbstractConcatenatedTimeline.GetChildPeriodUidFromConcatenatedUid(Java.Lang.Object)">
            <param name="concatenatedUid">UID of a period in a concatenated timeline.</param>
            <summary>Returns UID of the period in the child timeline from a concatenated period UID.</summary>
            <returns>UID of the period in the child timeline.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.AbstractConcatenatedTimeline.GetChildTimelineUidFromConcatenatedUid(Java.Lang.Object)">
            <param name="concatenatedUid">UID of a period in a concatenated timeline.</param>
            <summary>Returns UID of child timeline from a concatenated period UID.</summary>
            <returns>UID of the child timeline this period belongs to.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.AbstractConcatenatedTimeline.GetChildUidByChildIndex(System.Int32)">
            <param name="childIndex">A valid child index within the bounds of the timeline.</param>
            <summary>Returns the UID of the child timeline with the given index.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.AbstractConcatenatedTimeline.GetConcatenatedUid(Java.Lang.Object,Java.Lang.Object)">
            <param name="childTimelineUid">UID of the child timeline this period or window belongs to.</param>
            <param name="childPeriodOrWindowUid">UID of the period or window in the child timeline.</param>
            <summary>Returns a concatenated UID for a period or window in a child timeline.</summary>
            <returns>UID of the period or window in the concatenated timeline.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.AbstractConcatenatedTimeline.GetFirstPeriodIndexByChildIndex(System.Int32)">
            <param name="childIndex">A valid child index within the bounds of the timeline.</param>
            <summary>Returns the first period index belonging to the child timeline with the given index.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.AbstractConcatenatedTimeline.GetFirstWindowIndexByChildIndex(System.Int32)">
            <param name="childIndex">A valid child index within the bounds of the timeline.</param>
            <summary>Returns the first window index belonging to the child timeline with the given index.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.AbstractConcatenatedTimelineInvoker.GetChildIndexByChildUid(Java.Lang.Object)">
            <param name="childUid">A child UID.</param>
            <summary>Returns the index of the child timeline with the given UID or <c>C#INDEX_UNSET</c> if not
            found.</summary>
            <returns>Index of child timeline or <c>C#INDEX_UNSET</c> if UID was not found.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.AbstractConcatenatedTimelineInvoker.GetChildIndexByPeriodIndex(System.Int32)">
            <param name="periodIndex">A valid period index within the bounds of the timeline.</param>
            <summary>Returns the index of the child timeline containing the given period index.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.AbstractConcatenatedTimelineInvoker.GetChildIndexByWindowIndex(System.Int32)">
            <param name="windowIndex">A valid window index within the bounds of the timeline.</param>
            <summary>Returns the index of the child timeline containing the given window index.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.AbstractConcatenatedTimelineInvoker.GetChildUidByChildIndex(System.Int32)">
            <param name="childIndex">A valid child index within the bounds of the timeline.</param>
            <summary>Returns the UID of the child timeline with the given index.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.AbstractConcatenatedTimelineInvoker.GetFirstPeriodIndexByChildIndex(System.Int32)">
            <param name="childIndex">A valid child index within the bounds of the timeline.</param>
            <summary>Returns the first period index belonging to the child timeline with the given index.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.AbstractConcatenatedTimelineInvoker.GetFirstWindowIndexByChildIndex(System.Int32)">
            <param name="childIndex">A valid child index within the bounds of the timeline.</param>
            <summary>Returns the first window index belonging to the child timeline with the given index.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Analytics.DefaultAnalyticsCollector">
            <summary>Data collector that forwards analytics events to <c>AnalyticsListener AnalyticsListeners</c>.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Analytics.DefaultPlaybackSessionManager">
            <summary>Default <c>PlaybackSessionManager</c> which instantiates a new session for each window in the
            timeline and also for each ad within the windows.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Analytics.DefaultPlaybackSessionManager.#ctor">
            <summary>Creates session manager with a <c>#DEFAULT_SESSION_ID_GENERATOR</c> to generate session ids.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsCollector">
            <summary>Interface for data collectors that forward analytics events to <c>AnalyticsListener
            AnalyticsListeners</c>.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsCollector.AddListener(Com.Google.Android.Exoplayer2.Analytics.IAnalyticsListener)">
            <param name="listener">The listener to add.</param>
            <summary>Adds a listener for analytics events.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsCollector.NotifySeekStarted">
            <summary>Notify analytics collector that a seek operation will start.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsCollector.OnAudioCodecError(Java.Lang.Exception)">
            <param name="audioCodecError">The error. Typically a <c>CodecException</c> if the renderer uses
                <c>MediaCodec</c>, or a <c>DecoderException</c> if the renderer uses a software decoder.</param>
            <summary>Called when an audio decoder encounters an error.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsCollector.OnAudioDecoderInitialized(System.String,System.Int64,System.Int64)">
            <param name="decoderName">The audio decoder that was created.</param>
            <param name="initializedTimestampMs">
              <c>SystemClock#elapsedRealtime()</c> when initialization
                finished.</param>
            <param name="initializationDurationMs">The time taken to initialize the decoder in milliseconds.</param>
            <summary>Called when a audio decoder is created.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsCollector.OnAudioDecoderReleased(System.String)">
            <param name="decoderName">The audio decoder that was released.</param>
            <summary>Called when a audio decoder is released.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsCollector.OnAudioDisabled(Com.Google.Android.Exoplayer2.Decoder.DecoderCounters)">
            <param name="counters">
              <c>DecoderCounters</c> that were updated by the audio renderer.</param>
            <summary>Called when the audio renderer is disabled.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsCollector.OnAudioEnabled(Com.Google.Android.Exoplayer2.Decoder.DecoderCounters)">
            <param name="counters">
              <c>DecoderCounters</c> that will be updated by the audio renderer for as long
                as it remains enabled.</param>
            <summary>Called when the audio renderer is enabled.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsCollector.OnAudioPositionAdvancing(System.Int64)">
            <param name="playoutStartSystemTimeMs">The approximate derived <c>System#currentTimeMillis()</c> at
                which playout started.</param>
            <summary>Called when the audio position has increased for the first time since the last pause or
            position reset.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsCollector.OnAudioSinkError(Java.Lang.Exception)">
            <param name="audioSinkError">The error that occurred. Typically an <c>AudioSink.InitializationException</c>, a <c>AudioSink.WriteException</c>, or an <c>AudioSink.UnexpectedDiscontinuityException</c>.</param>
            <summary>Called when <c>AudioSink</c> has encountered an error.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsCollector.OnAudioUnderrun(System.Int32,System.Int64,System.Int64)">
            <param name="bufferSize">The size of the audio output buffer, in bytes.</param>
            <param name="bufferSizeMs">The size of the audio output buffer, in milliseconds, if it contains PCM
                encoded audio. <c>C#TIME_UNSET</c> if the output buffer contains non-PCM encoded audio.</param>
            <param name="elapsedSinceLastFeedMs">The time since audio was last written to the output buffer.</param>
            <summary>Called when an audio underrun occurs.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsCollector.OnDroppedFrames(System.Int32,System.Int64)">
            <param name="count">The number of dropped frames.</param>
            <param name="elapsedMs">The duration in milliseconds over which the frames were dropped. This duration
                is timed from when the renderer was started or from when dropped frames were last reported
                (whichever was more recent), and not from when the first of the reported drops occurred.</param>
            <summary>Called to report the number of frames dropped by the video renderer.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsCollector.OnRenderedFirstFrame(Java.Lang.Object,System.Int64)">
            <param name="output">The output of the video renderer. Normally a <c>Surface</c>, however some video
                renderers may have other output types (e.g., a <c>VideoDecoderOutputBufferRenderer</c>).</param>
            <param name="renderTimeMs">The <c>SystemClock#elapsedRealtime()</c> when the frame was rendered.</param>
            <summary>Called when a frame is rendered for the first time since setting the output, or since the
            renderer was reset, or since the stream being rendered was changed.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsCollector.OnVideoCodecError(Java.Lang.Exception)">
            <param name="videoCodecError">The error. Typically a <c>CodecException</c> if the renderer uses
                <c>MediaCodec</c>, or a <c>DecoderException</c> if the renderer uses a software decoder.</param>
            <summary>Called when a video decoder encounters an error.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsCollector.OnVideoDecoderInitialized(System.String,System.Int64,System.Int64)">
            <param name="decoderName">The decoder that was created.</param>
            <param name="initializedTimestampMs">
              <c>SystemClock#elapsedRealtime()</c> when initialization
                finished.</param>
            <param name="initializationDurationMs">The time taken to initialize the decoder in milliseconds.</param>
            <summary>Called when a video decoder is created.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsCollector.OnVideoDecoderReleased(System.String)">
            <param name="decoderName">The video decoder that was released.</param>
            <summary>Called when a video decoder is released.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsCollector.OnVideoDisabled(Com.Google.Android.Exoplayer2.Decoder.DecoderCounters)">
            <param name="counters">
              <c>DecoderCounters</c> that were updated by the video renderer.</param>
            <summary>Called when the video renderer is disabled.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsCollector.OnVideoEnabled(Com.Google.Android.Exoplayer2.Decoder.DecoderCounters)">
            <param name="counters">
              <c>DecoderCounters</c> that will be updated by the video renderer for as long
                as it remains enabled.</param>
            <summary>Called when the video renderer is enabled.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsCollector.OnVideoFrameProcessingOffset(System.Int64,System.Int32)">
            <param name="totalProcessingOffsetUs">The sum of all video frame processing offset samples for the
                video frames processed by the renderer in microseconds.</param>
            <param name="frameCount">The number of samples included in the <c>totalProcessingOffsetUs</c>.</param>
            <summary>Called to report the video processing offset of video frames processed by the video renderer.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsCollector.Release">
            <summary>Releases the collector.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsCollector.RemoveListener(Com.Google.Android.Exoplayer2.Analytics.IAnalyticsListener)">
            <param name="listener">The listener to remove.</param>
            <summary>Removes a previously added analytics event listener.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.AnalyticsListener.EventAudioAttributesChanged">
            <summary>Audio attributes changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.AnalyticsListener.EventAudioCodecError">
            <summary>The audio codec encountered an error.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.AnalyticsListener.EventAudioDecoderInitialized">
            <summary>An audio renderer created a decoder.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.AnalyticsListener.EventAudioDecoderReleased">
            <summary>An audio renderer released a decoder.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.AnalyticsListener.EventAudioDisabled">
            <summary>An audio renderer was disabled.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.AnalyticsListener.EventAudioEnabled">
            <summary>An audio renderer was enabled.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.AnalyticsListener.EventAudioInputFormatChanged">
            <summary>The format consumed by an audio renderer changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.AnalyticsListener.EventAudioPositionAdvancing">
            <summary>The audio position has increased for the first time since the last pause or position reset.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.AnalyticsListener.EventAudioSessionId">
            <summary>An audio session id was set.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.AnalyticsListener.EventAudioSinkError">
            <summary>The audio sink encountered a non-fatal error.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.AnalyticsListener.EventAudioUnderrun">
            <summary>An audio underrun occurred.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.AnalyticsListener.EventAvailableCommandsChanged">
            <summary>
              <c>Player#getAvailableCommands()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.AnalyticsListener.EventBandwidthEstimate">
            <summary>The bandwidth estimate has been updated.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.AnalyticsListener.EventCues">
            <summary>
              <c>Player#getCurrentCues()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.AnalyticsListener.EventDeviceInfoChanged">
            <summary>
              <c>Player#getDeviceInfo()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.AnalyticsListener.EventDeviceVolumeChanged">
            <summary>
              <c>Player#getDeviceVolume()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.AnalyticsListener.EventDownstreamFormatChanged">
            <summary>The downstream format sent to renderers changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.AnalyticsListener.EventDrmKeysLoaded">
            <summary>DRM keys were loaded.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.AnalyticsListener.EventDrmKeysRemoved">
            <summary>DRM keys were removed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.AnalyticsListener.EventDrmKeysRestored">
            <summary>DRM keys were restored.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.AnalyticsListener.EventDrmSessionAcquired">
            <summary>A DRM session has been acquired.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.AnalyticsListener.EventDrmSessionManagerError">
            <summary>A non-fatal DRM session manager error occurred.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.AnalyticsListener.EventDrmSessionReleased">
            <summary>A DRM session has been released.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.AnalyticsListener.EventDroppedVideoFrames">
            <summary>Video frames have been dropped.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.AnalyticsListener.EventIsPlayingChanged">
            <summary>
              <c>Player#isPlaying()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.AnalyticsListener.EventLoadCanceled">
            <summary>A source canceled loading data.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.AnalyticsListener.EventLoadCompleted">
            <summary>A source started completed loading data.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.AnalyticsListener.EventLoadError">
            <summary>A source had a non-fatal error loading data.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.AnalyticsListener.EventLoadStarted">
            <summary>A source started loading data.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.AnalyticsListener.EventMaxSeekToPreviousPositionChanged">
            <summary>
              <c>Player#getMaxSeekToPreviousPosition()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.AnalyticsListener.EventMediaItemTransition">
            <summary>
              <c>Player#getCurrentMediaItem()</c> changed or the player started repeating the current item.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.AnalyticsListener.EventMediaMetadataChanged">
            <summary>
              <c>Player#getMediaMetadata()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.AnalyticsListener.EventMetadata">
            <summary>Metadata associated with the current playback time was reported.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.AnalyticsListener.EventPlaybackParametersChanged">
            <summary>
              <c>Player#getPlaybackParameters()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.AnalyticsListener.EventPlaybackStateChanged">
            <summary>
              <c>Player#getPlaybackState()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.AnalyticsListener.EventPlaybackSuppressionReasonChanged">
            <summary>
              <c>Player#getPlaybackSuppressionReason()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.AnalyticsListener.EventPlayerError">
            <summary>
              <c>Player#getPlayerError()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.AnalyticsListener.EventPlayerReleased">
            <summary>The player was released.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.AnalyticsListener.EventPlaylistMetadataChanged">
            <summary>
              <c>Player#getPlaylistMetadata()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.AnalyticsListener.EventPlayWhenReadyChanged">
            <summary>
              <c>Player#getPlayWhenReady()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.AnalyticsListener.EventPositionDiscontinuity">
            <summary>A position discontinuity occurred.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.AnalyticsListener.EventRenderedFirstFrame">
            <summary>The first frame has been rendered since setting the surface, since the renderer was reset or
            since the stream changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.AnalyticsListener.EventRepeatModeChanged">
            <summary>
              <c>Player#getRepeatMode()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.AnalyticsListener.EventSeekBackIncrementChanged">
            <summary>
              <c>Player#getSeekBackIncrement()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.AnalyticsListener.EventSeekForwardIncrementChanged">
            <summary>
              <c>Player#getSeekForwardIncrement()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.AnalyticsListener.EventShuffleModeEnabledChanged">
            <summary>
              <c>Player#getShuffleModeEnabled()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.AnalyticsListener.EventSkipSilenceEnabledChanged">
            <summary>Skipping silences was enabled or disabled in the audio stream.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.AnalyticsListener.EventSurfaceSizeChanged">
            <summary>The surface size changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.AnalyticsListener.EventTimelineChanged">
            <summary>
              <c>Player#getCurrentTimeline()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.AnalyticsListener.EventTracksChanged">
            <summary>
              <c>Player#getCurrentTracks()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.AnalyticsListener.EventTrackSelectionParametersChanged">
            <summary>
              <c>Player#getTrackSelectionParameters()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.AnalyticsListener.EventUpstreamDiscarded">
            <summary>Data was removed from the end of the media buffer.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.AnalyticsListener.EventVideoCodecError">
            <summary>The video codec encountered an error.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.AnalyticsListener.EventVideoDecoderInitialized">
            <summary>A video renderer created a decoder.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.AnalyticsListener.EventVideoDecoderReleased">
            <summary>A video renderer released a decoder.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.AnalyticsListener.EventVideoDisabled">
            <summary>A video renderer was disabled.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.AnalyticsListener.EventVideoEnabled">
            <summary>A video renderer was enabled.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.AnalyticsListener.EventVideoFrameProcessingOffset">
            <summary>Video frame processing offset data has been reported.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.AnalyticsListener.EventVideoInputFormatChanged">
            <summary>The format consumed by a video renderer changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.AnalyticsListener.EventVideoSizeChanged">
            <summary>The video size changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.AnalyticsListener.EventVolumeChanged">
            <summary>The volume changed.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsListener">
            <summary>A listener for analytics events.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsListener.EventAudioAttributesChanged">
            <summary>Audio attributes changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsListener.EventAudioCodecError">
            <summary>The audio codec encountered an error.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsListener.EventAudioDecoderInitialized">
            <summary>An audio renderer created a decoder.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsListener.EventAudioDecoderReleased">
            <summary>An audio renderer released a decoder.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsListener.EventAudioDisabled">
            <summary>An audio renderer was disabled.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsListener.EventAudioEnabled">
            <summary>An audio renderer was enabled.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsListener.EventAudioInputFormatChanged">
            <summary>The format consumed by an audio renderer changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsListener.EventAudioPositionAdvancing">
            <summary>The audio position has increased for the first time since the last pause or position reset.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsListener.EventAudioSessionId">
            <summary>An audio session id was set.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsListener.EventAudioSinkError">
            <summary>The audio sink encountered a non-fatal error.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsListener.EventAudioUnderrun">
            <summary>An audio underrun occurred.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsListener.EventAvailableCommandsChanged">
            <summary>
              <c>Player#getAvailableCommands()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsListener.EventBandwidthEstimate">
            <summary>The bandwidth estimate has been updated.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsListener.EventCues">
            <summary>
              <c>Player#getCurrentCues()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsListener.EventDeviceInfoChanged">
            <summary>
              <c>Player#getDeviceInfo()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsListener.EventDeviceVolumeChanged">
            <summary>
              <c>Player#getDeviceVolume()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsListener.EventDownstreamFormatChanged">
            <summary>The downstream format sent to renderers changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsListener.EventDrmKeysLoaded">
            <summary>DRM keys were loaded.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsListener.EventDrmKeysRemoved">
            <summary>DRM keys were removed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsListener.EventDrmKeysRestored">
            <summary>DRM keys were restored.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsListener.EventDrmSessionAcquired">
            <summary>A DRM session has been acquired.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsListener.EventDrmSessionManagerError">
            <summary>A non-fatal DRM session manager error occurred.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsListener.EventDrmSessionReleased">
            <summary>A DRM session has been released.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsListener.EventDroppedVideoFrames">
            <summary>Video frames have been dropped.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsListener.EventIsPlayingChanged">
            <summary>
              <c>Player#isPlaying()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsListener.EventLoadCanceled">
            <summary>A source canceled loading data.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsListener.EventLoadCompleted">
            <summary>A source started completed loading data.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsListener.EventLoadError">
            <summary>A source had a non-fatal error loading data.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsListener.EventLoadStarted">
            <summary>A source started loading data.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsListener.EventMaxSeekToPreviousPositionChanged">
            <summary>
              <c>Player#getMaxSeekToPreviousPosition()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsListener.EventMediaItemTransition">
            <summary>
              <c>Player#getCurrentMediaItem()</c> changed or the player started repeating the current item.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsListener.EventMediaMetadataChanged">
            <summary>
              <c>Player#getMediaMetadata()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsListener.EventMetadata">
            <summary>Metadata associated with the current playback time was reported.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsListener.EventPlaybackParametersChanged">
            <summary>
              <c>Player#getPlaybackParameters()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsListener.EventPlaybackStateChanged">
            <summary>
              <c>Player#getPlaybackState()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsListener.EventPlaybackSuppressionReasonChanged">
            <summary>
              <c>Player#getPlaybackSuppressionReason()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsListener.EventPlayerError">
            <summary>
              <c>Player#getPlayerError()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsListener.EventPlayerReleased">
            <summary>The player was released.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsListener.EventPlaylistMetadataChanged">
            <summary>
              <c>Player#getPlaylistMetadata()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsListener.EventPlayWhenReadyChanged">
            <summary>
              <c>Player#getPlayWhenReady()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsListener.EventPositionDiscontinuity">
            <summary>A position discontinuity occurred.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsListener.EventRenderedFirstFrame">
            <summary>The first frame has been rendered since setting the surface, since the renderer was reset or
            since the stream changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsListener.EventRepeatModeChanged">
            <summary>
              <c>Player#getRepeatMode()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsListener.EventSeekBackIncrementChanged">
            <summary>
              <c>Player#getSeekBackIncrement()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsListener.EventSeekForwardIncrementChanged">
            <summary>
              <c>Player#getSeekForwardIncrement()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsListener.EventShuffleModeEnabledChanged">
            <summary>
              <c>Player#getShuffleModeEnabled()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsListener.EventSkipSilenceEnabledChanged">
            <summary>Skipping silences was enabled or disabled in the audio stream.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsListener.EventSurfaceSizeChanged">
            <summary>The surface size changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsListener.EventTimelineChanged">
            <summary>
              <c>Player#getCurrentTimeline()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsListener.EventTracksChanged">
            <summary>
              <c>Player#getCurrentTracks()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsListener.EventTrackSelectionParametersChanged">
            <summary>
              <c>Player#getTrackSelectionParameters()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsListener.EventUpstreamDiscarded">
            <summary>Data was removed from the end of the media buffer.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsListener.EventVideoCodecError">
            <summary>The video codec encountered an error.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsListener.EventVideoDecoderInitialized">
            <summary>A video renderer created a decoder.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsListener.EventVideoDecoderReleased">
            <summary>A video renderer released a decoder.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsListener.EventVideoDisabled">
            <summary>A video renderer was disabled.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsListener.EventVideoEnabled">
            <summary>A video renderer was enabled.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsListener.EventVideoFrameProcessingOffset">
            <summary>Video frame processing offset data has been reported.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsListener.EventVideoInputFormatChanged">
            <summary>The format consumed by a video renderer changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsListener.EventVideoSizeChanged">
            <summary>The video size changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.IAnalyticsListener.EventVolumeChanged">
            <summary>The volume changed.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Analytics.IPlaybackSessionManager">
            <summary>Manager for active playback sessions.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Analytics.MediaMetricsListener">
            <summary>An <c>AnalyticsListener</c> that interacts with the Android <c>MediaMetricsManager</c>.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.MediaMetricsListener.InterfaceConsts.EventAudioAttributesChanged">
            <summary>Audio attributes changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.MediaMetricsListener.InterfaceConsts.EventAudioCodecError">
            <summary>The audio codec encountered an error.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.MediaMetricsListener.InterfaceConsts.EventAudioDecoderInitialized">
            <summary>An audio renderer created a decoder.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.MediaMetricsListener.InterfaceConsts.EventAudioDecoderReleased">
            <summary>An audio renderer released a decoder.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.MediaMetricsListener.InterfaceConsts.EventAudioDisabled">
            <summary>An audio renderer was disabled.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.MediaMetricsListener.InterfaceConsts.EventAudioEnabled">
            <summary>An audio renderer was enabled.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.MediaMetricsListener.InterfaceConsts.EventAudioInputFormatChanged">
            <summary>The format consumed by an audio renderer changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.MediaMetricsListener.InterfaceConsts.EventAudioPositionAdvancing">
            <summary>The audio position has increased for the first time since the last pause or position reset.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.MediaMetricsListener.InterfaceConsts.EventAudioSessionId">
            <summary>An audio session id was set.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.MediaMetricsListener.InterfaceConsts.EventAudioSinkError">
            <summary>The audio sink encountered a non-fatal error.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.MediaMetricsListener.InterfaceConsts.EventAudioUnderrun">
            <summary>An audio underrun occurred.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.MediaMetricsListener.InterfaceConsts.EventAvailableCommandsChanged">
            <summary>
              <c>Player#getAvailableCommands()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.MediaMetricsListener.InterfaceConsts.EventBandwidthEstimate">
            <summary>The bandwidth estimate has been updated.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.MediaMetricsListener.InterfaceConsts.EventCues">
            <summary>
              <c>Player#getCurrentCues()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.MediaMetricsListener.InterfaceConsts.EventDeviceInfoChanged">
            <summary>
              <c>Player#getDeviceInfo()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.MediaMetricsListener.InterfaceConsts.EventDeviceVolumeChanged">
            <summary>
              <c>Player#getDeviceVolume()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.MediaMetricsListener.InterfaceConsts.EventDownstreamFormatChanged">
            <summary>The downstream format sent to renderers changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.MediaMetricsListener.InterfaceConsts.EventDrmKeysLoaded">
            <summary>DRM keys were loaded.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.MediaMetricsListener.InterfaceConsts.EventDrmKeysRemoved">
            <summary>DRM keys were removed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.MediaMetricsListener.InterfaceConsts.EventDrmKeysRestored">
            <summary>DRM keys were restored.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.MediaMetricsListener.InterfaceConsts.EventDrmSessionAcquired">
            <summary>A DRM session has been acquired.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.MediaMetricsListener.InterfaceConsts.EventDrmSessionManagerError">
            <summary>A non-fatal DRM session manager error occurred.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.MediaMetricsListener.InterfaceConsts.EventDrmSessionReleased">
            <summary>A DRM session has been released.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.MediaMetricsListener.InterfaceConsts.EventDroppedVideoFrames">
            <summary>Video frames have been dropped.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.MediaMetricsListener.InterfaceConsts.EventIsPlayingChanged">
            <summary>
              <c>Player#isPlaying()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.MediaMetricsListener.InterfaceConsts.EventLoadCanceled">
            <summary>A source canceled loading data.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.MediaMetricsListener.InterfaceConsts.EventLoadCompleted">
            <summary>A source started completed loading data.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.MediaMetricsListener.InterfaceConsts.EventLoadError">
            <summary>A source had a non-fatal error loading data.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.MediaMetricsListener.InterfaceConsts.EventLoadStarted">
            <summary>A source started loading data.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.MediaMetricsListener.InterfaceConsts.EventMaxSeekToPreviousPositionChanged">
            <summary>
              <c>Player#getMaxSeekToPreviousPosition()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.MediaMetricsListener.InterfaceConsts.EventMediaItemTransition">
            <summary>
              <c>Player#getCurrentMediaItem()</c> changed or the player started repeating the current item.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.MediaMetricsListener.InterfaceConsts.EventMediaMetadataChanged">
            <summary>
              <c>Player#getMediaMetadata()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.MediaMetricsListener.InterfaceConsts.EventMetadata">
            <summary>Metadata associated with the current playback time was reported.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.MediaMetricsListener.InterfaceConsts.EventPlaybackParametersChanged">
            <summary>
              <c>Player#getPlaybackParameters()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.MediaMetricsListener.InterfaceConsts.EventPlaybackStateChanged">
            <summary>
              <c>Player#getPlaybackState()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.MediaMetricsListener.InterfaceConsts.EventPlaybackSuppressionReasonChanged">
            <summary>
              <c>Player#getPlaybackSuppressionReason()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.MediaMetricsListener.InterfaceConsts.EventPlayerError">
            <summary>
              <c>Player#getPlayerError()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.MediaMetricsListener.InterfaceConsts.EventPlayerReleased">
            <summary>The player was released.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.MediaMetricsListener.InterfaceConsts.EventPlaylistMetadataChanged">
            <summary>
              <c>Player#getPlaylistMetadata()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.MediaMetricsListener.InterfaceConsts.EventPlayWhenReadyChanged">
            <summary>
              <c>Player#getPlayWhenReady()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.MediaMetricsListener.InterfaceConsts.EventPositionDiscontinuity">
            <summary>A position discontinuity occurred.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.MediaMetricsListener.InterfaceConsts.EventRenderedFirstFrame">
            <summary>The first frame has been rendered since setting the surface, since the renderer was reset or
            since the stream changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.MediaMetricsListener.InterfaceConsts.EventRepeatModeChanged">
            <summary>
              <c>Player#getRepeatMode()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.MediaMetricsListener.InterfaceConsts.EventSeekBackIncrementChanged">
            <summary>
              <c>Player#getSeekBackIncrement()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.MediaMetricsListener.InterfaceConsts.EventSeekForwardIncrementChanged">
            <summary>
              <c>Player#getSeekForwardIncrement()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.MediaMetricsListener.InterfaceConsts.EventShuffleModeEnabledChanged">
            <summary>
              <c>Player#getShuffleModeEnabled()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.MediaMetricsListener.InterfaceConsts.EventSkipSilenceEnabledChanged">
            <summary>Skipping silences was enabled or disabled in the audio stream.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.MediaMetricsListener.InterfaceConsts.EventSurfaceSizeChanged">
            <summary>The surface size changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.MediaMetricsListener.InterfaceConsts.EventTimelineChanged">
            <summary>
              <c>Player#getCurrentTimeline()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.MediaMetricsListener.InterfaceConsts.EventTracksChanged">
            <summary>
              <c>Player#getCurrentTracks()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.MediaMetricsListener.InterfaceConsts.EventTrackSelectionParametersChanged">
            <summary>
              <c>Player#getTrackSelectionParameters()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.MediaMetricsListener.InterfaceConsts.EventUpstreamDiscarded">
            <summary>Data was removed from the end of the media buffer.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.MediaMetricsListener.InterfaceConsts.EventVideoCodecError">
            <summary>The video codec encountered an error.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.MediaMetricsListener.InterfaceConsts.EventVideoDecoderInitialized">
            <summary>A video renderer created a decoder.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.MediaMetricsListener.InterfaceConsts.EventVideoDecoderReleased">
            <summary>A video renderer released a decoder.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.MediaMetricsListener.InterfaceConsts.EventVideoDisabled">
            <summary>A video renderer was disabled.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.MediaMetricsListener.InterfaceConsts.EventVideoEnabled">
            <summary>A video renderer was enabled.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.MediaMetricsListener.InterfaceConsts.EventVideoFrameProcessingOffset">
            <summary>Video frame processing offset data has been reported.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.MediaMetricsListener.InterfaceConsts.EventVideoInputFormatChanged">
            <summary>The format consumed by a video renderer changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.MediaMetricsListener.InterfaceConsts.EventVideoSizeChanged">
            <summary>The video size changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.MediaMetricsListener.InterfaceConsts.EventVolumeChanged">
            <summary>The volume changed.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats">
            <summary>Statistics about playbacks.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.AbandonedBeforeReadyCount">
            <summary>The number of playbacks which were abandoned before they were ready to play.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.AdPlaybackCount">
            <summary>The number of ad playbacks.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.AudioFormatHistory">
            <summary>The audio format history as <c>EventTimeAndFormat EventTimeAndFormats</c> ordered by <c>EventTime.realTimeMs</c>.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.BackgroundJoiningCount">
            <summary>The number of playbacks which were pre-buffered in the background.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.Empty">
            <summary>Empty playback stats.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.EndedCount">
            <summary>The number of playbacks which reached the ended state at least once.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.FatalErrorCount">
            <summary>The total number of fatal errors.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.FatalErrorHistory">
            <summary>The history of fatal errors as <c>EventTimeAndException EventTimeAndExceptions</c> ordered by
            <c>EventTime.realTimeMs</c>.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.FatalErrorPlaybackCount">
            <summary>The total number of playback with at least one fatal error.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.FirstReportedTimeMs">
            <summary>The elapsed real-time as returned by <c>SystemClock.elapsedRealtime()</c> of the first
            reported playback event, or <c>C#TIME_UNSET</c> if no event has been reported.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.ForegroundPlaybackCount">
            <summary>The number of playbacks which were the active foreground playback at some point.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.InitialAudioFormatBitrateCount">
            <summary>The number of playbacks with initial audio format bitrate data.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.InitialVideoFormatBitrateCount">
            <summary>The number of playbacks with initial video format bitrate data.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.InitialVideoFormatHeightCount">
            <summary>The number of playbacks with initial video format height data.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.MaxRebufferTimeMs">
            <summary>The maximum time spent during a single rebuffer, in milliseconds, or <c>C#TIME_UNSET</c> if no
            rebuffer occurred.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.MediaTimeHistory">
            <summary>The media time history as an ordered list of long[2] arrays with [0] being the realtime as
            returned by <c>SystemClock.elapsedRealtime()</c> and [1] being the media time at this
            realtime, in milliseconds.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.NonFatalErrorCount">
            <summary>The total number of non-fatal errors.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.NonFatalErrorHistory">
            <summary>The history of non-fatal errors as <c>EventTimeAndException EventTimeAndExceptions</c> ordered
            by <c>EventTime.realTimeMs</c>.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.PlaybackCount">
            <summary>The number of individual playbacks for which these stats were collected.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.PlaybackStateHistory">
            <summary>The playback state history as <c>EventTimeAndPlaybackState EventTimeAndPlaybackStates</c>
            ordered by <c>EventTime.realTimeMs</c>.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.PlaybackStateAbandoned">
            <summary>Playback is abandoned before reaching the end of the media.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.PlaybackStateBuffering">
            <summary>Playback is buffering to resume active playback.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.PlaybackStateEnded">
            <summary>Playback has reached the end of the media.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.PlaybackStateFailed">
            <summary>Playback is stopped due a fatal error and can be retried.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.PlaybackStateInterruptedByAd">
            <summary>Playback is interrupted by an ad.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.PlaybackStateJoiningBackground">
            <summary>Playback is buffering in the background for initial playback start.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.PlaybackStateJoiningForeground">
            <summary>Playback is buffering in the foreground for initial playback start.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.PlaybackStateNotStarted">
            <summary>Playback has not started (initial state).</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.PlaybackStatePaused">
            <summary>Playback is paused but ready to play.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.PlaybackStatePausedBuffering">
            <summary>Playback is buffering while paused.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.PlaybackStatePlaying">
            <summary>Playback is actively playing.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.PlaybackStateSeeking">
            <summary>Playback is handling a seek.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.PlaybackStateStopped">
            <summary>Playback is stopped and can be restarted.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.PlaybackStateSuppressed">
            <summary>Playback is suppressed (e.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.PlaybackStateSuppressedBuffering">
            <summary>Playback is suppressed (e.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.TotalAudioFormatBitrateTimeProduct">
            <summary>The accumulated sum of all audio format bitrates, in bits per second, times the time the format
            was used for playback, in milliseconds.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.TotalAudioFormatTimeMs">
            <summary>The total media time for which audio format data is available, in milliseconds.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.TotalAudioUnderruns">
            <summary>The total number of audio underruns.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.TotalBandwidthBytes">
            <summary>The total bytes transferred during <c>#totalBandwidthTimeMs</c>.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.TotalBandwidthTimeMs">
            <summary>The total time for which bandwidth measurement data is available, in milliseconds.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.TotalDroppedFrames">
            <summary>The total number of dropped video frames.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.TotalInitialAudioFormatBitrate">
            <summary>The total initial audio format bitrate for all playbacks, in bits per second, or <c>C#LENGTH_UNSET</c> if no initial audio format data is available.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.TotalInitialVideoFormatBitrate">
            <summary>The total initial video format bitrate for all playbacks, in bits per second, or <c>C#LENGTH_UNSET</c> if no initial video format data is available.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.TotalInitialVideoFormatHeight">
            <summary>The total initial video format height for all playbacks, in pixels, or <c>C#LENGTH_UNSET</c>
            if no initial video format data is available.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.TotalPauseBufferCount">
            <summary>The total number of times a playback has been paused while rebuffering.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.TotalPauseCount">
            <summary>The total number of times a playback has been paused.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.TotalRebufferCount">
            <summary>The total number of times a rebuffer occurred.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.TotalSeekCount">
            <summary>The total number of times a seek occurred.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.TotalValidJoinTimeMs">
            <summary>The total time spent joining the playback, in milliseconds, or <c>C#TIME_UNSET</c> if no valid
            join time could be determined.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.TotalVideoFormatBitrateTimeMs">
            <summary>The total media time for which video format bitrate data is available, in milliseconds.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.TotalVideoFormatBitrateTimeProduct">
            <summary>The accumulated sum of all video format bitrates, in bits per second, times the time the format
            was used for playback, in milliseconds.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.TotalVideoFormatHeightTimeMs">
            <summary>The total media time for which video format height data is available, in milliseconds.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.TotalVideoFormatHeightTimeProduct">
            <summary>The accumulated sum of all video format heights, in pixels, times the time the format was used
            for playback, in milliseconds.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.ValidJoinTimeCount">
            <summary>The number of playbacks with a valid join time as documented in <c>#totalValidJoinTimeMs</c>.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.VideoFormatHistory">
            <summary>The video format history as <c>EventTimeAndFormat EventTimeAndFormats</c> ordered by <c>EventTime.realTimeMs</c>.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.AbandonedBeforeReadyRatio">
            <summary>Returns the ratio of foreground playbacks which were abandoned before they were ready to play,
            or <c>0.0</c> if no playback has been in foreground.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.AudioUnderrunRate">
            <summary>Returns the mean rate at which audio underruns occurred, in underruns per play time second, or
            <c>0.0</c> if no time was spent playing.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.DroppedFramesRate">
            <summary>Returns the mean rate at which video frames are dropped, in dropped frames per play time
            second, or <c>0.0</c> if no time was spent playing.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.EndedRatio">
            <summary>Returns the ratio of foreground playbacks which reached the ended state at least once, or
            <c>0.0</c> if no playback has been in foreground.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.FatalErrorRate">
            <summary>Returns the rate of fatal errors, in errors per play time second, or <c>0.0</c> if no time was
            spend playing.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.FatalErrorRatio">
            <summary>Returns the ratio of foreground playbacks which experienced fatal errors, or <c>0.0</c> if no
            playback has been in foreground.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.JoinTimeRatio">
            <summary>Returns the ratio of foreground join time to the total time spent playing and waiting, or
            <c>0.0</c> if no time was spend playing or waiting.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.MeanAudioFormatBitrate">
            <summary>Returns the mean audio format bitrate, in bits per second, or <c>C#LENGTH_UNSET</c> if no
            audio format data is available.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.MeanBandwidth">
            <summary>Returns the mean network bandwidth based on transfer measurements, in bits per second, or
            <c>C#LENGTH_UNSET</c> if no transfer data is available.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.MeanElapsedTimeMs">
            <summary>Returns the mean time covered by any playback state per playback, in milliseconds, or <c>C#TIME_UNSET</c> if no playback was recorded.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.MeanInitialAudioFormatBitrate">
            <summary>Returns the mean initial audio format bitrate, in bits per second, or <c>C#LENGTH_UNSET</c> if
            no audio format data is available.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.MeanInitialVideoFormatBitrate">
            <summary>Returns the mean initial video format bitrate, in bits per second, or <c>C#LENGTH_UNSET</c> if
            no video format data is available.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.MeanInitialVideoFormatHeight">
            <summary>Returns the mean initial video format height, in pixels, or <c>C#LENGTH_UNSET</c> if no video
            format data is available.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.MeanJoinTimeMs">
            <summary>Returns the mean time spent joining the playback, in milliseconds, or <c>C#TIME_UNSET</c> if
            no valid join time is available.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.MeanNonFatalErrorCount">
            <summary>Returns the mean number of non-fatal errors per foreground playback, or <c>0.0</c> if no
            playback has been in foreground.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.MeanPauseBufferCount">
            <summary>Returns the mean number of times a playback has been paused while rebuffering per foreground
            playback, or <c>0.0</c> if no playback has been in foreground.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.MeanPauseCount">
            <summary>Returns the mean number of times a playback has been paused per foreground playback, or <c>0.0</c> if no playback has been in foreground.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.MeanPausedTimeMs">
            <summary>Returns the mean time spent in a paused state per foreground playback, in milliseconds, or
            <c>C#TIME_UNSET</c> if no playback has been in foreground.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.MeanPlayAndWaitTimeMs">
            <summary>Returns the mean time spent playing or actively waiting for playback per foreground playback,
            in milliseconds, or <c>C#TIME_UNSET</c> if no playback has been in foreground.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.MeanPlayTimeMs">
            <summary>Returns the mean time spent actively playing per foreground playback, in milliseconds, or
            <c>C#TIME_UNSET</c> if no playback has been in foreground.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.MeanRebufferCount">
            <summary>Returns the mean number of times a rebuffer occurred per foreground playback, or <c>0.0</c> if
            no playback has been in foreground.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.MeanRebufferTimeMs">
            <summary>Returns the mean time spent rebuffering per foreground playback, in milliseconds, or <c>C#TIME_UNSET</c> if no playback has been in foreground.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.MeanSeekCount">
            <summary>Returns the mean number of times a seek occurred per foreground playback, or <c>0.0</c> if no
            playback has been in foreground.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.MeanSeekTimeMs">
            <summary>Returns the mean time spent per foreground playback from the start of a seek until playback is
            ready again, in milliseconds, or <c>C#TIME_UNSET</c> if no playback has been in foreground.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.MeanSingleRebufferTimeMs">
            <summary>Returns the mean time spent during a single rebuffer, in milliseconds, or <c>C#TIME_UNSET</c>
            if no rebuffer was recorded.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.MeanSingleSeekTimeMs">
            <summary>Returns the mean time spent from the start of a single seek until playback is ready again, in
            milliseconds, or <c>C#TIME_UNSET</c> if no seek occurred.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.MeanTimeBetweenFatalErrors">
            <summary>Returns the mean play time between fatal errors, in seconds.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.MeanTimeBetweenNonFatalErrors">
            <summary>Returns the mean play time between non-fatal errors, in seconds.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.MeanTimeBetweenRebuffers">
            <summary>Returns the mean play time between rebuffer events, in seconds.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.MeanVideoFormatBitrate">
            <summary>Returns the mean video format bitrate, in bits per second, or <c>C#LENGTH_UNSET</c> if no
            video format data is available.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.MeanVideoFormatHeight">
            <summary>Returns the mean video format height, in pixels, or <c>C#LENGTH_UNSET</c> if no video format
            data is available.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.MeanWaitTimeMs">
            <summary>Returns the mean time spent actively waiting for playback per foreground playback, in
            milliseconds, or <c>C#TIME_UNSET</c> if no playback has been in foreground.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.NonFatalErrorRate">
            <summary>Returns the rate of non-fatal errors, in errors per play time second, or <c>0.0</c> if no time
            was spend playing.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.RebufferRate">
            <summary>Returns the rate of rebuffer events, in rebuffers per play time second, or <c>0.0</c> if no
            time was spend playing.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.RebufferTimeRatio">
            <summary>Returns the ratio of rebuffer time to the total time spent playing and waiting, or <c>0.0</c>
            if no time was spend playing or waiting.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.SeekTimeRatio">
            <summary>Returns the ratio of seek time to the total time spent playing and waiting, or <c>0.0</c> if
            no time was spend playing or waiting.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.TotalElapsedTimeMs">
            <summary>Returns the total time covered by any playback state, in milliseconds.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.TotalJoinTimeMs">
            <summary>Returns the total time spent joining the playback in foreground, in milliseconds.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.TotalPausedTimeMs">
            <summary>Returns the total time spent in a paused state, in milliseconds.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.TotalPlayAndWaitTimeMs">
            <summary>Returns the total time spent playing or actively waiting for playback, in milliseconds.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.TotalPlayTimeMs">
            <summary>Returns the total time spent actively playing, in milliseconds.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.TotalRebufferTimeMs">
            <summary>Returns the total time spent rebuffering, in milliseconds.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.TotalSeekTimeMs">
            <summary>Returns the total time spent from the start of a seek until playback is ready again, in
            milliseconds.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.TotalWaitTimeMs">
            <summary>Returns the total time spent actively waiting for playback, in milliseconds.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.WaitTimeRatio">
            <summary>Returns the ratio of wait times to the total time spent playing and waiting, or <c>0.0</c> if
            no time was spend playing or waiting.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.GetMediaTimeMsAtRealtimeMs(System.Int64)">
            <param name="realtimeMs">The realtime as returned by <c>SystemClock#elapsedRealtime()</c>.</param>
            <summary>Returns the estimated media time at the given realtime, in milliseconds, or <c>C#TIME_UNSET</c> if the media time history is unknown.</summary>
            <returns>The estimated media time in milliseconds at this realtime, <c>C#TIME_UNSET</c> if no
                estimate can be given.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.GetPlaybackStateAtTime(System.Int64)">
            <param name="realtimeMs">The time as returned by <c>SystemClock#elapsedRealtime()</c>.</param>
            <summary>Returns the <c>PlaybackState</c> at the given time.</summary>
            <returns>The <c>PlaybackState</c> at that time, or <c>#PLAYBACK_STATE_NOT_STARTED</c> if the
                given time is before the first known playback state in the history.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Analytics.PlaybackStats.GetPlaybackStateDurationMs(System.Int32)">
            <param name="playbackState">A <c>PlaybackState</c>.</param>
            <summary>Returns the total time spent in a given <c>PlaybackState</c>, in milliseconds.</summary>
            <returns>Total spent in the given playback state, in milliseconds</returns>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Analytics.PlaybackStatsListener">
            <summary>
              <c>AnalyticsListener</c> to gather <c>PlaybackStats</c> from the player.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStatsListener.InterfaceConsts.EventAudioAttributesChanged">
            <summary>Audio attributes changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStatsListener.InterfaceConsts.EventAudioCodecError">
            <summary>The audio codec encountered an error.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStatsListener.InterfaceConsts.EventAudioDecoderInitialized">
            <summary>An audio renderer created a decoder.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStatsListener.InterfaceConsts.EventAudioDecoderReleased">
            <summary>An audio renderer released a decoder.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStatsListener.InterfaceConsts.EventAudioDisabled">
            <summary>An audio renderer was disabled.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStatsListener.InterfaceConsts.EventAudioEnabled">
            <summary>An audio renderer was enabled.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStatsListener.InterfaceConsts.EventAudioInputFormatChanged">
            <summary>The format consumed by an audio renderer changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStatsListener.InterfaceConsts.EventAudioPositionAdvancing">
            <summary>The audio position has increased for the first time since the last pause or position reset.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStatsListener.InterfaceConsts.EventAudioSessionId">
            <summary>An audio session id was set.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStatsListener.InterfaceConsts.EventAudioSinkError">
            <summary>The audio sink encountered a non-fatal error.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStatsListener.InterfaceConsts.EventAudioUnderrun">
            <summary>An audio underrun occurred.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStatsListener.InterfaceConsts.EventAvailableCommandsChanged">
            <summary>
              <c>Player#getAvailableCommands()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStatsListener.InterfaceConsts.EventBandwidthEstimate">
            <summary>The bandwidth estimate has been updated.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStatsListener.InterfaceConsts.EventCues">
            <summary>
              <c>Player#getCurrentCues()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStatsListener.InterfaceConsts.EventDeviceInfoChanged">
            <summary>
              <c>Player#getDeviceInfo()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStatsListener.InterfaceConsts.EventDeviceVolumeChanged">
            <summary>
              <c>Player#getDeviceVolume()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStatsListener.InterfaceConsts.EventDownstreamFormatChanged">
            <summary>The downstream format sent to renderers changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStatsListener.InterfaceConsts.EventDrmKeysLoaded">
            <summary>DRM keys were loaded.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStatsListener.InterfaceConsts.EventDrmKeysRemoved">
            <summary>DRM keys were removed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStatsListener.InterfaceConsts.EventDrmKeysRestored">
            <summary>DRM keys were restored.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStatsListener.InterfaceConsts.EventDrmSessionAcquired">
            <summary>A DRM session has been acquired.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStatsListener.InterfaceConsts.EventDrmSessionManagerError">
            <summary>A non-fatal DRM session manager error occurred.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStatsListener.InterfaceConsts.EventDrmSessionReleased">
            <summary>A DRM session has been released.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStatsListener.InterfaceConsts.EventDroppedVideoFrames">
            <summary>Video frames have been dropped.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStatsListener.InterfaceConsts.EventIsPlayingChanged">
            <summary>
              <c>Player#isPlaying()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStatsListener.InterfaceConsts.EventLoadCanceled">
            <summary>A source canceled loading data.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStatsListener.InterfaceConsts.EventLoadCompleted">
            <summary>A source started completed loading data.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStatsListener.InterfaceConsts.EventLoadError">
            <summary>A source had a non-fatal error loading data.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStatsListener.InterfaceConsts.EventLoadStarted">
            <summary>A source started loading data.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStatsListener.InterfaceConsts.EventMaxSeekToPreviousPositionChanged">
            <summary>
              <c>Player#getMaxSeekToPreviousPosition()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStatsListener.InterfaceConsts.EventMediaItemTransition">
            <summary>
              <c>Player#getCurrentMediaItem()</c> changed or the player started repeating the current item.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStatsListener.InterfaceConsts.EventMediaMetadataChanged">
            <summary>
              <c>Player#getMediaMetadata()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStatsListener.InterfaceConsts.EventMetadata">
            <summary>Metadata associated with the current playback time was reported.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStatsListener.InterfaceConsts.EventPlaybackParametersChanged">
            <summary>
              <c>Player#getPlaybackParameters()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStatsListener.InterfaceConsts.EventPlaybackStateChanged">
            <summary>
              <c>Player#getPlaybackState()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStatsListener.InterfaceConsts.EventPlaybackSuppressionReasonChanged">
            <summary>
              <c>Player#getPlaybackSuppressionReason()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStatsListener.InterfaceConsts.EventPlayerError">
            <summary>
              <c>Player#getPlayerError()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStatsListener.InterfaceConsts.EventPlayerReleased">
            <summary>The player was released.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStatsListener.InterfaceConsts.EventPlaylistMetadataChanged">
            <summary>
              <c>Player#getPlaylistMetadata()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStatsListener.InterfaceConsts.EventPlayWhenReadyChanged">
            <summary>
              <c>Player#getPlayWhenReady()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStatsListener.InterfaceConsts.EventPositionDiscontinuity">
            <summary>A position discontinuity occurred.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStatsListener.InterfaceConsts.EventRenderedFirstFrame">
            <summary>The first frame has been rendered since setting the surface, since the renderer was reset or
            since the stream changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStatsListener.InterfaceConsts.EventRepeatModeChanged">
            <summary>
              <c>Player#getRepeatMode()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStatsListener.InterfaceConsts.EventSeekBackIncrementChanged">
            <summary>
              <c>Player#getSeekBackIncrement()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStatsListener.InterfaceConsts.EventSeekForwardIncrementChanged">
            <summary>
              <c>Player#getSeekForwardIncrement()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStatsListener.InterfaceConsts.EventShuffleModeEnabledChanged">
            <summary>
              <c>Player#getShuffleModeEnabled()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStatsListener.InterfaceConsts.EventSkipSilenceEnabledChanged">
            <summary>Skipping silences was enabled or disabled in the audio stream.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStatsListener.InterfaceConsts.EventSurfaceSizeChanged">
            <summary>The surface size changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStatsListener.InterfaceConsts.EventTimelineChanged">
            <summary>
              <c>Player#getCurrentTimeline()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStatsListener.InterfaceConsts.EventTracksChanged">
            <summary>
              <c>Player#getCurrentTracks()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStatsListener.InterfaceConsts.EventTrackSelectionParametersChanged">
            <summary>
              <c>Player#getTrackSelectionParameters()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStatsListener.InterfaceConsts.EventUpstreamDiscarded">
            <summary>Data was removed from the end of the media buffer.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStatsListener.InterfaceConsts.EventVideoCodecError">
            <summary>The video codec encountered an error.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStatsListener.InterfaceConsts.EventVideoDecoderInitialized">
            <summary>A video renderer created a decoder.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStatsListener.InterfaceConsts.EventVideoDecoderReleased">
            <summary>A video renderer released a decoder.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStatsListener.InterfaceConsts.EventVideoDisabled">
            <summary>A video renderer was disabled.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStatsListener.InterfaceConsts.EventVideoEnabled">
            <summary>A video renderer was enabled.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStatsListener.InterfaceConsts.EventVideoFrameProcessingOffset">
            <summary>Video frame processing offset data has been reported.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStatsListener.InterfaceConsts.EventVideoInputFormatChanged">
            <summary>The format consumed by a video renderer changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStatsListener.InterfaceConsts.EventVideoSizeChanged">
            <summary>The video size changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Analytics.PlaybackStatsListener.InterfaceConsts.EventVolumeChanged">
            <summary>The volume changed.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStatsListener.CombinedPlaybackStats">
            <summary>Returns the combined <c>PlaybackStats</c> for all playback sessions this listener was and is
            listening to.</summary>
            <returns>The combined <c>PlaybackStats</c> for all playback sessions.</returns>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlaybackStatsListener.PlaybackStats">
            <summary>Returns the <c>PlaybackStats</c> for the currently playback session, or null if no session is
            active.</summary>
            <returns>
              <c>PlaybackStats</c> for the current playback session.</returns>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Analytics.PlayerId">
            <summary>Identifier for a player instance.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Analytics.PlayerId.Unset">
            <summary>A player identifier with unset default values that can be used as a placeholder or for testing.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Analytics.PlayerId.#ctor">
            <summary>Creates an instance for API &amp;lt; 31.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Audio.AudioCapabilities">
            <summary>Represents the set of audio formats that a device is capable of playing.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Audio.AudioCapabilities.DefaultAudioCapabilities">
            <summary>The minimum audio capabilities supported by all devices.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Audio.AudioCapabilities.#ctor(System.Int32[],System.Int32)">
            <param name="supportedEncodings">Supported audio encodings from <c>android.media.AudioFormat</c>'s
                <c>ENCODING_*</c> constants. Passing <c>null</c> indicates that no encodings are
                supported.</param>
            <param name="maxChannelCount">The maximum number of audio channels that can be played simultaneously.</param>
            <summary>Constructs new audio capabilities based on a set of supported encodings and a maximum channel
            count.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Audio.AudioCapabilities.MaxChannelCount">
            <summary>Returns the maximum number of channels the device can play at the same time.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Audio.AudioCapabilities.SupportsEncoding(System.Int32)">
            <param name="encoding">One of <c>C.Encoding</c>'s <c>ENCODING_*</c> constants.</param>
            <summary>Returns whether this device supports playback of the specified audio <c>encoding</c>.</summary>
            <returns>Whether this device supports playback the specified audio <c>encoding</c>.</returns>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Audio.AudioCapabilitiesReceiver">
            <summary>Receives broadcast events indicating changes to the device's audio capabilities, notifying a
            <c>Listener</c> when audio capability changes occur.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Audio.AudioCapabilitiesReceiver.Register">
            <summary>Registers the receiver, meaning it will notify the listener when audio capability changes
            occur.</summary>
            <returns>The current audio capabilities for the device.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Audio.AudioCapabilitiesReceiver.Unregister">
            <summary>Unregisters the receiver, meaning it will no longer notify the listener when audio capability
            changes occur.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Audio.BaseAudioProcessor">
            <summary>Base class for audio processors that keep an output buffer and an internal buffer that is reused
            whenever input is queued.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Audio.BaseAudioProcessor.InterfaceConsts.EmptyBuffer">
            <summary>An empty, direct <c>ByteBuffer</c>.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Audio.BaseAudioProcessor.HasPendingOutput">
            <summary>Returns whether the current output buffer has any data remaining.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Audio.BaseAudioProcessor.OnFlush">
            <summary>Called when the processor is flushed, directly or as part of resetting.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Audio.BaseAudioProcessor.OnQueueEndOfStream">
            <summary>Called when the end-of-stream is queued to the processor.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Audio.BaseAudioProcessor.OnReset">
            <summary>Called when the processor is reset.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Audio.BaseAudioProcessor.ReplaceOutputBuffer(System.Int32)">
            <summary>Replaces the current output buffer with a buffer of at least <c>count</c> bytes and returns
            it.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Audio.BaseAudioProcessor.QueueInput(Java.Nio.ByteBuffer)">
            <param name="inputBuffer">The input buffer to process. It must be a direct byte buffer with native
                byte order. Its contents are treated as read-only. Its position will be advanced by the
                number of bytes consumed (which may be zero). The caller retains ownership of the provided
                buffer.</param>
            <summary>Queues audio data between the position and limit of the <c>inputBuffer</c> for processing.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Audio.BaseAudioProcessorInvoker.QueueInput(Java.Nio.ByteBuffer)">
            <param name="inputBuffer">The input buffer to process. It must be a direct byte buffer with native
                byte order. Its contents are treated as read-only. Its position will be advanced by the
                number of bytes consumed (which may be zero). The caller retains ownership of the provided
                buffer.</param>
            <summary>Queues audio data between the position and limit of the <c>inputBuffer</c> for processing.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Audio.DecoderAudioRenderer">
            <summary>Decodes and renders audio using a <c>Decoder</c>.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Audio.DecoderAudioRenderer.ExperimentalSetEnableKeepAudioTrackOnSeek(System.Boolean)">
            <param name="enableKeepAudioTrackOnSeek">Whether to keep the <c>android.media.AudioTrack</c> on seek.</param>
            <summary>Sets whether to enable the experimental feature that keeps and flushes the <c>android.media.AudioTrack</c> when a seek occurs, as opposed to releasing and reinitialising.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Audio.DecoderAudioRenderer.OnPositionDiscontinuity">
            <summary>See <c>AudioSink.Listener#onPositionDiscontinuity()</c>.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Audio.DecoderAudioRendererInvoker.Name">
            <summary>Returns the name of the <c>Renderer</c>.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Audio.DefaultAudioSink">
            <summary>Plays audio data.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Audio.DefaultAudioSink.DefaultPlaybackSpeed">
            <summary>The default playback speed.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Audio.DefaultAudioSink.FailOnSpuriousAudioTimestamp">
            <summary>Whether to throw an <c>InvalidAudioTrackTimestampException</c> when a spurious timestamp is
            reported from <c>AudioTrack#getTimestamp</c>.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Audio.DefaultAudioSink.MaxPitch">
            <summary>The maximum allowed pitch factor.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Audio.DefaultAudioSink.MaxPlaybackSpeed">
            <summary>The maximum allowed playback speed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Audio.DefaultAudioSink.MinPitch">
            <summary>The minimum allowed pitch factor.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Audio.DefaultAudioSink.MinPlaybackSpeed">
            <summary>The minimum allowed playback speed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Audio.DefaultAudioSink.OffloadModeDisabled">
            <summary>The audio sink will never play in offload mode.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Audio.DefaultAudioSink.OffloadModeEnabledGaplessDisabled">
            <summary>The audio sink will prefer offload playback, disabling gapless offload support.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Audio.DefaultAudioSink.OffloadModeEnabledGaplessNotRequired">
            <summary>The audio sink will prefer offload playback even if this might result in silence gaps between
            tracks.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Audio.DefaultAudioSink.OffloadModeEnabledGaplessRequired">
            <summary>The audio sink will prefer offload playback except if the track is gapless and the device does
            not advertise support for gapless playback in offload.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Audio.DefaultAudioSink.OutputModeOffload">
            <summary>The audio sink plays encoded audio in offload.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Audio.DefaultAudioSink.OutputModePassthrough">
            <summary>The audio sink plays encoded audio in passthrough.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Audio.DefaultAudioSink.OutputModePcm">
            <summary>The audio sink plays PCM audio.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Audio.DefaultAudioSink.InterfaceConsts.CurrentPositionNotSet">
            <summary>Returned by <c>#getCurrentPositionUs(boolean)</c> when the position is not set.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Audio.DefaultAudioSink.InterfaceConsts.SinkFormatSupportedDirectly">
            <summary>The sink supports the format directly, without the need for internal transcoding.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Audio.DefaultAudioSink.InterfaceConsts.SinkFormatSupportedWithTranscoding">
            <summary>The sink supports the format, but needs to transcode it internally to do so.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Audio.DefaultAudioSink.InterfaceConsts.SinkFormatUnsupported">
            <summary>The sink does not support the format.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Audio.DefaultAudioTrackBufferSizeProvider">
            <summary>Provide the buffer size to use when creating an <c>AudioTrack</c>.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Audio.DefaultAudioTrackBufferSizeProvider.Ac3BufferMultiplicationFactor">
            <summary>The multiplication factor to apply to AC3 passthrough buffer to avoid underruns on some devices
            (e.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Audio.DefaultAudioTrackBufferSizeProvider.MaxPcmBufferDurationUs">
            <summary>The maximum length for PCM <c>AudioTrack</c> buffers, in microseconds.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Audio.DefaultAudioTrackBufferSizeProvider.MinPcmBufferDurationUs">
            <summary>The minimum length for PCM <c>AudioTrack</c> buffers, in microseconds.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Audio.DefaultAudioTrackBufferSizeProvider.OffloadBufferDurationUs">
            <summary>The length for offload <c>AudioTrack</c> buffers, in microseconds.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Audio.DefaultAudioTrackBufferSizeProvider.PassthroughBufferDurationUs">
            <summary>The length for passthrough <c>AudioTrack</c> buffers, in microseconds.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Audio.DefaultAudioTrackBufferSizeProvider.PcmBufferMultiplicationFactor">
            <summary>The multiplication factor to apply to the minimum buffer size requested.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Audio.DefaultAudioTrackBufferSizeProvider.Get1xBufferSizeInBytes(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Returns the buffer size for playback at 1x speed.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Audio.DefaultAudioTrackBufferSizeProvider.GetOffloadBufferSizeInBytes(System.Int32)">
            <summary>Returns the buffer size for offload playback.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Audio.DefaultAudioTrackBufferSizeProvider.GetPassthroughBufferSizeInBytes(System.Int32)">
            <summary>Returns the buffer size for passthrough playback.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Audio.DefaultAudioTrackBufferSizeProvider.GetPcmBufferSizeInBytes(System.Int32,System.Int32,System.Int32)">
            <summary>Returns the buffer size for PCM playback.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Audio.ForwardingAudioSink">
            <summary>An overridable <c>AudioSink</c> implementation forwarding all methods to another sink.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Audio.ForwardingAudioSink.InterfaceConsts.CurrentPositionNotSet">
            <summary>Returned by <c>#getCurrentPositionUs(boolean)</c> when the position is not set.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Audio.ForwardingAudioSink.InterfaceConsts.SinkFormatSupportedDirectly">
            <summary>The sink supports the format directly, without the need for internal transcoding.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Audio.ForwardingAudioSink.InterfaceConsts.SinkFormatSupportedWithTranscoding">
            <summary>The sink supports the format, but needs to transcode it internally to do so.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Audio.ForwardingAudioSink.InterfaceConsts.SinkFormatUnsupported">
            <summary>The sink does not support the format.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Audio.AudioProcessor.EmptyBuffer">
            <summary>An empty, direct <c>ByteBuffer</c>.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Audio.IAudioProcessor">
            <summary>Interface for audio processors, which take audio data as input and transform it, potentially
            modifying its channel count, encoding and/or sample rate.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Audio.IAudioProcessor.EmptyBuffer">
            <summary>An empty, direct <c>ByteBuffer</c>.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Audio.IAudioProcessor.Flush">
            <summary>Clears any buffered data and pending output.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Audio.IAudioProcessor.QueueEndOfStream">
            <summary>Queues an end of stream signal.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Audio.IAudioProcessor.QueueInput(Java.Nio.ByteBuffer)">
            <param name="inputBuffer">The input buffer to process. It must be a direct byte buffer with native
                byte order. Its contents are treated as read-only. Its position will be advanced by the
                number of bytes consumed (which may be zero). The caller retains ownership of the provided
                buffer.</param>
            <summary>Queues audio data between the position and limit of the <c>inputBuffer</c> for processing.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Audio.IAudioProcessor.Reset">
            <summary>Resets the processor to its unconfigured state, releasing any resources.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Audio.IAudioRendererEventListener">
            <summary>Listener of audio <c>Renderer</c> events.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Audio.IAudioRendererEventListener.OnAudioCodecError(Java.Lang.Exception)">
            <param name="audioCodecError">The error. Typically a <c>CodecException</c> if the renderer uses
                <c>MediaCodec</c>, or a <c>DecoderException</c> if the renderer uses a software decoder.</param>
            <summary>Called when an audio decoder encounters an error.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Audio.IAudioRendererEventListener.OnAudioDecoderInitialized(System.String,System.Int64,System.Int64)">
            <param name="decoderName">The decoder that was created.</param>
            <param name="initializedTimestampMs">
              <c>SystemClock#elapsedRealtime()</c> when initialization
                finished.</param>
            <param name="initializationDurationMs">The time taken to initialize the decoder in milliseconds.</param>
            <summary>Called when a decoder is created.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Audio.IAudioRendererEventListener.OnAudioDecoderReleased(System.String)">
            <param name="decoderName">The decoder that was released.</param>
            <summary>Called when a decoder is released.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Audio.IAudioRendererEventListener.OnAudioDisabled(Com.Google.Android.Exoplayer2.Decoder.DecoderCounters)">
            <param name="counters">
              <c>DecoderCounters</c> that were updated by the renderer.</param>
            <summary>Called when the renderer is disabled.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Audio.IAudioRendererEventListener.OnAudioEnabled(Com.Google.Android.Exoplayer2.Decoder.DecoderCounters)">
            <param name="counters">
              <c>DecoderCounters</c> that will be updated by the renderer for as long as it
                remains enabled.</param>
            <summary>Called when the renderer is enabled.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Audio.IAudioRendererEventListener.OnAudioPositionAdvancing(System.Int64)">
            <param name="playoutStartSystemTimeMs">The approximate derived <c>System#currentTimeMillis()</c> at
                which playout started.</param>
            <summary>Called when the audio position has increased for the first time since the last pause or
            position reset.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Audio.IAudioRendererEventListener.OnAudioSinkError(Java.Lang.Exception)">
            <param name="audioSinkError">The error that occurred. Typically an <c>AudioSink.InitializationException</c>, a <c>AudioSink.WriteException</c>, or an <c>AudioSink.UnexpectedDiscontinuityException</c>.</param>
            <summary>Called when <c>AudioSink</c> has encountered an error.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Audio.IAudioRendererEventListener.OnAudioUnderrun(System.Int32,System.Int64,System.Int64)">
            <param name="bufferSize">The size of the audio output buffer, in bytes.</param>
            <param name="bufferSizeMs">The size of the audio output buffer, in milliseconds, if it contains PCM
                encoded audio. <c>C#TIME_UNSET</c> if the output buffer contains non-PCM encoded audio.</param>
            <param name="elapsedSinceLastFeedMs">The time since audio was last written to the output buffer.</param>
            <summary>Called when an audio underrun occurs.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Audio.IAudioRendererEventListener.OnSkipSilenceEnabledChanged(System.Boolean)">
            <param name="skipSilenceEnabled">Whether skipping silences in the audio stream is enabled.</param>
            <summary>Called when skipping silences is enabled or disabled in the audio stream.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Audio.AudioSink.CurrentPositionNotSet">
            <summary>Returned by <c>#getCurrentPositionUs(boolean)</c> when the position is not set.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Audio.AudioSink.SinkFormatSupportedDirectly">
            <summary>The sink supports the format directly, without the need for internal transcoding.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Audio.AudioSink.SinkFormatSupportedWithTranscoding">
            <summary>The sink supports the format, but needs to transcode it internally to do so.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Audio.AudioSink.SinkFormatUnsupported">
            <summary>The sink does not support the format.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Audio.IAudioSink">
            <summary>A sink that consumes audio data.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Audio.IAudioSink.CurrentPositionNotSet">
            <summary>Returned by <c>#getCurrentPositionUs(boolean)</c> when the position is not set.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Audio.IAudioSink.SinkFormatSupportedDirectly">
            <summary>The sink supports the format directly, without the need for internal transcoding.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Audio.IAudioSink.SinkFormatSupportedWithTranscoding">
            <summary>The sink supports the format, but needs to transcode it internally to do so.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Audio.IAudioSink.SinkFormatUnsupported">
            <summary>The sink does not support the format.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Audio.IAudioSink.DisableTunneling">
            <summary>Disables tunneling.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Audio.IAudioSink.EnableTunnelingV21">
            <summary>Enables tunneling, if possible.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Audio.IAudioSink.ExperimentalFlushWithoutAudioTrackRelease">
            <summary>Flushes the sink, after which it is ready to receive buffers from a new playback position.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Audio.IAudioSink.Flush">
            <summary>Flushes the sink, after which it is ready to receive buffers from a new playback position.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Audio.IAudioSink.GetCurrentPositionUs(System.Boolean)">
            <param name="sourceEnded">Specify <c>true</c> if no more input buffers will be provided.</param>
            <summary>Returns the playback position in the stream starting at zero, in microseconds, or <c>#CURRENT_POSITION_NOT_SET</c> if it is not yet available.</summary>
            <returns>The playback position relative to the start of playback, in microseconds.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Audio.IAudioSink.HandleBuffer(Java.Nio.ByteBuffer,System.Int64,System.Int32)">
            <param name="buffer">The buffer containing audio data.</param>
            <param name="presentationTimeUs">The presentation timestamp of the buffer in microseconds.</param>
            <param name="encodedAccessUnitCount">The number of encoded access units in the buffer, or 1 if the
                buffer contains PCM audio. This allows batching multiple encoded access units in one
                buffer.</param>
            <summary>Attempts to process data from a <c>ByteBuffer</c>, starting from its current position and
            ending at its limit (exclusive).</summary>
            <returns>Whether the buffer was handled fully.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Audio.IAudioSink.HandleDiscontinuity">
            <summary>Signals to the sink that the next buffer may be discontinuous with the previous buffer.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Audio.IAudioSink.Pause">
            <summary>Pauses playback.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Audio.IAudioSink.Play">
            <summary>Starts or resumes consuming audio if initialized.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Audio.IAudioSink.PlayToEndOfStream">
            <summary>Processes any remaining data.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Audio.IAudioSink.Reset">
            <summary>Resets the sink, releasing any resources that it currently holds.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Audio.IAudioSink.SetAudioSessionId(System.Int32)">
            <summary>Sets the audio session id.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Audio.IAudioSink.SetVolume(System.Single)">
            <param name="volume">Linear output gain to apply to all channels. Should be in the range [0.0, 1.0].</param>
            <summary>Sets the playback volume.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Audio.IAudioSink.SetPlayerId(Com.Google.Android.Exoplayer2.Analytics.PlayerId)">
            <param name="playerId">The <c>PlayerId</c>, or null to clear a previously set id.</param>
            <summary>Sets the <c>PlayerId</c> of the player using this audio sink.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Audio.MediaCodecAudioRenderer">
            <summary>Decodes and renders audio using <c>MediaCodec</c> and an <c>AudioSink</c>.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Audio.MediaCodecAudioRenderer.ExperimentalSetEnableKeepAudioTrackOnSeek(System.Boolean)">
            <param name="enableKeepAudioTrackOnSeek">Whether to keep the <c>android.media.AudioTrack</c> on seek.</param>
            <summary>Sets whether to enable the experimental feature that keeps and flushes the <c>android.media.AudioTrack</c> when a seek occurs, as opposed to releasing and reinitialising.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Audio.MediaCodecAudioRenderer.OnPositionDiscontinuity">
            <summary>See <c>AudioSink.Listener#onPositionDiscontinuity()</c>.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Audio.SilenceSkippingAudioProcessor">
            <summary>An <c>AudioProcessor</c> that skips silence in the input stream.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Audio.SilenceSkippingAudioProcessor.DefaultMinimumSilenceDurationUs">
            <summary>The default value for <c>#SilenceSkippingAudioProcessor(long, long, short)
            minimumSilenceDurationUs</c>.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Audio.SilenceSkippingAudioProcessor.DefaultPaddingSilenceUs">
            <summary>The default value for <c>#SilenceSkippingAudioProcessor(long, long, short)
            paddingSilenceUs</c>.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Audio.SilenceSkippingAudioProcessor.DefaultSilenceThresholdLevel">
            <summary>The default value for <c>#SilenceSkippingAudioProcessor(long, long, short)
            silenceThresholdLevel</c>.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Audio.SilenceSkippingAudioProcessor.#ctor">
            <summary>Creates a new silence skipping audio processor.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Audio.SilenceSkippingAudioProcessor.#ctor(System.Int64,System.Int64,System.Int16)">
            <param name="minimumSilenceDurationUs">The minimum duration of audio that must be below <c>silenceThresholdLevel</c> to classify that part of audio as silent, in microseconds.</param>
            <param name="paddingSilenceUs">The duration of silence by which to extend non-silent sections, in
                microseconds. The value must not exceed <c>minimumSilenceDurationUs</c>.</param>
            <param name="silenceThresholdLevel">The absolute level below which an individual PCM sample is
                classified as silent.</param>
            <summary>Creates a new silence skipping audio processor.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Audio.SilenceSkippingAudioProcessor.SkippedFrames">
            <summary>Returns the total number of frames of input audio that were skipped due to being classified as
            silence since the last call to <c>#flush()</c>.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Audio.SilenceSkippingAudioProcessor.SetEnabled(System.Boolean)">
            <param name="enabled">Whether to skip silence in the input.</param>
            <summary>Sets whether to skip silence in the input.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Audio.SonicAudioProcessor">
            <summary>An <c>AudioProcessor</c> that uses the Sonic library to modify audio speed/pitch/sample rate.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Audio.SonicAudioProcessor.SampleRateNoChange">
            <summary>Indicates that the output sample rate should be the same as the input.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Audio.SonicAudioProcessor.InterfaceConsts.EmptyBuffer">
            <summary>An empty, direct <c>ByteBuffer</c>.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Audio.SonicAudioProcessor.#ctor">
            <summary>Creates a new Sonic audio processor.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Audio.SonicAudioProcessor.GetMediaDuration(System.Int64)">
            <param name="playoutDuration">The playout duration to scale.</param>
            <summary>Returns the media duration corresponding to the specified playout duration, taking speed
            adjustment into account.</summary>
            <returns>The corresponding media duration, in the same units as <c>duration</c>.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Audio.SonicAudioProcessor.SetOutputSampleRateHz(System.Int32)">
            <param name="sampleRateHz">The sample rate for output audio, in Hertz.</param>
            <summary>Sets the sample rate for output audio, in Hertz.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Audio.SonicAudioProcessor.SetPitch(System.Single)">
            <param name="pitch">The target pitch.</param>
            <summary>Sets the target playback pitch.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Audio.SonicAudioProcessor.SetSpeed(System.Single)">
            <param name="speed">The target factor by which playback should be sped up.</param>
            <summary>Sets the target playback speed.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Audio.TeeAudioProcessor">
            <summary>Audio processor that outputs its input unmodified and also outputs its input to a given sink.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.BaseRenderer">
            <summary>An abstract base class suitable for most <c>Renderer</c> implementations.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.BaseRenderer.InterfaceConsts.MsgCustomBase">
            <summary>Applications or extensions may define custom <c>MSG_*</c> constants that can be passed to
            renderers.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.BaseRenderer.InterfaceConsts.MsgSetAudioAttributes">
            <summary>A type of a message that can be passed to an audio renderer via <c>ExoPlayer#createMessage(PlayerMessage.Target)</c>.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.BaseRenderer.InterfaceConsts.MsgSetAudioSessionId">
            <summary>The type of a message that can be passed to audio and video renderers via <c>ExoPlayer#createMessage(PlayerMessage.Target)</c>.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.BaseRenderer.InterfaceConsts.MsgSetAuxEffectInfo">
            <summary>A type of a message that can be passed to an audio renderer via <c>ExoPlayer#createMessage(PlayerMessage.Target)</c>.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.BaseRenderer.InterfaceConsts.MsgSetCameraMotionListener">
            <summary>The type of a message that can be passed to a camera motion renderer via <c>ExoPlayer#createMessage(PlayerMessage.Target)</c>.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.BaseRenderer.InterfaceConsts.MsgSetChangeFrameRateStrategy">
            <summary>The type of a message that can be passed to a video renderer via <c>ExoPlayer#createMessage(PlayerMessage.Target)</c>.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.BaseRenderer.InterfaceConsts.MsgSetScalingMode">
            <summary>The type of a message that can be passed to a <c>MediaCodec</c>-based video renderer via
            <c>ExoPlayer#createMessage(PlayerMessage.Target)</c>.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.BaseRenderer.InterfaceConsts.MsgSetSkipSilenceEnabled">
            <summary>The type of a message that can be passed to an audio renderer via <c>ExoPlayer#createMessage(PlayerMessage.Target)</c>.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.BaseRenderer.InterfaceConsts.MsgSetVideoFrameMetadataListener">
            <summary>The type of a message that can be passed to a video renderer via <c>ExoPlayer#createMessage(PlayerMessage.Target)</c>.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.BaseRenderer.InterfaceConsts.MsgSetVideoOutput">
            <summary>The type of a message that can be passed to a video renderer via <c>ExoPlayer#createMessage(PlayerMessage.Target)</c>.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.BaseRenderer.InterfaceConsts.MsgSetVolume">
            <summary>A type of a message that can be passed to an audio renderer via <c>ExoPlayer#createMessage(PlayerMessage.Target)</c>.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.BaseRenderer.InterfaceConsts.MsgSetWakeupListener">
            <summary>The type of a message that can be passed to a <c>Renderer</c> via <c>ExoPlayer#createMessage(PlayerMessage.Target)</c>, to inform the renderer that it can schedule
            waking up another component.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.BaseRenderer.InterfaceConsts.StateDisabled">
            <summary>The renderer is disabled.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.BaseRenderer.InterfaceConsts.StateEnabled">
            <summary>The renderer is enabled but not started.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.BaseRenderer.InterfaceConsts.StateStarted">
            <summary>The renderer is started.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.BaseRenderer.InterfaceConsts.AdaptiveNotSeamless">
            <summary>The <c>Renderer</c> can adapt between formats, but may suffer a brief discontinuity
            (~50-100ms) when adaptation occurs.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.BaseRenderer.InterfaceConsts.AdaptiveNotSupported">
            <summary>The <c>Renderer</c> does not support adaptation between formats.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.BaseRenderer.InterfaceConsts.AdaptiveSeamless">
            <summary>The <c>Renderer</c> can seamlessly adapt between formats.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.BaseRenderer.InterfaceConsts.AdaptiveSupportMask">
            <summary>A mask to apply to <c>Capabilities</c> to obtain the <c>AdaptiveSupport</c> only.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.BaseRenderer.InterfaceConsts.DecoderSupportFallback">
            <summary>The renderer will use a fallback decoder.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.BaseRenderer.InterfaceConsts.DecoderSupportPrimary">
            <summary>The renderer is able to use the primary decoder for the format's MIME type.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.BaseRenderer.InterfaceConsts.FormatSupportMask">
            <summary>A mask to apply to <c>Capabilities</c> to obtain the <c>C.FormatSupport</c> only.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.BaseRenderer.InterfaceConsts.HardwareAccelerationNotSupported">
            <summary>The renderer is not able to use hardware acceleration.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.BaseRenderer.InterfaceConsts.HardwareAccelerationSupported">
            <summary>The renderer is able to use hardware acceleration.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.BaseRenderer.InterfaceConsts.HardwareAccelerationSupportMask">
            <summary>A mask to apply to <c>Capabilities</c> to obtain <c>HardwareAccelerationSupport</c> only.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.BaseRenderer.InterfaceConsts.ModeSupportMask">
            <summary>A mask to apply to <c>Capabilities</c> to obtain <c>DecoderSupport</c> only.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.BaseRenderer.InterfaceConsts.TunnelingNotSupported">
            <summary>The <c>Renderer</c> does not support tunneled output.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.BaseRenderer.InterfaceConsts.TunnelingSupported">
            <summary>The <c>Renderer</c> supports tunneled output.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.BaseRenderer.InterfaceConsts.TunnelingSupportMask">
            <summary>A mask to apply to <c>Capabilities</c> to obtain <c>TunnelingSupport</c> only.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.BaseRenderer.#ctor(System.Int32)">
            <param name="trackType">The track type that the renderer handles. One of the <c>C</c><c>TRACK_TYPE_*</c> constants.</param>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.BaseRenderer.Configuration">
            <summary>Returns the configuration set when the renderer was most recently enabled.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.BaseRenderer.FormatHolder">
            <summary>Returns a clear <c>FormatHolder</c>.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.BaseRenderer.Index">
            <summary>Returns the index of the renderer within the player.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.BaseRenderer.IsSourceReady">
            <summary>Returns whether the upstream source is ready.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.BaseRenderer.LastResetPositionUs">
            <summary>Returns the position passed to the most recent call to <c>#enable</c> or <c>#resetPosition</c>.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.BaseRenderer.PlayerId">
            <summary>Returns the <c>PlayerId</c> of the player using this renderer.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.BaseRenderer.OnDisabled">
            <summary>Called when the renderer is disabled.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.BaseRenderer.OnEnabled(System.Boolean,System.Boolean)">
            <param name="joining">Whether this renderer is being enabled to join an ongoing playback.</param>
            <param name="mayRenderStartOfStream">Whether this renderer is allowed to render the start of the
                stream even if the state is not <c>#STATE_STARTED</c> yet.</param>
            <summary>Called when the renderer is enabled.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.BaseRenderer.OnPositionReset(System.Int64,System.Boolean)">
            <param name="positionUs">The new playback position in microseconds.</param>
            <param name="joining">Whether this renderer is being enabled to join an ongoing playback.</param>
            <summary>Called when the position is reset.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.BaseRenderer.OnReset">
            <summary>Called when the renderer is reset.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.BaseRenderer.OnStarted">
            <summary>Called when the renderer is started.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.BaseRenderer.OnStopped">
            <summary>Called when the renderer is stopped.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.BaseRenderer.SkipSource(System.Int64)">
            <param name="positionUs">The position in microseconds.</param>
            <summary>Attempts to skip to the keyframe before the specified position, or to the end of the stream if
            <c>positionUs</c> is beyond it.</summary>
            <returns>The number of samples that were skipped.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.BaseRenderer.Render(System.Int64,System.Int64)">
            <param name="positionUs">The current media time in microseconds, measured at the start of the current
                iteration of the rendering loop.</param>
            <param name="elapsedRealtimeUs">
              <c>android.os.SystemClock#elapsedRealtime()</c> in microseconds,
                measured at the start of the current iteration of the rendering loop.</param>
            <summary>Incrementally renders the <c>SampleStream</c>.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.BaseRendererInvoker.IsEnded">
            <summary>Whether the renderer is ready for the <c>ExoPlayer</c> instance to transition to <c>Player#STATE_ENDED</c>.</summary>
            <returns>Whether the renderer is ready for the player to transition to the ended state.</returns>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.BaseRendererInvoker.IsReady">
            <summary>Whether the renderer is able to immediately render media from the current position.</summary>
            <returns>Whether the renderer is ready to render media.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.BaseRendererInvoker.Render(System.Int64,System.Int64)">
            <param name="positionUs">The current media time in microseconds, measured at the start of the current
                iteration of the rendering loop.</param>
            <param name="elapsedRealtimeUs">
              <c>android.os.SystemClock#elapsedRealtime()</c> in microseconds,
                measured at the start of the current iteration of the rendering loop.</param>
            <summary>Incrementally renders the <c>SampleStream</c>.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.BaseRendererInvoker.Name">
            <summary>Returns the name of the <c>Renderer</c>.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Decoder.DecoderCounters">
            <summary>Maintains decoder event counts, for debugging purposes only.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Decoder.DecoderCounters.DecoderInitCount">
            <summary>The number of times a decoder has been initialized.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Decoder.DecoderCounters.DecoderReleaseCount">
            <summary>The number of times a decoder has been released.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Decoder.DecoderCounters.DroppedBufferCount">
            <summary>The number of dropped buffers.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Decoder.DecoderCounters.DroppedInputBufferCount">
            <summary>The number of input buffers dropped.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Decoder.DecoderCounters.DroppedToKeyframeCount">
            <summary>The number of times all buffers to a keyframe were dropped.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Decoder.DecoderCounters.MaxConsecutiveDroppedBufferCount">
            <summary>The maximum number of dropped buffers without an interleaving rendered output buffer.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Decoder.DecoderCounters.QueuedInputBufferCount">
            <summary>The number of input buffers queued to the decoder.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Decoder.DecoderCounters.RenderedOutputBufferCount">
            <summary>The number of rendered output buffers.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Decoder.DecoderCounters.SkippedInputBufferCount">
            <summary>The number of skipped input buffers.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Decoder.DecoderCounters.SkippedOutputBufferCount">
            <summary>The number of skipped output buffers.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Decoder.DecoderCounters.TotalVideoFrameProcessingOffsetUs">
            <summary>The sum of the video frame processing offsets in microseconds.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Decoder.DecoderCounters.VideoFrameProcessingOffsetCount">
            <summary>The number of video frame processing offsets added.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Decoder.DecoderCounters.AddVideoFrameProcessingOffset(System.Int64)">
            <param name="processingOffsetUs">The video frame processing offset in microseconds.</param>
            <summary>Adds a video frame processing offset to <c>#totalVideoFrameProcessingOffsetUs</c> and
            increases <c>#videoFrameProcessingOffsetCount</c> by one.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Decoder.DecoderCounters.EnsureUpdated">
            <summary>Should be called to ensure counter values are made visible across threads.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Decoder.DecoderCounters.Merge(Com.Google.Android.Exoplayer2.Decoder.DecoderCounters)">
            <param name="other">The <c>DecoderCounters</c> to merge into this instance.</param>
            <summary>Merges the counts from <c>other</c> into this instance.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Decoder.DecoderReuseEvaluation">
            <summary>The result of an evaluation to determine whether a decoder can be reused for a new input format.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Decoder.DecoderReuseEvaluation.DecoderName">
            <summary>The name of the decoder.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Decoder.DecoderReuseEvaluation.DiscardReasonAppOverride">
            <summary>Decoder reuse is disabled by overriding behavior in application code.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Decoder.DecoderReuseEvaluation.DiscardReasonAudioChannelCountChanged">
            <summary>The audio channel count is changing.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Decoder.DecoderReuseEvaluation.DiscardReasonAudioEncodingChanged">
            <summary>The audio encoding is changing.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Decoder.DecoderReuseEvaluation.DiscardReasonAudioSampleRateChanged">
            <summary>The audio sample rate is changing.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Decoder.DecoderReuseEvaluation.DiscardReasonDrmSessionChanged">
            <summary>The DRM session is changing.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Decoder.DecoderReuseEvaluation.DiscardReasonInitializationDataChanged">
            <summary>The format initialization data is changing.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Decoder.DecoderReuseEvaluation.DiscardReasonMaxInputSizeExceeded">
            <summary>The new format may exceed the decoder's configured maximum sample size, in bytes.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Decoder.DecoderReuseEvaluation.DiscardReasonMimeTypeChanged">
            <summary>The sample MIME type is changing.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Decoder.DecoderReuseEvaluation.DiscardReasonOperatingRateChanged">
            <summary>The codec's operating rate is changing.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Decoder.DecoderReuseEvaluation.DiscardReasonReuseNotImplemented">
            <summary>Decoder reuse is not implemented.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Decoder.DecoderReuseEvaluation.DiscardReasonVideoColorInfoChanged">
            <summary>The video <c>ColorInfo</c> is changing.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Decoder.DecoderReuseEvaluation.DiscardReasonVideoMaxResolutionExceeded">
            <summary>The new format may exceed the decoder's configured maximum resolution.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Decoder.DecoderReuseEvaluation.DiscardReasonVideoResolutionChanged">
            <summary>The video resolution is changing.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Decoder.DecoderReuseEvaluation.DiscardReasonVideoRotationChanged">
            <summary>The video rotation is changing.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Decoder.DecoderReuseEvaluation.DiscardReasonWorkaround">
            <summary>Decoder reuse is disabled by a workaround.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Decoder.DecoderReuseEvaluation.Result">
            <summary>The <c>DecoderReuseResult result</c> of the evaluation.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Decoder.DecoderReuseEvaluation.ReuseResultNo">
            <summary>The decoder cannot be reused.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Decoder.DecoderReuseEvaluation.ReuseResultYesWithoutReconfiguration">
            <summary>The decoder can be kept.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Decoder.DecoderReuseEvaluation.ReuseResultYesWithFlush">
            <summary>The decoder can be reused, but must be flushed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Decoder.DecoderReuseEvaluation.ReuseResultYesWithReconfiguration">
            <summary>The decoder can be reused.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.DefaultLivePlaybackSpeedControl">
            <summary>A <c>LivePlaybackSpeedControl</c> that adjusts the playback speed using a proportional
            controller.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.DefaultLivePlaybackSpeedControl.DefaultFallbackMaxPlaybackSpeed">
            <summary>The default maximum factor by which playback can be sped up that should be used if no maximum
            playback speed is defined by the media.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.DefaultLivePlaybackSpeedControl.DefaultFallbackMinPlaybackSpeed">
            <summary>The default minimum factor by which playback can be sped up that should be used if no minimum
            playback speed is defined by the media.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.DefaultLivePlaybackSpeedControl.DefaultMaxLiveOffsetErrorMsForUnitSpeed">
            <summary>The default maximum difference between the current live offset and the target live offset, in
            milliseconds, for which unit speed (1.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.DefaultLivePlaybackSpeedControl.DefaultMinPossibleLiveOffsetSmoothingFactor">
            <summary>The default smoothing factor when smoothing the minimum possible live offset that can be
            achieved during playback.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.DefaultLivePlaybackSpeedControl.DefaultMinUpdateIntervalMs">
            <summary>The default <c>Builder#setMinUpdateIntervalMs(long) minimum interval</c> between playback
            speed changes, in milliseconds.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.DefaultLivePlaybackSpeedControl.DefaultProportionalControlFactor">
            <summary>The default <c>Builder#setProportionalControlFactor(float) proportional control factor</c>
            used to adjust the playback speed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.DefaultLivePlaybackSpeedControl.DefaultTargetLiveOffsetIncrementOnRebufferMs">
            <summary>The default increment applied to the target live offset each time the player is rebuffering, in
            milliseconds</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.DefaultLoadControl">
            <summary>The default <c>LoadControl</c> implementation.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.DefaultLoadControl.DefaultAudioBufferSize">
            <summary>A default size in bytes for an audio buffer.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.DefaultLoadControl.DefaultBackBufferDurationMs">
            <summary>The default back buffer duration in milliseconds.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.DefaultLoadControl.DefaultBufferForPlaybackAfterRebufferMs">
            <summary>The default duration of media that must be buffered for playback to resume after a rebuffer, in
            milliseconds.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.DefaultLoadControl.DefaultBufferForPlaybackMs">
            <summary>The default duration of media that must be buffered for playback to start or resume following a
            user action such as a seek, in milliseconds.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.DefaultLoadControl.DefaultCameraMotionBufferSize">
            <summary>A default size in bytes for a camera motion buffer.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.DefaultLoadControl.DefaultImageBufferSize">
            <summary>A default size in bytes for an image buffer.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.DefaultLoadControl.DefaultMaxBufferMs">
            <summary>The default maximum duration of media that the player will attempt to buffer, in milliseconds.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.DefaultLoadControl.DefaultMetadataBufferSize">
            <summary>A default size in bytes for a metadata buffer.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.DefaultLoadControl.DefaultMinBufferMs">
            <summary>The default minimum duration of media that the player will attempt to ensure is buffered at all
            times, in milliseconds.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.DefaultLoadControl.DefaultMinBufferSize">
            <summary>The buffer size in bytes that will be used as a minimum target buffer in all cases.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.DefaultLoadControl.DefaultMuxedBufferSize">
            <summary>A default size in bytes for a muxed buffer (e.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.DefaultLoadControl.DefaultPrioritizeTimeOverSizeThresholds">
            <summary>The default prioritization of buffer time constraints over size constraints.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.DefaultLoadControl.DefaultRetainBackBufferFromKeyframe">
            <summary>The default for whether the back buffer is retained from the previous keyframe.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.DefaultLoadControl.DefaultTargetBufferBytes">
            <summary>The default target buffer size in bytes.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.DefaultLoadControl.DefaultTextBufferSize">
            <summary>A default size in bytes for a text buffer.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.DefaultLoadControl.DefaultVideoBufferSize">
            <summary>A default size in bytes for a video buffer.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.DefaultLoadControl.#ctor">
            <summary>Constructs a new instance, using the <c>DEFAULT_*</c> constants defined in this class.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.DefaultLoadControl.CalculateTargetBufferBytes(Com.Google.Android.Exoplayer2.IRenderer[],Com.Google.Android.Exoplayer2.Trackselection.IExoTrackSelection[])">
            <param name="renderers">The renderers for which the track were selected.</param>
            <param name="trackSelectionArray">The selected tracks.</param>
            <summary>Calculate target buffer size in bytes based on the selected tracks.</summary>
            <returns>The target buffer size in bytes.</returns>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.DefaultRenderersFactory">
            <summary>Default <c>RenderersFactory</c> implementation.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.DefaultRenderersFactory.DefaultAllowedVideoJoiningTimeMs">
            <summary>The default maximum duration for which a video renderer can attempt to seamlessly join an
            ongoing playback.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.DefaultRenderersFactory.ExtensionRendererModeOff">
            <summary>Do not allow use of extension renderers.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.DefaultRenderersFactory.ExtensionRendererModeOn">
            <summary>Allow use of extension renderers.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.DefaultRenderersFactory.ExtensionRendererModePrefer">
            <summary>Allow use of extension renderers.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.DefaultRenderersFactory.MaxDroppedVideoFrameCountToNotify">
            <summary>The maximum number of frames that can be dropped between invocations of <c>VideoRendererEventListener#onDroppedFrames(int, long)</c>.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.DefaultRenderersFactory.ExperimentalSetSynchronizeCodecInteractionsWithQueueingEnabled(System.Boolean)">
            <param name="enabled">Whether codec interactions will be synchronized with asynchronous buffer
                queueing.</param>
            <summary>Enable synchronizing codec interactions with asynchronous buffer queueing.</summary>
            <returns>This factory, for convenience.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.DefaultRenderersFactory.ForceDisableMediaCodecAsynchronousQueueing">
            <summary>Disables <c>com.google.android.exoplayer2.mediacodec.MediaCodecRenderer</c> instances from
            operating their <c>MediaCodec</c> in asynchronous mode and perform asynchronous queueing.</summary>
            <returns>This factory, for convenience.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.DefaultRenderersFactory.ForceEnableMediaCodecAsynchronousQueueing">
            <summary>Enables <c>com.google.android.exoplayer2.mediacodec.MediaCodecRenderer</c> instances to
            operate their <c>MediaCodec</c> in asynchronous mode and perform asynchronous queueing.</summary>
            <returns>This factory, for convenience.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.DefaultRenderersFactory.SetAllowedVideoJoiningTimeMs(System.Int64)">
            <param name="allowedVideoJoiningTimeMs">The maximum duration for which video renderers can attempt to
                seamlessly join an ongoing playback, in milliseconds.</param>
            <summary>Sets the maximum duration for which video renderers can attempt to seamlessly join an ongoing
            playback.</summary>
            <returns>This factory, for convenience.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.DefaultRenderersFactory.SetEnableAudioFloatOutput(System.Boolean)">
            <param name="enableFloatOutput">Whether to enable use of floating point audio output, if available.</param>
            <summary>Sets whether floating point audio should be output when possible.</summary>
            <returns>This factory, for convenience.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.DefaultRenderersFactory.SetEnableAudioOffload(System.Boolean)">
            <param name="enableOffload">Whether to enable use of audio offload for supported formats, if
                available.</param>
            <summary>Sets whether audio should be played using the offload path.</summary>
            <returns>This factory, for convenience.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.DefaultRenderersFactory.SetEnableAudioTrackPlaybackParams(System.Boolean)">
            <param name="enableAudioTrackPlaybackParams">Whether to enable setting playback speed using <c>android.media.AudioTrack#setPlaybackParams(PlaybackParams)</c>.</param>
            <summary>Sets whether to enable setting playback speed using <c>android.media.AudioTrack#setPlaybackParams(PlaybackParams)</c>, which is supported from API level
            23, rather than using application-level audio speed adjustment.</summary>
            <returns>This factory, for convenience.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.DefaultRenderersFactory.SetEnableDecoderFallback(System.Boolean)">
            <param name="enableDecoderFallback">Whether to enable fallback to lower-priority decoders if decoder
                initialization fails.</param>
            <summary>Sets whether to enable fallback to lower-priority decoders if decoder initialization fails.</summary>
            <returns>This factory, for convenience.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.DefaultRenderersFactory.SetExtensionRendererMode(System.Int32)">
            <param name="extensionRendererMode">The extension renderer mode.</param>
            <summary>Sets the extension renderer mode, which determines if and how available extension renderers are
            used.</summary>
            <returns>This factory, for convenience.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.DefaultRenderersFactory.SetMediaCodecSelector(Com.Google.Android.Exoplayer2.Mediacodec.IMediaCodecSelector)">
            <param name="mediaCodecSelector">The <c>MediaCodecSelector</c>.</param>
            <summary>Sets a <c>MediaCodecSelector</c> for use by <c>MediaCodec</c> based renderers.</summary>
            <returns>This factory, for convenience.</returns>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Drm.DefaultDrmSessionManager">
            <summary>A <c>DrmSessionManager</c> that supports playbacks using <c>ExoMediaDrm</c>.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Drm.DefaultDrmSessionManager.DefaultSessionKeepaliveMs">
            <summary>Default value for <c>Builder#setSessionKeepaliveMs(long)</c>.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Drm.DefaultDrmSessionManager.InitialDrmRequestRetryCount">
            <summary>Number of times to retry for initial provisioning and key request for reporting error.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Drm.DefaultDrmSessionManager.ModeDownload">
            <summary>Downloads an offline license or renews an existing one.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Drm.DefaultDrmSessionManager.ModePlayback">
            <summary>Loads and refreshes (if necessary) a license for playback.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Drm.DefaultDrmSessionManager.ModeQuery">
            <summary>Restores an offline license to allow its status to be queried.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Drm.DefaultDrmSessionManager.ModeRelease">
            <summary>Releases an existing offline license.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Drm.DefaultDrmSessionManager.PlayreadyCustomDataKey">
            <summary>A key for specifying PlayReady custom data in the key request parameters passed to <c>Builder#setKeyRequestParameters(Map)</c>.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Drm.DefaultDrmSessionManager.InterfaceConsts.DrmUnsupported">
            <summary>An instance that supports no DRM schemes.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Drm.DefaultDrmSessionManager.InterfaceConsts.Dummy">
            <summary>An instance that supports no DRM schemes.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Drm.DefaultDrmSessionManager.#ctor(Java.Util.UUID,Com.Google.Android.Exoplayer2.Drm.IExoMediaDrm,Com.Google.Android.Exoplayer2.Drm.IMediaDrmCallback,System.Collections.Generic.IDictionary{System.String,System.String})">
            <param name="uuid">The UUID of the drm scheme.</param>
            <param name="exoMediaDrm">An underlying <c>ExoMediaDrm</c> for use by the manager.</param>
            <param name="callback">Performs key and provisioning requests.</param>
            <param name="keyRequestParameters">An optional map of parameters to pass as the last argument to
                <c>ExoMediaDrm#getKeyRequest(byte[], List, int, HashMap)</c>. May be null.</param>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Drm.DefaultDrmSessionManager.#ctor(Java.Util.UUID,Com.Google.Android.Exoplayer2.Drm.IExoMediaDrm,Com.Google.Android.Exoplayer2.Drm.IMediaDrmCallback,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)">
            <param name="uuid">The UUID of the drm scheme.</param>
            <param name="exoMediaDrm">An underlying <c>ExoMediaDrm</c> for use by the manager.</param>
            <param name="callback">Performs key and provisioning requests.</param>
            <param name="keyRequestParameters">An optional map of parameters to pass as the last argument to
                <c>ExoMediaDrm#getKeyRequest(byte[], List, int, HashMap)</c>. May be null.</param>
            <param name="multiSession">A boolean that specify whether multiple key session support is enabled.
                Default is false.</param>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Drm.DefaultDrmSessionManager.#ctor(Java.Util.UUID,Com.Google.Android.Exoplayer2.Drm.IExoMediaDrm,Com.Google.Android.Exoplayer2.Drm.IMediaDrmCallback,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean,System.Int32)">
            <param name="uuid">The UUID of the drm scheme.</param>
            <param name="exoMediaDrm">An underlying <c>ExoMediaDrm</c> for use by the manager.</param>
            <param name="callback">Performs key and provisioning requests.</param>
            <param name="keyRequestParameters">An optional map of parameters to pass as the last argument to
                <c>ExoMediaDrm#getKeyRequest(byte[], List, int, HashMap)</c>. May be null.</param>
            <param name="multiSession">A boolean that specify whether multiple key session support is enabled.
                Default is false.</param>
            <param name="initialDrmRequestRetryCount">The number of times to retry for initial provisioning and
                key request before reporting error.</param>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Drm.DefaultDrmSessionManager.SetMode(System.Int32,System.Byte[])">
            <param name="mode">The mode to be set.</param>
            <param name="offlineLicenseKeySetId">The key set id of the license to be used with the given mode.</param>
            <summary>Sets the mode, which determines the role of sessions acquired from the instance.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Drm.DefaultDrmSessionManagerProvider">
            <summary>Default implementation of <c>DrmSessionManagerProvider</c>.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Drm.DrmUtil">
            <summary>DRM-related utility methods.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Drm.DrmUtil.ErrorSourceExoMediaDrm">
            <summary>Corresponds to failures caused by an <c>ExoMediaDrm</c> method call.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Drm.DrmUtil.ErrorSourceLicenseAcquisition">
            <summary>Corresponds to failures caused by an operation related to obtaining DRM licenses.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Drm.DrmUtil.ErrorSourceProvisioning">
            <summary>Corresponds to failures caused by an operation related to provisioning the device.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Drm.DrmUtil.GetErrorCodeForMediaDrmException(Java.Lang.Exception,System.Int32)">
            <param name="exception">The DRM-related exception for which to obtain a corresponding <c>PlaybackException.ErrorCode</c>.</param>
            <param name="errorSource">The <c>ErrorSource</c> for the given <c>exception</c>.</param>
            <summary>Returns the <c>PlaybackException.ErrorCode</c> that corresponds to the given DRM-related
            exception.</summary>
            <returns>The <c>PlaybackException.ErrorCode</c> that corresponds to the given DRM-related
                exception.</returns>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Drm.DummyExoMediaDrm">
            <summary>An <c>ExoMediaDrm</c> that does not support any protection schemes.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Drm.DummyExoMediaDrm.InterfaceConsts.EventKeyExpired">
            <summary>Event indicating that keys have expired, and are no longer usable.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Drm.DummyExoMediaDrm.InterfaceConsts.EventKeyRequired">
            <summary>Event indicating that keys need to be requested from the license server.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Drm.DummyExoMediaDrm.InterfaceConsts.EventProvisionRequired">
            <summary>Event indicating that a certificate needs to be requested from the provisioning server.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Drm.DummyExoMediaDrm.InterfaceConsts.KeyTypeOffline">
            <summary>Key request type for keys that will be used for offline use.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Drm.DummyExoMediaDrm.InterfaceConsts.KeyTypeRelease">
            <summary>Key request type indicating that saved offline keys should be released.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Drm.DummyExoMediaDrm.InterfaceConsts.KeyTypeStreaming">
            <summary>Key request type for keys that will be used for online use.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Drm.DummyExoMediaDrm.Instance">
            <summary>Returns a new instance.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Drm.ErrorStateDrmSession">
            <summary>A <c>DrmSession</c> that's in a terminal error state.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Drm.ErrorStateDrmSession.InterfaceConsts.StateError">
            <summary>The session has encountered an error.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Drm.ErrorStateDrmSession.InterfaceConsts.StateOpened">
            <summary>The session is open, but does not have keys required for decryption.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Drm.ErrorStateDrmSession.InterfaceConsts.StateOpenedWithKeys">
            <summary>The session is open and has keys required for decryption.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Drm.ErrorStateDrmSession.InterfaceConsts.StateOpening">
            <summary>The session is being opened.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Drm.ErrorStateDrmSession.InterfaceConsts.StateReleased">
            <summary>The session has been released.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Drm.FrameworkCryptoConfig">
            <summary>A <c>CryptoConfig</c> for <c>C#CRYPTO_TYPE_FRAMEWORK</c>.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Drm.FrameworkCryptoConfig.ForceAllowInsecureDecoderComponents">
            <summary>Whether to allow use of insecure decoder components even if the underlying platform says
            otherwise.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Drm.FrameworkCryptoConfig.SessionId">
            <summary>The DRM session id.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Drm.FrameworkCryptoConfig.Uuid">
            <summary>The DRM scheme UUID.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Drm.FrameworkCryptoConfig.WorkaroundDeviceNeedsKeysToConfigureCodec">
            <summary>Whether the device needs keys to have been loaded into the <c>DrmSession</c> before codec
            configuration.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Drm.FrameworkCryptoConfig.#ctor(Java.Util.UUID,System.Byte[],System.Boolean)">
            <param name="uuid">The DRM scheme UUID.</param>
            <param name="sessionId">The DRM session id.</param>
            <param name="forceAllowInsecureDecoderComponents">Whether to allow use of insecure decoder components
                even if the underlying platform says otherwise.</param>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Drm.FrameworkMediaDrm">
            <summary>An <c>ExoMediaDrm</c> implementation that wraps the framework <c>MediaDrm</c>.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Drm.FrameworkMediaDrm.InterfaceConsts.EventKeyExpired">
            <summary>Event indicating that keys have expired, and are no longer usable.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Drm.FrameworkMediaDrm.InterfaceConsts.EventKeyRequired">
            <summary>Event indicating that keys need to be requested from the license server.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Drm.FrameworkMediaDrm.InterfaceConsts.EventProvisionRequired">
            <summary>Event indicating that a certificate needs to be requested from the provisioning server.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Drm.FrameworkMediaDrm.InterfaceConsts.KeyTypeOffline">
            <summary>Key request type for keys that will be used for offline use.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Drm.FrameworkMediaDrm.InterfaceConsts.KeyTypeRelease">
            <summary>Key request type indicating that saved offline keys should be released.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Drm.FrameworkMediaDrm.InterfaceConsts.KeyTypeStreaming">
            <summary>Key request type for keys that will be used for online use.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Drm.FrameworkMediaDrm.IsCryptoSchemeSupported(Java.Util.UUID)">
            <summary>Returns whether the DRM scheme with the given UUID is supported on this device.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Drm.FrameworkMediaDrm.NewInstance(Java.Util.UUID)">
            <param name="uuid">The scheme uuid.</param>
            <summary>Creates an instance with an initial reference count of 1.</summary>
            <returns>The created instance.</returns>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Drm.HttpMediaDrmCallback">
            <summary>A <c>MediaDrmCallback</c> that makes requests using <c>DataSource</c> instances.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Drm.HttpMediaDrmCallback.ClearAllKeyRequestProperties">
            <summary>Clears all headers for key requests made by the callback.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Drm.HttpMediaDrmCallback.ClearKeyRequestProperty(System.String)">
            <param name="name">The name of the header field.</param>
            <summary>Clears a header for key requests made by the callback.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Drm.HttpMediaDrmCallback.SetKeyRequestProperty(System.String,System.String)">
            <param name="name">The name of the header field.</param>
            <param name="value">The value of the field.</param>
            <summary>Sets a header for key requests made by the callback.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Drm.DrmSession.StateError">
            <summary>The session has encountered an error.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Drm.DrmSession.StateOpened">
            <summary>The session is open, but does not have keys required for decryption.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Drm.DrmSession.StateOpenedWithKeys">
            <summary>The session is open and has keys required for decryption.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Drm.DrmSession.StateOpening">
            <summary>The session is being opened.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Drm.DrmSession.StateReleased">
            <summary>The session has been released.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Drm.DrmSession.ReplaceSession(Com.Google.Android.Exoplayer2.Drm.IDrmSession,Com.Google.Android.Exoplayer2.Drm.IDrmSession)">
            <summary>Acquires <c>newSession</c> then releases <c>previousSession</c>.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Drm.IDrmSession">
            <summary>A DRM session.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Drm.IDrmSession.StateError">
            <summary>The session has encountered an error.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Drm.IDrmSession.StateOpened">
            <summary>The session is open, but does not have keys required for decryption.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Drm.IDrmSession.StateOpenedWithKeys">
            <summary>The session is open and has keys required for decryption.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Drm.IDrmSession.StateOpening">
            <summary>The session is being opened.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Drm.IDrmSession.StateReleased">
            <summary>The session has been released.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Drm.IDrmSession.GetOfflineLicenseKeySetId">
            <summary>Returns the key set id of the offline license loaded into this session, or null if there isn't
            one.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Drm.IDrmSession.QueryKeyStatus">
            <summary>Returns a map describing the key status for the session, or null if called before the session
            has been opened or after it's been released.</summary>
            <returns>A map describing the key status for the session, or null if called before the session
                has been opened or after it's been released.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Drm.IDrmSession.RequiresSecureDecoder(System.String)">
            <summary>Returns whether this session requires use of a secure decoder for the given MIME type.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Drm.IDrmSession.PlayClearSamplesWithoutKeys">
            <summary>Returns whether this session allows playback of clear samples prior to keys being loaded.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Drm.IDrmSession.ReplaceSession(Com.Google.Android.Exoplayer2.Drm.IDrmSession,Com.Google.Android.Exoplayer2.Drm.IDrmSession)">
            <summary>Acquires <c>newSession</c> then releases <c>previousSession</c>.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Drm.IDrmSessionEventListener">
            <summary>Listener of <c>DrmSessionManager</c> events.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Drm.DrmSessionManager.DrmUnsupported">
            <summary>An instance that supports no DRM schemes.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Drm.DrmSessionManager.Dummy">
            <summary>An instance that supports no DRM schemes.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Drm.IDrmSessionManager">
            <summary>Manages a DRM session.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Drm.IDrmSessionManager.DrmUnsupported">
            <summary>An instance that supports no DRM schemes.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Drm.IDrmSessionManager.Dummy">
            <summary>An instance that supports no DRM schemes.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Drm.IDrmSessionManager.DummyDrmSessionManager">
            <summary>Returns <c>#DRM_UNSUPPORTED</c>.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Drm.IDrmSessionManager.Prepare">
            <summary>Acquires any required resources.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Drm.IDrmSessionManager.Release">
            <summary>Releases any acquired resources.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Drm.IDrmSessionManagerProvider">
            <summary>A provider to obtain a <c>DrmSessionManager</c> suitable for playing the content described by a
            <c>MediaItem</c>.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Drm.ExoMediaDrm.EventKeyExpired">
            <summary>Event indicating that keys have expired, and are no longer usable.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Drm.ExoMediaDrm.EventKeyRequired">
            <summary>Event indicating that keys need to be requested from the license server.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Drm.ExoMediaDrm.EventProvisionRequired">
            <summary>Event indicating that a certificate needs to be requested from the provisioning server.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Drm.ExoMediaDrm.KeyTypeOffline">
            <summary>Key request type for keys that will be used for offline use.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Drm.ExoMediaDrm.KeyTypeRelease">
            <summary>Key request type indicating that saved offline keys should be released.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Drm.ExoMediaDrm.KeyTypeStreaming">
            <summary>Key request type for keys that will be used for online use.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Drm.IExoMediaDrm">
            <summary>Used to obtain keys for decrypting protected media streams.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Drm.IExoMediaDrm.EventKeyExpired">
            <summary>Event indicating that keys have expired, and are no longer usable.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Drm.IExoMediaDrm.EventKeyRequired">
            <summary>Event indicating that keys need to be requested from the license server.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Drm.IExoMediaDrm.EventProvisionRequired">
            <summary>Event indicating that a certificate needs to be requested from the provisioning server.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Drm.IExoMediaDrm.KeyTypeOffline">
            <summary>Key request type for keys that will be used for offline use.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Drm.IExoMediaDrm.KeyTypeRelease">
            <summary>Key request type indicating that saved offline keys should be released.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Drm.IExoMediaDrm.KeyTypeStreaming">
            <summary>Key request type for keys that will be used for online use.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Drm.IExoMediaDrm.Acquire">
            <summary>Increments the reference count.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Drm.IExoMediaDrm.CloseSession(System.Byte[])">
            <param name="sessionId">The ID of the session to close.</param>
            <summary>Closes a DRM session.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Drm.IExoMediaDrm.GetPropertyByteArray(System.String)">
            <param name="propertyName">The property name.</param>
            <summary>Returns the value of a byte array property.</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Drm.IExoMediaDrm.GetPropertyString(System.String)">
            <param name="propertyName">The property name.</param>
            <summary>Returns the value of a string property.</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Drm.IExoMediaDrm.OpenSession">
            <summary>Opens a new DRM session.</summary>
            <returns>The session ID.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Drm.IExoMediaDrm.ProvideKeyResponse(System.Byte[],System.Byte[])">
            <param name="scope">If the request had type <c>#KEY_TYPE_STREAMING</c> or <c>#KEY_TYPE_OFFLINE</c>,
                the ID of the session to provide the keys to. If <c>keyType</c> is <c>#KEY_TYPE_RELEASE</c>, the <c>keySetId</c> of the keys being released.</param>
            <param name="response">The response data from the server.</param>
            <summary>Provides a key response for the last request to be generated using <c>#getKeyRequest</c>.</summary>
            <returns>If the request had type <c>#KEY_TYPE_OFFLINE</c>, the <c>keySetId</c> for the offline
                keys. An empty byte array or <c>null</c> may be returned for other cases.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Drm.IExoMediaDrm.ProvideProvisionResponse(System.Byte[])">
            <param name="response">The response data from the server.</param>
            <summary>Provides a provisioning response for the last request to be generated using <c>#getProvisionRequest()</c>.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Drm.IExoMediaDrm.Release">
            <summary>Decrements the reference count.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Drm.IExoMediaDrm.RequiresSecureDecoder(System.Byte[],System.String)">
            <param name="sessionId">The ID of the session.</param>
            <param name="mimeType">The content MIME type to query.</param>
            <summary>Returns whether the given session requires use of a secure decoder for the given MIME type.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Drm.IExoMediaDrm.RestoreKeys(System.Byte[],System.Byte[])">
            <param name="sessionId">The ID of the session into which the keys will be restored.</param>
            <param name="keySetId">The <c>keySetId</c> of the keys to restore, as provided by the call to <c>#provideKeyResponse</c> that persisted them.</param>
            <summary>Restores persisted offline keys into a session.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Drm.IExoMediaDrm.SetPropertyByteArray(System.String,System.Byte[])">
            <param name="propertyName">The property name.</param>
            <param name="value">The value.</param>
            <summary>Sets the value of a byte array property.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Drm.IExoMediaDrm.SetPropertyString(System.String,System.String)">
            <param name="propertyName">The property name.</param>
            <param name="value">The value.</param>
            <summary>Sets the value of a string property.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Drm.IExoMediaDrm.SetPlayerIdForSession(System.Byte[],Com.Google.Android.Exoplayer2.Analytics.PlayerId)">
            <param name="sessionId">The ID of the session.</param>
            <param name="playerId">The <c>PlayerId</c> of the player using the session.</param>
            <summary>Sets the <c>PlayerId</c> of the player using a session.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Drm.IMediaDrmCallback">
            <summary>Performs <c>ExoMediaDrm</c> key and provisioning requests.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Drm.KeysExpiredException">
            <summary>Thrown when the drm keys loaded into an open session expire.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Drm.LocalMediaDrmCallback">
            <summary>A <c>MediaDrmCallback</c> that provides a fixed response to key requests.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Drm.LocalMediaDrmCallback.#ctor(System.Byte[])">
            <param name="keyResponse">The fixed response for all key requests.</param>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Drm.MediaDrmCallbackException">
            <summary>Thrown when an error occurs while executing a DRM <c>MediaDrmCallback#executeKeyRequest key</c>
            or <c>MediaDrmCallback#executeProvisionRequest provisioning</c> request.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Drm.MediaDrmCallbackException.BytesLoaded">
            <summary>The number of bytes obtained from the server.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Drm.MediaDrmCallbackException.ResponseHeaders">
            <summary>The HTTP request headers included in the response.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Drm.OfflineLicenseHelper">
            <summary>Helper class to download, renew and release offline licenses.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Drm.OfflineLicenseHelper.Release">
            <summary>Releases the helper.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Drm.OfflineLicenseHelper.ReleaseLicense(System.Byte[])">
            <param name="offlineLicenseKeySetId">The key set id of the license to be released.</param>
            <summary>Releases an offline license.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Drm.OfflineLicenseHelper.RenewLicense(System.Byte[])">
            <param name="offlineLicenseKeySetId">The key set id of the license to be renewed.</param>
            <summary>Renews an offline license.</summary>
            <returns>The renewed offline license key set id.</returns>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Drm.UnsupportedDrmException">
            <summary>Thrown when the requested DRM scheme is not supported.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Drm.UnsupportedDrmException.Reason">
            <summary>Either <c>#REASON_UNSUPPORTED_SCHEME</c> or <c>#REASON_INSTANTIATION_ERROR</c>.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Drm.UnsupportedDrmException.ReasonInstantiationError">
            <summary>There device advertises support for the requested DRM scheme, but there was an error
            instantiating it.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Drm.UnsupportedDrmException.ReasonUnsupportedScheme">
            <summary>The requested DRM scheme is unsupported by the device.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Drm.UnsupportedDrmException.#ctor(System.Int32)">
            <param name="reason">
              <c>#REASON_UNSUPPORTED_SCHEME</c> or <c>#REASON_INSTANTIATION_ERROR</c>.</param>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Drm.UnsupportedDrmException.#ctor(System.Int32,Java.Lang.Exception)">
            <param name="reason">
              <c>#REASON_UNSUPPORTED_SCHEME</c> or <c>#REASON_INSTANTIATION_ERROR</c>.</param>
            <param name="cause">The cause of this exception.</param>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Drm.WidevineUtil">
            <summary>Utility methods for Widevine.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Drm.WidevineUtil.PropertyLicenseDurationRemaining">
            <summary>Widevine specific key status field name for the remaining license duration, in seconds.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Drm.WidevineUtil.PropertyPlaybackDurationRemaining">
            <summary>Widevine specific key status field name for the remaining playback duration, in seconds.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.ExoPlaybackException">
            <summary>Thrown when a non locally recoverable playback failure occurs.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.ExoPlaybackException.RendererFormatSupport">
            <summary>If <c>#type</c> is <c>#TYPE_RENDERER</c>, this is the level of <c>FormatSupport</c> of the
            renderer for <c>#rendererFormat</c>.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.ExoPlaybackException.RendererIndex">
            <summary>If <c>#type</c> is <c>#TYPE_RENDERER</c>, this is the index of the renderer.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.ExoPlaybackException.RendererName">
            <summary>If <c>#type</c> is <c>#TYPE_RENDERER</c>, this is the name of the renderer.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.ExoPlaybackException.Type">
            <summary>The <c>Type</c> of the playback failure.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.ExoPlaybackException.TypeRemote">
            <summary>The error occurred in a remote component.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.ExoPlaybackException.TypeRenderer">
            <summary>The error occurred in a <c>Renderer</c>.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.ExoPlaybackException.TypeSource">
            <summary>The error occurred loading data from a <c>MediaSource</c>.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.ExoPlaybackException.TypeUnexpected">
            <summary>The error was an unexpected <c>RuntimeException</c>.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.ExoPlaybackException.RendererException">
            <summary>Retrieves the underlying error when <c>#type</c> is <c>#TYPE_RENDERER</c>.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.ExoPlaybackException.SourceException">
            <summary>Retrieves the underlying error when <c>#type</c> is <c>#TYPE_SOURCE</c>.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.ExoPlaybackException.UnexpectedException">
            <summary>Retrieves the underlying error when <c>#type</c> is <c>#TYPE_UNEXPECTED</c>.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.ExoPlaybackException.CreateForRemote(System.String)">
            <param name="message">The message associated with the error.</param>
            <summary>Creates an instance of type <c>#TYPE_REMOTE</c>.</summary>
            <returns>The created instance.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.ExoPlaybackException.CreateForSource(Java.IO.IOException,System.Int32)">
            <param name="cause">The cause of the failure.</param>
            <param name="errorCode">See <c>#errorCode</c>.</param>
            <summary>Creates an instance of type <c>#TYPE_SOURCE</c>.</summary>
            <returns>The created instance.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.ExoPlaybackException.CreateForUnexpected(Java.Lang.RuntimeException,System.Int32)">
            <param name="cause">The cause of the failure.</param>
            <param name="errorCode">See <c>#errorCode</c>.</param>
            <summary>Creates an instance of type <c>#TYPE_UNEXPECTED</c>.</summary>
            <returns>The created instance.</returns>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.ExoTimeoutException">
            <summary>A timeout of an operation on the ExoPlayer playback thread.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.ExoTimeoutException.TimeoutOperation">
            <summary>The operation on the ExoPlayer playback thread that timed out.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.ExoTimeoutException.TimeoutOperationDetachSurface">
            <summary>The error occurred while detaching a surface from the player.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.ExoTimeoutException.TimeoutOperationRelease">
            <summary>The error occurred in <c>Player#release</c>.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.ExoTimeoutException.TimeoutOperationSetForegroundMode">
            <summary>The error occurred in <c>ExoPlayer#setForegroundMode</c>.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.ExoTimeoutException.TimeoutOperationUndefined">
            <summary>The operation where this error occurred is not defined.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.ExoTimeoutException.#ctor(System.Int32)">
            <param name="timeoutOperation">The <c>TimeoutOperation operation</c> that produced the timeout.</param>
            <summary>Creates the timeout exception.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.FormatHolder">
            <summary>Holds a <c>Format</c>.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.FormatHolder.DrmSession">
            <summary>An accompanying context for decrypting samples in the format.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.FormatHolder.Clear">
            <summary>Clears the holder.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.ExoPlayer.DefaultDetachSurfaceTimeoutMs">
            <summary>The default timeout for detaching a surface from the player, in milliseconds.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.ExoPlayer.DefaultReleaseTimeoutMs">
            <summary>The default timeout for calls to <c>#release</c> and <c>#setForegroundMode</c>, in
            milliseconds.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.IExoPlayer">
            <summary>An extensible media player that plays <c>MediaSource</c>s.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.IExoPlayer.DefaultDetachSurfaceTimeoutMs">
            <summary>The default timeout for detaching a surface from the player, in milliseconds.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.IExoPlayer.DefaultReleaseTimeoutMs">
            <summary>The default timeout for calls to <c>#release</c> and <c>#setForegroundMode</c>, in
            milliseconds.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.IExoPlayer.AddAnalyticsListener(Com.Google.Android.Exoplayer2.Analytics.IAnalyticsListener)">
            <param name="listener">The listener to be added.</param>
            <summary>Adds an <c>AnalyticsListener</c> to receive analytics events.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.IExoPlayer.AddMediaSource(Com.Google.Android.Exoplayer2.Source.IMediaSource)">
            <param name="mediaSource">The <c>MediaSource</c> to add.</param>
            <summary>Adds a media source to the end of the playlist.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.IExoPlayer.AddMediaSource(System.Int32,Com.Google.Android.Exoplayer2.Source.IMediaSource)">
            <param name="index">The index at which to add the source.</param>
            <param name="mediaSource">The <c>MediaSource</c> to add.</param>
            <summary>Adds a media source at the given index of the playlist.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.IExoPlayer.AddMediaSources(System.Int32,System.Collections.Generic.IList{Com.Google.Android.Exoplayer2.Source.IMediaSource})">
            <param name="index">The index at which to add the media sources.</param>
            <param name="mediaSources">The <c>MediaSource MediaSources</c> to add.</param>
            <summary>Adds a list of media sources at the given index of the playlist.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.IExoPlayer.AddMediaSources(System.Collections.Generic.IList{Com.Google.Android.Exoplayer2.Source.IMediaSource})">
            <param name="mediaSources">The <c>MediaSource MediaSources</c> to add.</param>
            <summary>Adds a list of media sources to the end of the playlist.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.IExoPlayer.ClearAuxEffectInfo">
            <summary>Detaches any previously attached auxiliary audio effect from the underlying audio track.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.IExoPlayer.ClearCameraMotionListener(Com.Google.Android.Exoplayer2.Video.Spherical.ICameraMotionListener)">
            <param name="listener">The listener to clear.</param>
            <summary>Clears the listener which receives camera motion events if it matches the one passed.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.IExoPlayer.ClearVideoFrameMetadataListener(Com.Google.Android.Exoplayer2.Video.IVideoFrameMetadataListener)">
            <param name="listener">The listener to clear.</param>
            <summary>Clears the listener which receives video frame metadata events if it matches the one passed.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.IExoPlayer.ExperimentalIsSleepingForOffload">
            <summary>Returns whether the player has paused its main loop to save power in offload scheduling mode.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.IExoPlayer.ExperimentalSetOffloadSchedulingEnabled(System.Boolean)">
            <param name="offloadSchedulingEnabled">Whether to enable offload scheduling.</param>
            <summary>Sets whether audio offload scheduling is enabled.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.IExoPlayer.GetRenderer(System.Int32)">
            <param name="index">The index of the renderer.</param>
            <summary>Returns the renderer at the given index.</summary>
            <returns>The renderer at this index.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.IExoPlayer.GetRendererType(System.Int32)">
            <param name="index">The index of the renderer.</param>
            <summary>Returns the track type that the renderer at a given index handles.</summary>
            <returns>The <c>C.TrackType track type</c> that the renderer handles.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.IExoPlayer.RemoveAnalyticsListener(Com.Google.Android.Exoplayer2.Analytics.IAnalyticsListener)">
            <param name="listener">The listener to be removed.</param>
            <summary>Removes an <c>AnalyticsListener</c>.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.IExoPlayer.SetCameraMotionListener(Com.Google.Android.Exoplayer2.Video.Spherical.ICameraMotionListener)">
            <param name="listener">The listener.</param>
            <summary>Sets a listener of camera motion events.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.IExoPlayer.SetForegroundMode(System.Boolean)">
            <param name="foregroundMode">Whether the player is allowed to keep limited resources even when in the
                idle state.</param>
            <summary>Sets whether the player is allowed to keep holding limited resources such as video decoders,
            even when in the idle state.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.IExoPlayer.SetHandleAudioBecomingNoisy(System.Boolean)">
            <param name="handleAudioBecomingNoisy">Whether the player should pause automatically when audio is
                rerouted from a headset to device speakers.</param>
            <summary>Sets whether the player should pause automatically when audio is rerouted from a headset to
            device speakers.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.IExoPlayer.SetMediaSource(Com.Google.Android.Exoplayer2.Source.IMediaSource)">
            <param name="mediaSource">The new <c>MediaSource</c>.</param>
            <summary>Clears the playlist, adds the specified <c>MediaSource</c> and resets the position to the
            default position.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.IExoPlayer.SetMediaSource(Com.Google.Android.Exoplayer2.Source.IMediaSource,System.Boolean)">
            <param name="mediaSource">The new <c>MediaSource</c>.</param>
            <param name="resetPosition">Whether the playback position should be reset to the default position. If
                false, playback will start from the position defined by <c>#getCurrentMediaItemIndex()</c>
                and <c>#getCurrentPosition()</c>.</param>
            <summary>Clears the playlist and adds the specified <c>MediaSource</c>.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.IExoPlayer.SetMediaSource(Com.Google.Android.Exoplayer2.Source.IMediaSource,System.Int64)">
            <param name="mediaSource">The new <c>MediaSource</c>.</param>
            <param name="startPositionMs">The position in milliseconds to start playback from.</param>
            <summary>Clears the playlist and adds the specified <c>MediaSource</c>.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.IExoPlayer.SetMediaSources(System.Collections.Generic.IList{Com.Google.Android.Exoplayer2.Source.IMediaSource})">
            <param name="mediaSources">The new <c>MediaSource MediaSources</c>.</param>
            <summary>Clears the playlist, adds the specified <c>MediaSource MediaSources</c> and resets the
            position to the default position.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.IExoPlayer.SetMediaSources(System.Collections.Generic.IList{Com.Google.Android.Exoplayer2.Source.IMediaSource},System.Boolean)">
            <param name="mediaSources">The new <c>MediaSource MediaSources</c>.</param>
            <param name="resetPosition">Whether the playback position should be reset to the default position in
                the first <c>Timeline.Window</c>. If false, playback will start from the position defined
                by <c>#getCurrentMediaItemIndex()</c> and <c>#getCurrentPosition()</c>.</param>
            <summary>Clears the playlist and adds the specified <c>MediaSource MediaSources</c>.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.IExoPlayer.SetMediaSources(System.Collections.Generic.IList{Com.Google.Android.Exoplayer2.Source.IMediaSource},System.Int32,System.Int64)">
            <param name="mediaSources">The new <c>MediaSource MediaSources</c>.</param>
            <param name="startMediaItemIndex">The media item index to start playback from. If <c>C#INDEX_UNSET</c> is passed, the current position is not reset.</param>
            <param name="startPositionMs">The position in milliseconds to start playback from. If <c>C#TIME_UNSET</c> is passed, the default position of the given media item is used. In any case,
                if <c>startMediaItemIndex</c> is set to <c>C#INDEX_UNSET</c>, this parameter is ignored
                and the position is not reset at all.</param>
            <summary>Clears the playlist and adds the specified <c>MediaSource MediaSources</c>.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.IExoPlayer.SetShuffleOrder(Com.Google.Android.Exoplayer2.Source.IShuffleOrder)">
            <param name="shuffleOrder">The shuffle order.</param>
            <summary>Sets the shuffle order.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.IExoPlayer.SetVideoFrameMetadataListener(Com.Google.Android.Exoplayer2.Video.IVideoFrameMetadataListener)">
            <param name="listener">The listener.</param>
            <summary>Sets a listener to receive video frame metadata events.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.IExoPlayer.SetWakeMode(System.Int32)">
            <param name="wakeMode">The <c>C.WakeMode</c> option to keep the device awake during playback.</param>
            <summary>Sets how the player should keep the device awake for playback when the screen is off.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.ILivePlaybackSpeedControl">
            <summary>Controls the playback speed while playing live content in order to maintain a steady target live
            offset.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.ILivePlaybackSpeedControl.GetAdjustedPlaybackSpeed(System.Int64,System.Int64)">
            <param name="liveOffsetUs">The current live offset, in microseconds.</param>
            <param name="bufferedDurationUs">The duration of media that's currently buffered, in microseconds.</param>
            <summary>Returns the adjusted playback speed in order get closer towards the <c>#getTargetLiveOffsetUs() target live offset</c>.</summary>
            <returns>The adjusted factor by which playback should be sped up.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.ILivePlaybackSpeedControl.NotifyRebuffer">
            <summary>Notifies the live playback speed control that a rebuffer occurred.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.ILivePlaybackSpeedControl.SetTargetLiveOffsetOverrideUs(System.Int64)">
            <summary>Sets the target live offset in microseconds that overrides the live offset <c>#setLiveConfiguration configured</c> by the media.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.ILoadControl">
            <summary>Controls buffering of media.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.ILoadControl.OnPrepared">
            <summary>Called by the player when prepared with a new source.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.ILoadControl.OnReleased">
            <summary>Called by the player when released.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.ILoadControl.OnStopped">
            <summary>Called by the player when stopped.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.ILoadControl.OnTracksSelected(Com.Google.Android.Exoplayer2.IRenderer[],Com.Google.Android.Exoplayer2.Source.TrackGroupArray,Com.Google.Android.Exoplayer2.Trackselection.IExoTrackSelection[])">
            <param name="renderers">The renderers.</param>
            <param name="trackGroups">The <c>TrackGroup</c>s from which the selection was made.</param>
            <param name="trackSelections">The track selections that were made.</param>
            <summary>Called by the player when a track selection occurs.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.ILoadControl.RetainBackBufferFromKeyframe">
            <summary>Returns whether media should be retained from the keyframe before the current playback position
            minus <c>#getBackBufferDurationUs()</c>, rather than any sample before or at that position.</summary>
            <returns>Whether media should be retained from the keyframe before the current playback position
                minus <c>#getBackBufferDurationUs()</c>, rather than any sample before or at that
                position.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.ILoadControl.ShouldContinueLoading(System.Int64,System.Int64,System.Single)">
            <param name="playbackPositionUs">The current playback position in microseconds, relative to the start
                of the <c>Timeline.Period period</c> that will continue to be loaded if this method
                returns <c>true</c>. If playback of this period has not yet started, the value will be
                negative and equal in magnitude to the duration of any media in previous periods still to
                be played.</param>
            <param name="bufferedDurationUs">The duration of media that's currently buffered.</param>
            <param name="playbackSpeed">The current factor by which playback is sped up.</param>
            <summary>Called by the player to determine whether it should continue to load the source.</summary>
            <returns>Whether the loading should continue.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.ILoadControl.ShouldStartPlayback(System.Int64,System.Single,System.Boolean,System.Int64)">
            <param name="bufferedDurationUs">The duration of media that's currently buffered.</param>
            <param name="playbackSpeed">The current factor by which playback is sped up.</param>
            <param name="rebuffering">Whether the player is rebuffering. A rebuffer is defined to be caused by
                buffer depletion rather than a user action. Hence this parameter is false during initial
                buffering and when buffering as a result of a seek operation.</param>
            <param name="targetLiveOffsetUs">The desired playback position offset to the live edge in
                microseconds, or <c>C#TIME_UNSET</c> if the media is not a live stream or no offset is
                configured.</param>
            <summary>Called repeatedly by the player when it's loading the source, has yet to start playback, and
            has the minimum amount of data necessary for playback to be started.</summary>
            <returns>Whether playback should be allowed to start or resume.</returns>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Renderer.MsgCustomBase">
            <summary>Applications or extensions may define custom <c>MSG_*</c> constants that can be passed to
            renderers.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Renderer.MsgSetAudioAttributes">
            <summary>A type of a message that can be passed to an audio renderer via <c>ExoPlayer#createMessage(PlayerMessage.Target)</c>.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Renderer.MsgSetAudioSessionId">
            <summary>The type of a message that can be passed to audio and video renderers via <c>ExoPlayer#createMessage(PlayerMessage.Target)</c>.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Renderer.MsgSetAuxEffectInfo">
            <summary>A type of a message that can be passed to an audio renderer via <c>ExoPlayer#createMessage(PlayerMessage.Target)</c>.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Renderer.MsgSetCameraMotionListener">
            <summary>The type of a message that can be passed to a camera motion renderer via <c>ExoPlayer#createMessage(PlayerMessage.Target)</c>.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Renderer.MsgSetChangeFrameRateStrategy">
            <summary>The type of a message that can be passed to a video renderer via <c>ExoPlayer#createMessage(PlayerMessage.Target)</c>.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Renderer.MsgSetScalingMode">
            <summary>The type of a message that can be passed to a <c>MediaCodec</c>-based video renderer via
            <c>ExoPlayer#createMessage(PlayerMessage.Target)</c>.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Renderer.MsgSetSkipSilenceEnabled">
            <summary>The type of a message that can be passed to an audio renderer via <c>ExoPlayer#createMessage(PlayerMessage.Target)</c>.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Renderer.MsgSetVideoFrameMetadataListener">
            <summary>The type of a message that can be passed to a video renderer via <c>ExoPlayer#createMessage(PlayerMessage.Target)</c>.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Renderer.MsgSetVideoOutput">
            <summary>The type of a message that can be passed to a video renderer via <c>ExoPlayer#createMessage(PlayerMessage.Target)</c>.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Renderer.MsgSetVolume">
            <summary>A type of a message that can be passed to an audio renderer via <c>ExoPlayer#createMessage(PlayerMessage.Target)</c>.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Renderer.MsgSetWakeupListener">
            <summary>The type of a message that can be passed to a <c>Renderer</c> via <c>ExoPlayer#createMessage(PlayerMessage.Target)</c>, to inform the renderer that it can schedule
            waking up another component.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Renderer.StateDisabled">
            <summary>The renderer is disabled.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Renderer.StateEnabled">
            <summary>The renderer is enabled but not started.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Renderer.StateStarted">
            <summary>The renderer is started.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.IRenderer">
            <summary>Renders media read from a <c>SampleStream</c>.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.IRenderer.MsgCustomBase">
            <summary>Applications or extensions may define custom <c>MSG_*</c> constants that can be passed to
            renderers.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.IRenderer.MsgSetAudioAttributes">
            <summary>A type of a message that can be passed to an audio renderer via <c>ExoPlayer#createMessage(PlayerMessage.Target)</c>.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.IRenderer.MsgSetAudioSessionId">
            <summary>The type of a message that can be passed to audio and video renderers via <c>ExoPlayer#createMessage(PlayerMessage.Target)</c>.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.IRenderer.MsgSetAuxEffectInfo">
            <summary>A type of a message that can be passed to an audio renderer via <c>ExoPlayer#createMessage(PlayerMessage.Target)</c>.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.IRenderer.MsgSetCameraMotionListener">
            <summary>The type of a message that can be passed to a camera motion renderer via <c>ExoPlayer#createMessage(PlayerMessage.Target)</c>.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.IRenderer.MsgSetChangeFrameRateStrategy">
            <summary>The type of a message that can be passed to a video renderer via <c>ExoPlayer#createMessage(PlayerMessage.Target)</c>.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.IRenderer.MsgSetScalingMode">
            <summary>The type of a message that can be passed to a <c>MediaCodec</c>-based video renderer via
            <c>ExoPlayer#createMessage(PlayerMessage.Target)</c>.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.IRenderer.MsgSetSkipSilenceEnabled">
            <summary>The type of a message that can be passed to an audio renderer via <c>ExoPlayer#createMessage(PlayerMessage.Target)</c>.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.IRenderer.MsgSetVideoFrameMetadataListener">
            <summary>The type of a message that can be passed to a video renderer via <c>ExoPlayer#createMessage(PlayerMessage.Target)</c>.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.IRenderer.MsgSetVideoOutput">
            <summary>The type of a message that can be passed to a video renderer via <c>ExoPlayer#createMessage(PlayerMessage.Target)</c>.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.IRenderer.MsgSetVolume">
            <summary>A type of a message that can be passed to an audio renderer via <c>ExoPlayer#createMessage(PlayerMessage.Target)</c>.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.IRenderer.MsgSetWakeupListener">
            <summary>The type of a message that can be passed to a <c>Renderer</c> via <c>ExoPlayer#createMessage(PlayerMessage.Target)</c>, to inform the renderer that it can schedule
            waking up another component.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.IRenderer.StateDisabled">
            <summary>The renderer is disabled.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.IRenderer.StateEnabled">
            <summary>The renderer is enabled but not started.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.IRenderer.StateStarted">
            <summary>The renderer is started.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.IRenderer.Disable">
            <summary>Disable the renderer, transitioning it to the <c>#STATE_DISABLED</c> state.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.IRenderer.Init(System.Int32,Com.Google.Android.Exoplayer2.Analytics.PlayerId)">
            <param name="index">The renderer index within the player.</param>
            <param name="playerId">The <c>PlayerId</c> of the player.</param>
            <summary>Initializes the renderer for playback with a player.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.IRenderer.MaybeThrowStreamError">
            <summary>Throws an error that's preventing the renderer from reading from its <c>SampleStream</c>.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.IRenderer.Render(System.Int64,System.Int64)">
            <param name="positionUs">The current media time in microseconds, measured at the start of the current
                iteration of the rendering loop.</param>
            <param name="elapsedRealtimeUs">
              <c>android.os.SystemClock#elapsedRealtime()</c> in microseconds,
                measured at the start of the current iteration of the rendering loop.</param>
            <summary>Incrementally renders the <c>SampleStream</c>.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.IRenderer.Reset">
            <summary>Forces the renderer to give up any resources (e.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.IRenderer.ResetPosition(System.Int64)">
            <param name="positionUs">The new playback position in microseconds.</param>
            <summary>Signals to the renderer that a position discontinuity has occurred.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.IRenderer.SetCurrentStreamFinal">
            <summary>Signals to the renderer that the current <c>SampleStream</c> will be the final one supplied
            before it is next disabled or reset.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.IRenderer.Start">
            <summary>Starts the renderer, meaning that calls to <c>#render(long, long)</c> will cause media to be
            rendered.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.IRenderer.Stop">
            <summary>Stops the renderer, transitioning it to the <c>#STATE_ENABLED</c> state.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.IRenderer.SetPlaybackSpeed(System.Single,System.Single)">
            <param name="currentPlaybackSpeed">The factor by which playback is currently sped up.</param>
            <param name="targetPlaybackSpeed">The target factor by which playback should be sped up. This may be
                different from <c>currentPlaybackSpeed</c>, for example, if the speed is temporarily
                adjusted for live playback.</param>
            <summary>Indicates the playback speed to this renderer.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.RendererCapabilities.AdaptiveNotSeamless">
            <summary>The <c>Renderer</c> can adapt between formats, but may suffer a brief discontinuity
            (~50-100ms) when adaptation occurs.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.RendererCapabilities.AdaptiveNotSupported">
            <summary>The <c>Renderer</c> does not support adaptation between formats.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.RendererCapabilities.AdaptiveSeamless">
            <summary>The <c>Renderer</c> can seamlessly adapt between formats.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.RendererCapabilities.AdaptiveSupportMask">
            <summary>A mask to apply to <c>Capabilities</c> to obtain the <c>AdaptiveSupport</c> only.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.RendererCapabilities.DecoderSupportFallback">
            <summary>The renderer will use a fallback decoder.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.RendererCapabilities.DecoderSupportPrimary">
            <summary>The renderer is able to use the primary decoder for the format's MIME type.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.RendererCapabilities.FormatSupportMask">
            <summary>A mask to apply to <c>Capabilities</c> to obtain the <c>C.FormatSupport</c> only.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.RendererCapabilities.HardwareAccelerationNotSupported">
            <summary>The renderer is not able to use hardware acceleration.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.RendererCapabilities.HardwareAccelerationSupported">
            <summary>The renderer is able to use hardware acceleration.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.RendererCapabilities.HardwareAccelerationSupportMask">
            <summary>A mask to apply to <c>Capabilities</c> to obtain <c>HardwareAccelerationSupport</c> only.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.RendererCapabilities.ModeSupportMask">
            <summary>A mask to apply to <c>Capabilities</c> to obtain <c>DecoderSupport</c> only.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.RendererCapabilities.TunnelingNotSupported">
            <summary>The <c>Renderer</c> does not support tunneled output.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.RendererCapabilities.TunnelingSupported">
            <summary>The <c>Renderer</c> supports tunneled output.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.RendererCapabilities.TunnelingSupportMask">
            <summary>A mask to apply to <c>Capabilities</c> to obtain <c>TunnelingSupport</c> only.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.RendererCapabilities.Create(System.Int32)">
            <param name="formatSupport">The <c>C.FormatSupport</c>.</param>
            <summary>Returns <c>Capabilities</c> for the given <c>C.FormatSupport</c>.</summary>
            <returns>The combined <c>Capabilities</c> of the given <c>C.FormatSupport</c>, <c>#ADAPTIVE_NOT_SUPPORTED</c> and <c>#TUNNELING_NOT_SUPPORTED</c>.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.RendererCapabilities.Create(System.Int32,System.Int32,System.Int32)">
            <param name="formatSupport">The <c>C.FormatSupport</c>.</param>
            <param name="adaptiveSupport">The <c>AdaptiveSupport</c>.</param>
            <param name="tunnelingSupport">The <c>TunnelingSupport</c>.</param>
            <summary>Returns <c>Capabilities</c> combining the given <c>C.FormatSupport</c>, <c>AdaptiveSupport</c> and <c>TunnelingSupport</c>.</summary>
            <returns>The combined <c>Capabilities</c>.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.RendererCapabilities.Create(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <param name="formatSupport">The <c>C.FormatSupport</c>.</param>
            <param name="adaptiveSupport">The <c>AdaptiveSupport</c>.</param>
            <param name="tunnelingSupport">The <c>TunnelingSupport</c>.</param>
            <param name="hardwareAccelerationSupport">The <c>HardwareAccelerationSupport</c>.</param>
            <param name="decoderSupport">The <c>DecoderSupport</c>.</param>
            <summary>Returns <c>Capabilities</c> combining the given <c>C.FormatSupport</c>, <c>AdaptiveSupport</c>, <c>TunnelingSupport</c>, <c>HardwareAccelerationSupport</c> and <c>DecoderSupport</c>.</summary>
            <returns>The combined <c>Capabilities</c>.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.RendererCapabilities.GetAdaptiveSupport(System.Int32)">
            <param name="supportFlags">The combined <c>Capabilities</c>.</param>
            <summary>Returns the <c>AdaptiveSupport</c> from the combined <c>Capabilities</c>.</summary>
            <returns>The <c>AdaptiveSupport</c> only.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.RendererCapabilities.GetDecoderSupport(System.Int32)">
            <param name="supportFlags">The combined <c>Capabilities</c>.</param>
            <summary>Returns the <c>DecoderSupport</c> from the combined <c>Capabilities</c>.</summary>
            <returns>The <c>DecoderSupport</c> only.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.RendererCapabilities.GetFormatSupport(System.Int32)">
            <param name="supportFlags">The combined <c>Capabilities</c>.</param>
            <summary>Returns the <c>C.FormatSupport</c> from the combined <c>Capabilities</c>.</summary>
            <returns>The <c>C.FormatSupport</c> only.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.RendererCapabilities.GetHardwareAccelerationSupport(System.Int32)">
            <param name="supportFlags">The combined <c>Capabilities</c>.</param>
            <summary>Returns the <c>HardwareAccelerationSupport</c> from the combined <c>Capabilities</c>.</summary>
            <returns>The <c>HardwareAccelerationSupport</c> only.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.RendererCapabilities.GetTunnelingSupport(System.Int32)">
            <param name="supportFlags">The combined <c>Capabilities</c>.</param>
            <summary>Returns the <c>TunnelingSupport</c> from the combined <c>Capabilities</c>.</summary>
            <returns>The <c>TunnelingSupport</c> only.</returns>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.IRendererCapabilities">
            <summary>Defines the capabilities of a <c>Renderer</c>.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.IRendererCapabilities.AdaptiveNotSeamless">
            <summary>The <c>Renderer</c> can adapt between formats, but may suffer a brief discontinuity
            (~50-100ms) when adaptation occurs.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.IRendererCapabilities.AdaptiveNotSupported">
            <summary>The <c>Renderer</c> does not support adaptation between formats.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.IRendererCapabilities.AdaptiveSeamless">
            <summary>The <c>Renderer</c> can seamlessly adapt between formats.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.IRendererCapabilities.AdaptiveSupportMask">
            <summary>A mask to apply to <c>Capabilities</c> to obtain the <c>AdaptiveSupport</c> only.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.IRendererCapabilities.DecoderSupportFallback">
            <summary>The renderer will use a fallback decoder.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.IRendererCapabilities.DecoderSupportPrimary">
            <summary>The renderer is able to use the primary decoder for the format's MIME type.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.IRendererCapabilities.FormatSupportMask">
            <summary>A mask to apply to <c>Capabilities</c> to obtain the <c>C.FormatSupport</c> only.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.IRendererCapabilities.HardwareAccelerationNotSupported">
            <summary>The renderer is not able to use hardware acceleration.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.IRendererCapabilities.HardwareAccelerationSupported">
            <summary>The renderer is able to use hardware acceleration.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.IRendererCapabilities.HardwareAccelerationSupportMask">
            <summary>A mask to apply to <c>Capabilities</c> to obtain <c>HardwareAccelerationSupport</c> only.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.IRendererCapabilities.ModeSupportMask">
            <summary>A mask to apply to <c>Capabilities</c> to obtain <c>DecoderSupport</c> only.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.IRendererCapabilities.TunnelingNotSupported">
            <summary>The <c>Renderer</c> does not support tunneled output.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.IRendererCapabilities.TunnelingSupported">
            <summary>The <c>Renderer</c> supports tunneled output.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.IRendererCapabilities.TunnelingSupportMask">
            <summary>A mask to apply to <c>Capabilities</c> to obtain <c>TunnelingSupport</c> only.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.IRendererCapabilities.SupportsMixedMimeTypeAdaptation">
            <summary>Returns the extent to which the <c>Renderer</c> supports adapting between supported formats
            that have different MIME types.</summary>
            <returns>The <c>AdaptiveSupport</c> for adapting between supported formats that have different
                MIME types.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.IRendererCapabilities.Create(System.Int32)">
            <param name="formatSupport">The <c>C.FormatSupport</c>.</param>
            <summary>Returns <c>Capabilities</c> for the given <c>C.FormatSupport</c>.</summary>
            <returns>The combined <c>Capabilities</c> of the given <c>C.FormatSupport</c>, <c>#ADAPTIVE_NOT_SUPPORTED</c> and <c>#TUNNELING_NOT_SUPPORTED</c>.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.IRendererCapabilities.Create(System.Int32,System.Int32,System.Int32)">
            <param name="formatSupport">The <c>C.FormatSupport</c>.</param>
            <param name="adaptiveSupport">The <c>AdaptiveSupport</c>.</param>
            <param name="tunnelingSupport">The <c>TunnelingSupport</c>.</param>
            <summary>Returns <c>Capabilities</c> combining the given <c>C.FormatSupport</c>, <c>AdaptiveSupport</c> and <c>TunnelingSupport</c>.</summary>
            <returns>The combined <c>Capabilities</c>.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.IRendererCapabilities.Create(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <param name="formatSupport">The <c>C.FormatSupport</c>.</param>
            <param name="adaptiveSupport">The <c>AdaptiveSupport</c>.</param>
            <param name="tunnelingSupport">The <c>TunnelingSupport</c>.</param>
            <param name="hardwareAccelerationSupport">The <c>HardwareAccelerationSupport</c>.</param>
            <param name="decoderSupport">The <c>DecoderSupport</c>.</param>
            <summary>Returns <c>Capabilities</c> combining the given <c>C.FormatSupport</c>, <c>AdaptiveSupport</c>, <c>TunnelingSupport</c>, <c>HardwareAccelerationSupport</c> and <c>DecoderSupport</c>.</summary>
            <returns>The combined <c>Capabilities</c>.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.IRendererCapabilities.GetAdaptiveSupport(System.Int32)">
            <param name="supportFlags">The combined <c>Capabilities</c>.</param>
            <summary>Returns the <c>AdaptiveSupport</c> from the combined <c>Capabilities</c>.</summary>
            <returns>The <c>AdaptiveSupport</c> only.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.IRendererCapabilities.GetDecoderSupport(System.Int32)">
            <param name="supportFlags">The combined <c>Capabilities</c>.</param>
            <summary>Returns the <c>DecoderSupport</c> from the combined <c>Capabilities</c>.</summary>
            <returns>The <c>DecoderSupport</c> only.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.IRendererCapabilities.GetFormatSupport(System.Int32)">
            <param name="supportFlags">The combined <c>Capabilities</c>.</param>
            <summary>Returns the <c>C.FormatSupport</c> from the combined <c>Capabilities</c>.</summary>
            <returns>The <c>C.FormatSupport</c> only.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.IRendererCapabilities.GetHardwareAccelerationSupport(System.Int32)">
            <param name="supportFlags">The combined <c>Capabilities</c>.</param>
            <summary>Returns the <c>HardwareAccelerationSupport</c> from the combined <c>Capabilities</c>.</summary>
            <returns>The <c>HardwareAccelerationSupport</c> only.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.IRendererCapabilities.GetTunnelingSupport(System.Int32)">
            <param name="supportFlags">The combined <c>Capabilities</c>.</param>
            <summary>Returns the <c>TunnelingSupport</c> from the combined <c>Capabilities</c>.</summary>
            <returns>The <c>TunnelingSupport</c> only.</returns>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.IRenderersFactory">
            <summary>Builds <c>Renderer</c> instances for use by an <c>ExoPlayer</c>.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Mediacodec.DefaultMediaCodecAdapterFactory">
            <summary>The default <c>MediaCodecAdapter.Factory</c>.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Mediacodec.DefaultMediaCodecAdapterFactory.ExperimentalSetSynchronizeCodecInteractionsWithQueueingEnabled(System.Boolean)">
            <param name="enabled">Whether codec interactions will be synchronized with asynchronous buffer
                queueing.</param>
            <summary>Enable synchronizing codec interactions with asynchronous buffer queueing.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Mediacodec.DefaultMediaCodecAdapterFactory.ForceDisableAsynchronous">
            <summary>Forces the factory to always create <c>SynchronousMediaCodecAdapter</c> instances.</summary>
            <returns>This factory, for convenience.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Mediacodec.DefaultMediaCodecAdapterFactory.ForceEnableAsynchronous">
            <summary>Forces this factory to always create <c>AsynchronousMediaCodecAdapter</c> instances, provided
            the device API level is &amp;gt;= 23.</summary>
            <returns>This factory, for convenience.</returns>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Mediacodec.IMediaCodecAdapter">
            <summary>Abstracts <c>MediaCodec</c> operations.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Mediacodec.IMediaCodecAdapter.DequeueInputBufferIndex">
            <summary>Returns the next available input buffer index from the underlying <c>MediaCodec</c> or <c>MediaCodec#INFO_TRY_AGAIN_LATER</c> if no such buffer exists.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Mediacodec.IMediaCodecAdapter.Flush">
            <summary>Flushes the adapter and the underlying <c>MediaCodec</c>.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Mediacodec.IMediaCodecAdapter.GetInputBuffer(System.Int32)">
            <summary>Returns a writable ByteBuffer object for a dequeued input buffer index.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Mediacodec.IMediaCodecAdapter.GetOutputBuffer(System.Int32)">
            <summary>Returns a read-only ByteBuffer for a dequeued output buffer index.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Mediacodec.IMediaCodecAdapter.NeedsReconfiguration">
            <summary>Whether the adapter needs to be reconfigured before it is used.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Mediacodec.IMediaCodecAdapter.QueueInputBuffer(System.Int32,System.Int32,System.Int32,System.Int64,System.Int32)">
            <summary>Submit an input buffer for decoding.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Mediacodec.IMediaCodecAdapter.Release">
            <summary>Releases the adapter and the underlying <c>MediaCodec</c>.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Mediacodec.IMediaCodecAdapter.ReleaseOutputBuffer(System.Int32,System.Boolean)">
            <summary>Returns the buffer to the <c>MediaCodec</c>.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Mediacodec.IMediaCodecAdapter.ReleaseOutputBuffer(System.Int32,System.Int64)">
            <summary>Updates the output buffer's surface timestamp and sends it to the <c>MediaCodec</c> to render
            it on the output surface.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Mediacodec.IMediaCodecAdapter.SetVideoScalingMode(System.Int32)">
            <summary>Specifies the scaling mode to use, if a surface was specified when the codec was created.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Mediacodec.MediaCodecSelector.Default">
            <summary>Default implementation of <c>MediaCodecSelector</c>, which returns the preferred decoder for
            the given format.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Mediacodec.IMediaCodecSelector">
            <summary>Selector of <c>MediaCodec</c> instances.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Mediacodec.IMediaCodecSelector.Default">
            <summary>Default implementation of <c>MediaCodecSelector</c>, which returns the preferred decoder for
            the given format.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Mediacodec.IMediaCodecSelector.GetDecoderInfos(System.String,System.Boolean,System.Boolean)">
            <param name="mimeType">The MIME type for which a decoder is required.</param>
            <param name="requiresSecureDecoder">Whether a secure decoder is required.</param>
            <param name="requiresTunnelingDecoder">Whether a tunneling decoder is required.</param>
            <summary>Returns a list of decoders that can decode media in the specified MIME type, in priority order.</summary>
            <returns>An unmodifiable list of <c>MediaCodecInfo</c>s corresponding to decoders. May be
                empty.</returns>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Mediacodec.MediaCodecDecoderException">
            <summary>Thrown when a failure occurs in a <c>MediaCodec</c> decoder.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Mediacodec.MediaCodecDecoderException.CodecInfo">
            <summary>The <c>MediaCodecInfo</c> of the decoder that failed.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Mediacodec.MediaCodecDecoderException.DiagnosticInfo">
            <summary>An optional developer-readable diagnostic information string.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Mediacodec.MediaCodecInfo">
            <summary>Information about a <c>MediaCodec</c> for a given mime type.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Mediacodec.MediaCodecInfo.Adaptive">
            <summary>Whether the decoder supports seamless resolution switches.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Mediacodec.MediaCodecInfo.CodecMimeType">
            <summary>The MIME type that the codec uses for media of type <c>#mimeType</c>.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Mediacodec.MediaCodecInfo.HardwareAccelerated">
            <summary>Whether the codec is hardware accelerated.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Mediacodec.MediaCodecInfo.MaxSupportedInstancesUnknown">
            <summary>The value returned by <c>#getMaxSupportedInstances()</c> if the upper bound on the maximum
            number of supported instances is unknown.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Mediacodec.MediaCodecInfo.MimeType">
            <summary>The MIME type handled by the codec.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Mediacodec.MediaCodecInfo.Name">
            <summary>The name of the decoder.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Mediacodec.MediaCodecInfo.Secure">
            <summary>Whether the decoder is secure.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Mediacodec.MediaCodecInfo.SoftwareOnly">
            <summary>Whether the codec is software only.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Mediacodec.MediaCodecInfo.Tunneling">
            <summary>Whether the decoder supports tunneling.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Mediacodec.MediaCodecInfo.Vendor">
            <summary>Whether the codec is from the vendor.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Mediacodec.MediaCodecInfo.IsHdr10PlusOutOfBandMetadataSupported">
            <summary>Whether the codec handles HDR10+ out-of-band metadata.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Mediacodec.MediaCodecInfo.MaxSupportedInstances">
            <summary>Returns an upper bound on the maximum number of supported instances, or <c>#MAX_SUPPORTED_INSTANCES_UNKNOWN</c> if unknown.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Mediacodec.MediaCodecInfo.IsAudioChannelCountSupportedV21(System.Int32)">
            <param name="channelCount">The channel count.</param>
            <summary>Whether the decoder supports audio with a given channel count.</summary>
            <returns>Whether the decoder supports audio with the given channel count.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Mediacodec.MediaCodecInfo.IsAudioSampleRateSupportedV21(System.Int32)">
            <param name="sampleRate">The sample rate in Hz.</param>
            <summary>Whether the decoder supports audio with a given sample rate.</summary>
            <returns>Whether the decoder supports audio with the given sample rate.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Mediacodec.MediaCodecInfo.IsVideoSizeAndRateSupportedV21(System.Int32,System.Int32,System.Double)">
            <param name="width">Width in pixels.</param>
            <param name="height">Height in pixels.</param>
            <param name="frameRate">Optional frame rate in frames per second. Ignored if set to <c>Format#NO_VALUE</c> or any value less than or equal to 0.</param>
            <summary>Whether the decoder supports video with a given width, height and frame rate.</summary>
            <returns>Whether the decoder supports video with the given width, height and frame rate.</returns>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Mediacodec.MediaCodecRenderer">
            <summary>An abstract renderer that uses <c>MediaCodec</c> to decode samples for rendering.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Mediacodec.MediaCodecRenderer.CodecOperatingRateUnset">
            <summary>Indicates no codec operating rate should be set.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Mediacodec.MediaCodecRenderer.CodecNeedsEosPropagation">
            <summary>Returns whether the codec needs the renderer to propagate the end-of-stream signal directly,
            rather than by using an end-of-stream buffer queued to the codec.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Mediacodec.MediaCodecRenderer.CodecOperatingRate">
            <summary>Returns the operating rate used by the current codec</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Mediacodec.MediaCodecRenderer.OutputStreamOffsetUs">
            <summary>Returns the offset that should be subtracted from <c>bufferPresentationTimeUs</c> in <c>#processOutputBuffer(long, long, MediaCodecAdapter, ByteBuffer, int, int, int, long, boolean,
            boolean, Format)</c> to get the playback position with respect to the media.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Mediacodec.MediaCodecRenderer.PlaybackSpeed">
            <summary>Returns the current playback speed, as set by <c>#setPlaybackSpeed</c>.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Mediacodec.MediaCodecRenderer.FlushOrReinitializeCodec">
            <summary>Flushes the codec.</summary>
            <returns>Whether the codec was released and reinitialized, rather than being flushed.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Mediacodec.MediaCodecRenderer.FlushOrReleaseCodec">
            <summary>Flushes the codec.</summary>
            <returns>Whether the codec was released.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Mediacodec.MediaCodecRenderer.OnCodecError(Java.Lang.Exception)">
            <param name="codecError">The error.</param>
            <summary>Called when a codec error has occurred.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Mediacodec.MediaCodecRenderer.OnCodecReleased(System.String)">
            <param name="name">The name of the codec that was released.</param>
            <summary>Called when a <c>MediaCodec</c> has been released.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Mediacodec.MediaCodecRenderer.OnInputFormatChanged(Com.Google.Android.Exoplayer2.FormatHolder)">
            <param name="formatHolder">A <c>FormatHolder</c> that holds the new <c>Format</c>.</param>
            <summary>Called when a new <c>Format</c> is read from the upstream <c>MediaPeriod</c>.</summary>
            <returns>The result of the evaluation to determine whether the existing decoder instance can be
                reused for the new format, or <c>null</c> if the renderer did not have a decoder.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Mediacodec.MediaCodecRenderer.OnProcessedOutputBuffer(System.Int64)">
            <param name="presentationTimeUs">The timestamp associated with the output buffer.</param>
            <summary>Called when an output buffer is successfully processed.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Mediacodec.MediaCodecRenderer.OnProcessedStreamChange">
            <summary>Called after the last output buffer before a stream change has been processed.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Mediacodec.MediaCodecRenderer.RenderToEndOfStream">
            <summary>Incrementally renders any remaining output.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Mediacodec.MediaCodecRenderer.ResetCodecStateForFlush">
            <summary>Resets the renderer internal state after a codec flush.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Mediacodec.MediaCodecRenderer.ResetCodecStateForRelease">
            <summary>Resets the renderer internal state after a codec release.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Mediacodec.MediaCodecRenderer.SetPendingOutputEndOfStream">
            <summary>Notifies the renderer that output end of stream is pending and should be handled on the next
            render.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Mediacodec.MediaCodecRenderer.SetPendingPlaybackException(Com.Google.Android.Exoplayer2.ExoPlaybackException)">
            <param name="exception">The exception.</param>
            <summary>Sets an exception to be re-thrown by render.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Mediacodec.MediaCodecRenderer.SetRenderTimeLimitMs(System.Int64)">
            <param name="renderTimeLimitMs">The render time limit in milliseconds, or <c>C#TIME_UNSET</c> for no
                limit.</param>
            <summary>Sets a limit on the time a single <c>#render(long, long)</c> call can spend draining and
            filling the decoder.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Mediacodec.MediaCodecRenderer.ShouldReinitCodec">
            <summary>Returns whether the renderer needs to re-initialize the codec, possibly as a result of a change
            in device capabilities.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Mediacodec.MediaCodecRenderer.UpdateCodecOperatingRate">
            <summary>Updates the codec operating rate, or triggers codec release and re-initialization if a
            previously set operating rate needs to be cleared.</summary>
            <returns>False if codec release and re-initialization was triggered. True in all other cases.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Mediacodec.MediaCodecRenderer.UpdateOutputFormatForTime(System.Int64)">
            <summary>Updates the output formats for the specified output buffer timestamp, calling <c>#onOutputFormatChanged</c> if a change has occurred.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Mediacodec.MediaCodecRendererInvoker.Name">
            <summary>Returns the name of the <c>Renderer</c>.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Mediacodec.MediaCodecUtil">
            <summary>A utility class for querying the available codecs.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Mediacodec.MediaCodecUtil.DecryptOnlyDecoderInfo">
            <summary>Returns information about a decoder that will only decrypt data, without decoding it.</summary>
            <returns>A <c>MediaCodecInfo</c> describing the decoder, or null if no suitable decoder exists.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Mediacodec.MediaCodecUtil.GetDecoderInfo(System.String,System.Boolean,System.Boolean)">
            <param name="mimeType">The MIME type.</param>
            <param name="secure">Whether the decoder is required to support secure decryption. Always pass false
                unless secure decryption really is required.</param>
            <param name="tunneling">Whether the decoder is required to support tunneling. Always pass false unless
                tunneling really is required.</param>
            <summary>Returns information about the preferred decoder for a given mime type.</summary>
            <returns>A <c>MediaCodecInfo</c> describing the decoder, or null if no suitable decoder exists.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Mediacodec.MediaCodecUtil.GetDecoderInfos(System.String,System.Boolean,System.Boolean)">
            <param name="mimeType">The MIME type.</param>
            <param name="secure">Whether the decoder is required to support secure decryption. Always pass false
                unless secure decryption really is required.</param>
            <param name="tunneling">Whether the decoder is required to support tunneling. Always pass false unless
                tunneling really is required.</param>
            <summary>Returns all <c>MediaCodecInfo</c>s for the given mime type, in the order given by <c>MediaCodecList</c>.</summary>
            <returns>An unmodifiable list of all <c>MediaCodecInfo</c>s for the given mime type, in the
                order given by <c>MediaCodecList</c>.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Mediacodec.MediaCodecUtil.MaxH264DecodableFrameSize">
            <summary>Returns the maximum frame size supported by the default H264 decoder.</summary>
            <returns>The maximum frame size for an H264 stream that can be decoded on the device.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Mediacodec.MediaCodecUtil.WarmDecoderInfoCache(System.String,System.Boolean,System.Boolean)">
            <param name="mimeType">The mime type.</param>
            <param name="secure">Whether the decoder is required to support secure decryption. Always pass false
                unless secure decryption really is required.</param>
            <param name="tunneling">Whether the decoder is required to support tunneling. Always pass false unless
                tunneling really is required.</param>
            <summary>Optional call to warm the codec cache for a given mime type.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Mediacodec.SynchronousMediaCodecAdapter">
            <summary>A <c>MediaCodecAdapter</c> that operates the underlying <c>MediaCodec</c> in synchronous mode.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Metadata.MetadataDecoderFactory.Default">
            <summary>Default <c>MetadataDecoder</c> implementation.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Metadata.IMetadataDecoderFactory">
            <summary>A factory for <c>MetadataDecoder</c> instances.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Metadata.IMetadataDecoderFactory.Default">
            <summary>Default <c>MetadataDecoder</c> implementation.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Metadata.IMetadataOutput">
            <summary>Receives metadata output.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Metadata.MetadataRenderer">
            <summary>A renderer for metadata.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.MetadataRetriever">
            <summary>Retrieves the static metadata of <c>MediaItem MediaItems</c>.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.NoSampleRenderer">
            <summary>A <c>Renderer</c> implementation whose track type is <c>C#TRACK_TYPE_NONE</c> and does not
            consume data from its <c>SampleStream</c>.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.NoSampleRenderer.InterfaceConsts.MsgCustomBase">
            <summary>Applications or extensions may define custom <c>MSG_*</c> constants that can be passed to
            renderers.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.NoSampleRenderer.InterfaceConsts.MsgSetAudioAttributes">
            <summary>A type of a message that can be passed to an audio renderer via <c>ExoPlayer#createMessage(PlayerMessage.Target)</c>.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.NoSampleRenderer.InterfaceConsts.MsgSetAudioSessionId">
            <summary>The type of a message that can be passed to audio and video renderers via <c>ExoPlayer#createMessage(PlayerMessage.Target)</c>.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.NoSampleRenderer.InterfaceConsts.MsgSetAuxEffectInfo">
            <summary>A type of a message that can be passed to an audio renderer via <c>ExoPlayer#createMessage(PlayerMessage.Target)</c>.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.NoSampleRenderer.InterfaceConsts.MsgSetCameraMotionListener">
            <summary>The type of a message that can be passed to a camera motion renderer via <c>ExoPlayer#createMessage(PlayerMessage.Target)</c>.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.NoSampleRenderer.InterfaceConsts.MsgSetChangeFrameRateStrategy">
            <summary>The type of a message that can be passed to a video renderer via <c>ExoPlayer#createMessage(PlayerMessage.Target)</c>.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.NoSampleRenderer.InterfaceConsts.MsgSetScalingMode">
            <summary>The type of a message that can be passed to a <c>MediaCodec</c>-based video renderer via
            <c>ExoPlayer#createMessage(PlayerMessage.Target)</c>.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.NoSampleRenderer.InterfaceConsts.MsgSetSkipSilenceEnabled">
            <summary>The type of a message that can be passed to an audio renderer via <c>ExoPlayer#createMessage(PlayerMessage.Target)</c>.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.NoSampleRenderer.InterfaceConsts.MsgSetVideoFrameMetadataListener">
            <summary>The type of a message that can be passed to a video renderer via <c>ExoPlayer#createMessage(PlayerMessage.Target)</c>.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.NoSampleRenderer.InterfaceConsts.MsgSetVideoOutput">
            <summary>The type of a message that can be passed to a video renderer via <c>ExoPlayer#createMessage(PlayerMessage.Target)</c>.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.NoSampleRenderer.InterfaceConsts.MsgSetVolume">
            <summary>A type of a message that can be passed to an audio renderer via <c>ExoPlayer#createMessage(PlayerMessage.Target)</c>.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.NoSampleRenderer.InterfaceConsts.MsgSetWakeupListener">
            <summary>The type of a message that can be passed to a <c>Renderer</c> via <c>ExoPlayer#createMessage(PlayerMessage.Target)</c>, to inform the renderer that it can schedule
            waking up another component.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.NoSampleRenderer.InterfaceConsts.StateDisabled">
            <summary>The renderer is disabled.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.NoSampleRenderer.InterfaceConsts.StateEnabled">
            <summary>The renderer is enabled but not started.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.NoSampleRenderer.InterfaceConsts.StateStarted">
            <summary>The renderer is started.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.NoSampleRenderer.InterfaceConsts.AdaptiveNotSeamless">
            <summary>The <c>Renderer</c> can adapt between formats, but may suffer a brief discontinuity
            (~50-100ms) when adaptation occurs.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.NoSampleRenderer.InterfaceConsts.AdaptiveNotSupported">
            <summary>The <c>Renderer</c> does not support adaptation between formats.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.NoSampleRenderer.InterfaceConsts.AdaptiveSeamless">
            <summary>The <c>Renderer</c> can seamlessly adapt between formats.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.NoSampleRenderer.InterfaceConsts.AdaptiveSupportMask">
            <summary>A mask to apply to <c>Capabilities</c> to obtain the <c>AdaptiveSupport</c> only.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.NoSampleRenderer.InterfaceConsts.DecoderSupportFallback">
            <summary>The renderer will use a fallback decoder.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.NoSampleRenderer.InterfaceConsts.DecoderSupportPrimary">
            <summary>The renderer is able to use the primary decoder for the format's MIME type.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.NoSampleRenderer.InterfaceConsts.FormatSupportMask">
            <summary>A mask to apply to <c>Capabilities</c> to obtain the <c>C.FormatSupport</c> only.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.NoSampleRenderer.InterfaceConsts.HardwareAccelerationNotSupported">
            <summary>The renderer is not able to use hardware acceleration.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.NoSampleRenderer.InterfaceConsts.HardwareAccelerationSupported">
            <summary>The renderer is able to use hardware acceleration.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.NoSampleRenderer.InterfaceConsts.HardwareAccelerationSupportMask">
            <summary>A mask to apply to <c>Capabilities</c> to obtain <c>HardwareAccelerationSupport</c> only.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.NoSampleRenderer.InterfaceConsts.ModeSupportMask">
            <summary>A mask to apply to <c>Capabilities</c> to obtain <c>DecoderSupport</c> only.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.NoSampleRenderer.InterfaceConsts.TunnelingNotSupported">
            <summary>The <c>Renderer</c> does not support tunneled output.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.NoSampleRenderer.InterfaceConsts.TunnelingSupported">
            <summary>The <c>Renderer</c> supports tunneled output.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.NoSampleRenderer.InterfaceConsts.TunnelingSupportMask">
            <summary>A mask to apply to <c>Capabilities</c> to obtain <c>TunnelingSupport</c> only.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.NoSampleRenderer.Configuration">
            <summary>Returns the configuration set when the renderer was most recently enabled, or <c>null</c> if
            the renderer has never been enabled.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.NoSampleRenderer.Index">
            <summary>Returns the index of the renderer within the player.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.NoSampleRenderer.OnDisabled">
            <summary>Called when the renderer is disabled.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.NoSampleRenderer.OnEnabled(System.Boolean)">
            <param name="joining">Whether this renderer is being enabled to join an ongoing playback.</param>
            <summary>Called when the renderer is enabled.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.NoSampleRenderer.OnPositionReset(System.Int64,System.Boolean)">
            <param name="positionUs">The new playback position in microseconds.</param>
            <param name="joining">Whether this renderer is being enabled to join an ongoing playback.</param>
            <summary>Called when the position is reset.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.NoSampleRenderer.OnRendererOffsetChanged(System.Int64)">
            <param name="offsetUs">The offset that should be subtracted from <c>positionUs</c> in <c>#render(long, long)</c> to get the playback position with respect to the media.</param>
            <summary>Called when the renderer's offset has been changed.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.NoSampleRenderer.OnReset">
            <summary>Called when the renderer is reset.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.NoSampleRenderer.OnStarted">
            <summary>Called when the renderer is started.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.NoSampleRenderer.OnStopped">
            <summary>Called when the renderer is stopped.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.NoSampleRenderer.Render(System.Int64,System.Int64)">
            <param name="positionUs">The current media time in microseconds, measured at the start of the current
                iteration of the rendering loop.</param>
            <param name="elapsedRealtimeUs">
              <c>android.os.SystemClock#elapsedRealtime()</c> in microseconds,
                measured at the start of the current iteration of the rendering loop.</param>
            <summary>Incrementally renders the <c>SampleStream</c>.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.NoSampleRendererInvoker.Render(System.Int64,System.Int64)">
            <param name="positionUs">The current media time in microseconds, measured at the start of the current
                iteration of the rendering loop.</param>
            <param name="elapsedRealtimeUs">
              <c>android.os.SystemClock#elapsedRealtime()</c> in microseconds,
                measured at the start of the current iteration of the rendering loop.</param>
            <summary>Incrementally renders the <c>SampleStream</c>.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.NoSampleRendererInvoker.Name">
            <summary>Returns the name of the <c>Renderer</c>.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Offline.DefaultDownloaderFactory">
            <summary>Default <c>DownloaderFactory</c>, supporting creation of progressive, DASH, HLS and
            SmoothStreaming downloaders.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Offline.DefaultDownloadIndex">
            <summary>A <c>DownloadIndex</c> that uses SQLite to persist <c>Download Downloads</c>.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Offline.Download">
            <summary>Represents state of a download.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Offline.Download.ContentLength">
            <summary>The total size of the content in bytes, or <c>C#LENGTH_UNSET</c> if unknown.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Offline.Download.FailureReason">
            <summary>If <c>#state</c> is <c>#STATE_FAILED</c> then this is the cause, otherwise <c>#FAILURE_REASON_NONE</c>.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Offline.Download.FailureReasonNone">
            <summary>The download isn't failed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Offline.Download.FailureReasonUnknown">
            <summary>The download is failed because of unknown reason.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Offline.Download.Request">
            <summary>The download request.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Offline.Download.StartTimeMs">
            <summary>The first time when download entry is created.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Offline.Download.State">
            <summary>The state of the download.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Offline.Download.StateCompleted">
            <summary>The download completed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Offline.Download.StateDownloading">
            <summary>The download is currently started.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Offline.Download.StateFailed">
            <summary>The download failed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Offline.Download.StateQueued">
            <summary>The download is waiting to be started.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Offline.Download.StateRemoving">
            <summary>The download is being removed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Offline.Download.StateRestarting">
            <summary>The download will restart after all downloaded data is removed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Offline.Download.StateStopped">
            <summary>The download is stopped for a specified <c>#stopReason</c>.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Offline.Download.StopReason">
            <summary>The reason the download is stopped, or <c>#STOP_REASON_NONE</c>.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Offline.Download.StopReasonNone">
            <summary>The download isn't stopped.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Offline.Download.UpdateTimeMs">
            <summary>The last update time.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Offline.Download.BytesDownloaded">
            <summary>Returns the total number of downloaded bytes.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Offline.Download.IsTerminalState">
            <summary>Returns whether the download is completed or failed.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Offline.Download.PercentDownloaded">
            <summary>Returns the estimated download percentage, or <c>C#PERCENTAGE_UNSET</c> if no estimate is
            available.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Offline.DownloadException">
            <summary>Thrown on an error during downloading.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Offline.DownloadException.#ctor(System.String)">
            <param name="message">The message for the exception.</param>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Offline.DownloadException.#ctor(Java.Lang.Throwable)">
            <param name="cause">The cause for the exception.</param>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Offline.DownloadHelper">
            <summary>A helper for initializing and removing downloads.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Offline.DownloadHelper.Manifest">
            <summary>Returns the manifest, or null if no manifest is loaded.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Offline.DownloadHelper.PeriodCount">
            <summary>Returns the number of periods for which media is available.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Offline.DownloadHelper.ClearTrackSelections(System.Int32)">
            <param name="periodIndex">The period index for which track selections are cleared.</param>
            <summary>Clears the selection of tracks for a period.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Offline.DownloadHelper.GetDownloadRequest(System.Byte[])">
            <param name="data">Application provided data to store in <c>DownloadRequest#data</c>.</param>
            <summary>Builds a <c>DownloadRequest</c> for downloading the selected tracks.</summary>
            <returns>The built <c>DownloadRequest</c>.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Offline.DownloadHelper.GetDownloadRequest(System.String,System.Byte[])">
            <param name="id">The unique content id.</param>
            <param name="data">Application provided data to store in <c>DownloadRequest#data</c>.</param>
            <summary>Builds a <c>DownloadRequest</c> for downloading the selected tracks.</summary>
            <returns>The built <c>DownloadRequest</c>.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Offline.DownloadHelper.GetRendererCapabilities(Com.Google.Android.Exoplayer2.IRenderersFactory)">
            <param name="renderersFactory">A <c>RenderersFactory</c>.</param>
            <summary>Extracts renderer capabilities for the renderers created by the provided renderers factory.</summary>
            <returns>The <c>RendererCapabilities</c> for each renderer created by the <c>renderersFactory</c>.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Offline.DownloadHelper.GetTrackGroups(System.Int32)">
            <param name="periodIndex">The period index.</param>
            <summary>Returns the track groups for the given period.</summary>
            <returns>The track groups for the period. May be <c>TrackGroupArray#EMPTY</c> for single stream
                content.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Offline.DownloadHelper.GetTrackSelections(System.Int32,System.Int32)">
            <param name="periodIndex">The period index.</param>
            <param name="rendererIndex">The renderer index.</param>
            <summary>Returns all <c>ExoTrackSelection track selections</c> for a period and renderer.</summary>
            <returns>A list of selected <c>ExoTrackSelection track selections</c>.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Offline.DownloadHelper.Release">
            <summary>Releases the helper and all resources it is holding.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Offline.DownloadManager">
            <summary>Manages downloads.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Offline.DownloadManager.DefaultMaxParallelDownloads">
            <summary>The default maximum number of parallel downloads.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Offline.DownloadManager.DefaultMinRetryCount">
            <summary>The default minimum number of times a download must be retried before failing.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Offline.DownloadManager.DefaultRequirements">
            <summary>The default requirement is that the device has network connectivity.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Offline.DownloadManager.CurrentDownloads">
            <summary>Returns current downloads.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Offline.DownloadManager.DownloadIndex">
            <summary>Returns the used <c>DownloadIndex</c>.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Offline.DownloadManager.DownloadsPaused">
            <summary>Returns whether downloads are currently paused.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Offline.DownloadManager.IsIdle">
            <summary>Returns whether the manager is currently idle.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Offline.DownloadManager.IsInitialized">
            <summary>Returns whether the manager has completed initialization.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Offline.DownloadManager.IsWaitingForRequirements">
            <summary>Returns whether this manager has one or more downloads that are not progressing for the sole
            reason that the <c>#getRequirements() Requirements</c> are not met.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Offline.DownloadManager.MaxParallelDownloads">
            <summary>Returns the maximum number of parallel downloads. -or- Sets the maximum number of parallel downloads.</summary>
            <param name="maxParallelDownloads">The maximum number of parallel downloads. Must be greater than 0.</param>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Offline.DownloadManager.MinRetryCount">
            <summary>Returns the minimum number of times that a download will be retried. -or- Sets the minimum number of times that a download will be retried.</summary>
            <param name="minRetryCount">The minimum number of times that a download will be retried.</param>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Offline.DownloadManager.NotMetRequirements">
            <summary>Returns the requirements needed for downloads to progress that are not currently met.</summary>
            <returns>The not met <c>Requirements.RequirementFlags</c>, or 0 if all requirements are met.</returns>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Offline.DownloadManager.Requirements">
            <summary>Returns the requirements needed to be met to progress. -or- Sets the requirements that need to be met for downloads to progress.</summary>
            <param name="requirements">A <c>Requirements</c>.</param>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Offline.DownloadManager.AddDownload(Com.Google.Android.Exoplayer2.Offline.DownloadRequest)">
            <param name="request">The download request.</param>
            <summary>Adds a download defined by the given request.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Offline.DownloadManager.AddDownload(Com.Google.Android.Exoplayer2.Offline.DownloadRequest,System.Int32)">
            <param name="request">The download request.</param>
            <param name="stopReason">An initial stop reason for the download, or <c>Download#STOP_REASON_NONE</c>
                if the download should be started.</param>
            <summary>Adds a download defined by the given request and with the specified stop reason.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Offline.DownloadManager.PauseDownloads">
            <summary>Pauses downloads.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Offline.DownloadManager.Release">
            <summary>Stops the downloads and releases resources.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Offline.DownloadManager.RemoveAllDownloads">
            <summary>Cancels all pending downloads and removes all downloaded data.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Offline.DownloadManager.RemoveDownload(System.String)">
            <param name="id">The unique content id of the download to be started.</param>
            <summary>Cancels the download with the <c>id</c> and removes all downloaded data.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Offline.DownloadManager.ResumeDownloads">
            <summary>Resumes downloads.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Offline.DownloadManager.SetStopReason(System.String,System.Int32)">
            <param name="id">The content id of the download to update, or <c>null</c> to set the stop reason for
                all downloads.</param>
            <param name="stopReason">The stop reason, or <c>Download#STOP_REASON_NONE</c>.</param>
            <summary>Sets the stop reason for one or all downloads.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Offline.DownloadProgress">
            <summary>Mutable <c>Download</c> progress.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Offline.DownloadProgress.BytesDownloaded">
            <summary>The number of bytes that have been downloaded.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Offline.DownloadProgress.PercentDownloaded">
            <summary>The percentage that has been downloaded, or <c>C#PERCENTAGE_UNSET</c> if unknown.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Offline.DownloadRequest">
            <summary>Defines content to be downloaded.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Offline.DownloadRequest.CustomCacheKey">
            <summary>Custom key for cache indexing, or null.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Offline.DownloadRequest.Data">
            <summary>Application defined data associated with the download.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Offline.DownloadRequest.Id">
            <summary>The unique content id.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Offline.DownloadRequest.KeySetId">
            <summary>The key set id of the offline licence if the content is protected with DRM.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Offline.DownloadRequest.MimeType">
            <summary>The MIME type of this content.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Offline.DownloadRequest.CopyWithId(System.String)">
            <param name="id">The ID of the copy.</param>
            <summary>Returns a copy with the specified ID.</summary>
            <returns>The copy with the specified ID.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Offline.DownloadRequest.CopyWithKeySetId(System.Byte[])">
            <param name="keySetId">The key set ID of the copy.</param>
            <summary>Returns a copy with the specified key set ID.</summary>
            <returns>The copy with the specified key set ID.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Offline.DownloadRequest.CopyWithMergedRequest(Com.Google.Android.Exoplayer2.Offline.DownloadRequest)">
            <param name="newRequest">The request being merged.</param>
            <summary>Returns the result of merging <c>newRequest</c> into this request.</summary>
            <returns>The merged result.</returns>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Offline.DownloadService">
            <summary>A <c>Service</c> for downloading media.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Offline.DownloadService.ActionAddDownload">
            <summary>Adds a new download.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Offline.DownloadService.ActionInit">
            <summary>Starts a download service to resume any ongoing downloads.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Offline.DownloadService.ActionPauseDownloads">
            <summary>Pauses all downloads.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Offline.DownloadService.ActionRemoveAllDownloads">
            <summary>Removes all downloads.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Offline.DownloadService.ActionRemoveDownload">
            <summary>Removes a download.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Offline.DownloadService.ActionResumeDownloads">
            <summary>Resumes all downloads except those that have a non-zero <c>Download#stopReason</c>.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Offline.DownloadService.ActionSetRequirements">
            <summary>Sets the requirements that need to be met for downloads to progress.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Offline.DownloadService.ActionSetStopReason">
            <summary>Sets the stop reason for one or all downloads.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Offline.DownloadService.DefaultForegroundNotificationUpdateInterval">
            <summary>Default foreground notification update interval in milliseconds.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Offline.DownloadService.ForegroundNotificationIdNone">
            <summary>Invalid foreground notification id that can be used to run the service in the background.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Offline.DownloadService.KeyContentId">
            <summary>Key for the <c>String</c> content id in <c>#ACTION_SET_STOP_REASON</c> and <c>#ACTION_REMOVE_DOWNLOAD</c> intents.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Offline.DownloadService.KeyDownloadRequest">
            <summary>Key for the <c>DownloadRequest</c> in <c>#ACTION_ADD_DOWNLOAD</c> intents.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Offline.DownloadService.KeyForeground">
            <summary>Key for a boolean extra that can be set on any intent to indicate whether the service was
            started in the foreground.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Offline.DownloadService.KeyRequirements">
            <summary>Key for the <c>Requirements</c> in <c>#ACTION_SET_REQUIREMENTS</c> intents.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Offline.DownloadService.KeyStopReason">
            <summary>Key for the integer stop reason in <c>#ACTION_SET_STOP_REASON</c> and <c>#ACTION_ADD_DOWNLOAD</c> intents.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Offline.DownloadService.#ctor(System.Int32)">
            <param name="foregroundNotificationId">The notification id for the foreground notification, or <c>#FOREGROUND_NOTIFICATION_ID_NONE</c> if the service should only ever run in the background.</param>
            <summary>Creates a DownloadService.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Offline.DownloadService.#ctor(System.Int32,System.Int64)">
            <param name="foregroundNotificationId">The notification id for the foreground notification, or <c>#FOREGROUND_NOTIFICATION_ID_NONE</c> if the service should only ever run in the background.</param>
            <param name="foregroundNotificationUpdateInterval">The maximum interval between updates to the
                foreground notification, in milliseconds. Ignored if <c>foregroundNotificationId</c> is
                <c>#FOREGROUND_NOTIFICATION_ID_NONE</c>.</param>
            <summary>Creates a DownloadService.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Offline.DownloadService.#ctor(System.Int32,System.Int64,System.String,System.Int32,System.Int32)">
            <param name="foregroundNotificationId">The notification id for the foreground notification, or <c>#FOREGROUND_NOTIFICATION_ID_NONE</c> if the service should only ever run in the background.</param>
            <param name="foregroundNotificationUpdateInterval">The maximum interval between updates to the
                foreground notification, in milliseconds. Ignored if <c>foregroundNotificationId</c> is
                <c>#FOREGROUND_NOTIFICATION_ID_NONE</c>.</param>
            <param name="channelId">An id for a low priority notification channel to create, or <c>null</c> if
                the app will take care of creating a notification channel if needed. If specified, must be
                unique per package. The value may be truncated if it's too long. Ignored if <c>foregroundNotificationId</c> is <c>#FOREGROUND_NOTIFICATION_ID_NONE</c>.</param>
            <param name="channelNameResourceId">A string resource identifier for the user visible name of the
                notification channel. The recommended maximum length is 40 characters. The value may be
                truncated if it's too long. Ignored if <c>channelId</c> is null or if <c>foregroundNotificationId</c> is <c>#FOREGROUND_NOTIFICATION_ID_NONE</c>.</param>
            <param name="channelDescriptionResourceId">A string resource identifier for the user visible
                description of the notification channel, or 0 if no description is provided. The
                recommended maximum length is 300 characters. The value may be truncated if it is too long.
                Ignored if <c>channelId</c> is null or if <c>foregroundNotificationId</c> is <c>#FOREGROUND_NOTIFICATION_ID_NONE</c>.</param>
            <summary>Creates a DownloadService.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Offline.DownloadService.InvalidateForegroundNotification">
            <summary>Invalidates the current foreground notification and causes <c>#getForegroundNotification(List, int)</c> to be invoked again if the service isn't stopped.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Offline.DownloadServiceInvoker.DownloadManager">
            <summary>Returns a <c>DownloadManager</c> to be used to downloaded content.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Offline.DownloadServiceInvoker.Scheduler">
            <summary>Returns a <c>Scheduler</c> to restart the service when requirements for downloads to continue
            are met.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Offline.FilteringManifestParser">
            <param name="&lt;T&gt;&lt;T&gt;">The <c>FilterableManifest</c> type.</param>
            <summary>A manifest parser that includes only the streams identified by the given stream keys.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Offline.IDownloadCursor">
            <summary>Provides random read-write access to the result set returned by a database query.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Offline.IDownloadCursor.IsAfterLast">
            <summary>Returns whether the cursor is pointing to the position after the last download.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Offline.IDownloadCursor.IsBeforeFirst">
            <summary>Returns whether the cursor is pointing to the position before the first download.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Offline.IDownloadCursor.IsFirst">
            <summary>Returns whether the cursor is pointing to the first download.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Offline.IDownloadCursor.IsLast">
            <summary>Returns whether the cursor is pointing to the last download.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Offline.IDownloadCursor.MoveToPosition(System.Int32)">
            <param name="position">the zero-based position to move to.</param>
            <summary>Move the cursor to an absolute position.</summary>
            <returns>whether the requested move fully succeeded.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Offline.IDownloadCursor.MoveToFirst">
            <summary>Move the cursor to the first download.</summary>
            <returns>whether the move succeeded.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Offline.IDownloadCursor.MoveToLast">
            <summary>Move the cursor to the last download.</summary>
            <returns>whether the move succeeded.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Offline.IDownloadCursor.MoveToNext">
            <summary>Move the cursor to the next download.</summary>
            <returns>whether the move succeeded.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Offline.IDownloadCursor.MoveToPrevious">
            <summary>Move the cursor to the previous download.</summary>
            <returns>whether the move succeeded.</returns>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Offline.IDownloader">
            <summary>Downloads and removes a piece of content.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Offline.IDownloader.Cancel">
            <summary>Permanently cancels the downloading by this downloader.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Offline.IDownloader.Remove">
            <summary>Removes the content.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Offline.IDownloaderFactory">
            <summary>Creates <c>Downloader Downloaders</c> for given <c>DownloadRequest DownloadRequests</c>.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Offline.IDownloaderFactory.CreateDownloader(Com.Google.Android.Exoplayer2.Offline.DownloadRequest)">
            <param name="request">The download request.</param>
            <summary>Creates a <c>Downloader</c> to perform the given <c>DownloadRequest</c>.</summary>
            <returns>The downloader.</returns>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Offline.IDownloadIndex">
            <summary>An index of <c>Download Downloads</c>.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Offline.IDownloadIndex.GetDownload(System.String)">
            <param name="id">ID of a <c>Download</c>.</param>
            <summary>Returns the <c>Download</c> with the given <c>id</c>, or null.</summary>
            <returns>The <c>Download</c> with the given <c>id</c>, or null if a download state with this
                id doesn't exist.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Offline.IDownloadIndex.GetDownloads(System.Int32[])">
            <param name="states">Returns only the <c>Download</c>s with this states. If empty, returns all.</param>
            <summary>Returns a <c>DownloadCursor</c> to <c>Download</c>s with the given <c>states</c>.</summary>
            <returns>A cursor to <c>Download</c>s with the given <c>states</c>.</returns>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Offline.IFilterableManifest">
            <param name="&lt;T&gt;&lt;T&gt;">The manifest type.</param>
            <summary>A manifest that can generate copies of itself including only the streams specified by the given
            keys.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Offline.IWritableDownloadIndex">
            <summary>A writable index of <c>Download Downloads</c>.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Offline.IWritableDownloadIndex.PutDownload(Com.Google.Android.Exoplayer2.Offline.Download)">
            <param name="download">The <c>Download</c> to be added.</param>
            <summary>Adds or replaces a <c>Download</c>.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Offline.IWritableDownloadIndex.RemoveDownload(System.String)">
            <param name="id">The ID of the download to remove.</param>
            <summary>Removes the download with the given ID.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Offline.IWritableDownloadIndex.SetDownloadingStatesToQueued">
            <summary>Sets all <c>Download#STATE_DOWNLOADING</c> states to <c>Download#STATE_QUEUED</c>.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Offline.IWritableDownloadIndex.SetStatesToRemoving">
            <summary>Sets all states to <c>Download#STATE_REMOVING</c>.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Offline.IWritableDownloadIndex.SetStopReason(System.Int32)">
            <param name="stopReason">The stop reason.</param>
            <summary>Sets the stop reason of the downloads in a terminal state (<c>Download#STATE_COMPLETED</c>,
            <c>Download#STATE_FAILED</c>).</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Offline.IWritableDownloadIndex.SetStopReason(System.String,System.Int32)">
            <param name="id">The ID of the download to update.</param>
            <param name="stopReason">The stop reason.</param>
            <summary>Sets the stop reason of the download with the given ID in a terminal state (<c>Download#STATE_COMPLETED</c>, <c>Download#STATE_FAILED</c>).</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Offline.ProgressiveDownloader">
            <summary>A downloader for progressive media streams.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Offline.SegmentDownloader">
            <param name="&lt;M&gt;&lt;M&gt;">The type of the manifest object.</param>
            <summary>Base class for multi segment stream downloaders.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.PlayerMessage">
            <summary>Defines a player message which can be sent with a <c>Sender</c> and received by a <c>Target</c>.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.PlayerMessage.DeleteAfterDelivery">
            <summary>Returns whether the message will be deleted after delivery.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.PlayerMessage.IsCanceled">
            <summary>Returns whether the message delivery has been canceled.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.PlayerMessage.MediaItemIndex">
            <summary>Returns media item index at which the message will be delivered.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.PlayerMessage.Payload">
            <summary>Returns the message payload forwarded to <c>Target#handleMessage(int, Object)</c>.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.PlayerMessage.PositionMs">
            <summary>Returns position in the media item at <c>#getMediaItemIndex()</c> at which the message will be
            delivered, in milliseconds.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.PlayerMessage.Type">
            <summary>Returns the message type forwarded to <c>Target#handleMessage(int, Object)</c>.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.PlayerMessage.BlockUntilDelivered">
            <summary>Blocks until after the message has been delivered or the player is no longer able to deliver
            the message.</summary>
            <returns>Whether the message was delivered successfully.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.PlayerMessage.BlockUntilDelivered(System.Int64)">
            <param name="timeoutMs">The timeout in milliseconds.</param>
            <summary>Blocks until after the message has been delivered or the player is no longer able to deliver
            the message or the specified timeout elapsed.</summary>
            <returns>Whether the message was delivered successfully.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.PlayerMessage.Cancel">
            <summary>Cancels the message delivery.</summary>
            <returns>This message.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.PlayerMessage.MarkAsProcessed(System.Boolean)">
            <param name="isDelivered">Whether the message has been delivered to its target. The message is
                considered as being delivered when this method has been called with <c>isDelivered</c> set
                to true at least once.</param>
            <summary>Marks the message as processed.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.PlayerMessage.Send">
            <summary>Sends the message.</summary>
            <returns>This message.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.PlayerMessage.SetDeleteAfterDelivery(System.Boolean)">
            <param name="deleteAfterDelivery">Whether the message is deleted after delivery.</param>
            <summary>Sets whether the message will be deleted after delivery.</summary>
            <returns>This message.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.PlayerMessage.SetPayload(Java.Lang.Object)">
            <param name="payload">The message payload.</param>
            <summary>Sets the message payload forwarded to <c>Target#handleMessage(int, Object)</c>.</summary>
            <returns>This message.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.PlayerMessage.SetPosition(System.Int32,System.Int64)">
            <param name="mediaItemIndex">The index of the media item at which the message will be sent.</param>
            <param name="positionMs">The position in the media item with index <c>mediaItemIndex</c> at which the
                message will be sent, in milliseconds, or <c>C#TIME_END_OF_SOURCE</c> to deliver the
                message at the end of the media item with index <c>mediaItemIndex</c>.</param>
            <summary>Sets a position in a media item at which the message will be delivered.</summary>
            <returns>This message.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.PlayerMessage.SetPosition(System.Int64)">
            <param name="positionMs">The position in the current media item at which the message will be sent, in
                milliseconds, or <c>C#TIME_END_OF_SOURCE</c> to deliver the message at the end of the
                current media item.</param>
            <summary>Sets a position in the current media item at which the message will be delivered.</summary>
            <returns>This message.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.PlayerMessage.SetType(System.Int32)">
            <param name="messageType">The message type.</param>
            <summary>Sets the message type forwarded to <c>Target#handleMessage(int, Object)</c>.</summary>
            <returns>This message.</returns>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.RendererConfiguration">
            <summary>The configuration of a <c>Renderer</c>.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.RendererConfiguration.Default">
            <summary>The default configuration.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.RendererConfiguration.Tunneling">
            <summary>Whether to enable tunneling.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.RendererConfiguration.#ctor(System.Boolean)">
            <param name="tunneling">Whether to enable tunneling.</param>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Scheduler.IScheduler">
            <summary>Schedules a service to be started in the foreground when some <c>Requirements</c> are met.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Scheduler.IScheduler.Cancel">
            <summary>Cancels anything that was previously scheduled, or else does nothing.</summary>
            <returns>Whether cancellation was successful.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Scheduler.IScheduler.GetSupportedRequirements(Com.Google.Android.Exoplayer2.Scheduler.Requirements)">
            <param name="requirements">The requirements to check.</param>
            <summary>Checks whether this <c>Scheduler</c> supports the provided <c>Requirements</c>.</summary>
            <returns>The supported requirements.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Scheduler.IScheduler.Schedule(Com.Google.Android.Exoplayer2.Scheduler.Requirements,System.String,System.String)">
            <param name="requirements">The requirements.</param>
            <param name="servicePackage">The package name.</param>
            <param name="serviceAction">The action with which the service will be started.</param>
            <summary>Schedules a service to be started in the foreground when some <c>Requirements</c> are met.</summary>
            <returns>Whether scheduling was successful.</returns>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Scheduler.PlatformScheduler">
            <summary>A <c>Scheduler</c> that uses <c>JobScheduler</c>.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Scheduler.Requirements">
            <summary>Defines a set of device state requirements.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Scheduler.Requirements.DeviceCharging">
            <summary>Requirement that the device is charging.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Scheduler.Requirements.DeviceIdle">
            <summary>Requirement that the device is idle.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Scheduler.Requirements.DeviceStorageNotLow">
            <summary>Requirement that the device's &lt;em&gt;internal&lt;/em&gt; storage is not low.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Scheduler.Requirements.Network">
            <summary>Requirement that the device has network connectivity.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Scheduler.Requirements.NetworkUnmetered">
            <summary>Requirement that the device has a network connection that is unmetered.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Scheduler.Requirements.#ctor(System.Int32)">
            <param name="requirements">A combination of requirement flags.</param>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Scheduler.Requirements.IsChargingRequired">
            <summary>Returns whether the device is required to be charging.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Scheduler.Requirements.IsIdleRequired">
            <summary>Returns whether the device is required to be idle.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Scheduler.Requirements.IsNetworkRequired">
            <summary>Returns whether network connectivity is required.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Scheduler.Requirements.IsStorageNotLowRequired">
            <summary>Returns whether the device is required to not be low on &lt;em&gt;internal&lt;/em&gt; storage.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Scheduler.Requirements.IsUnmeteredNetworkRequired">
            <summary>Returns whether un-metered network connectivity is required.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Scheduler.Requirements.FilterRequirements(System.Int32)">
            <param name="requirementsFilter">The enabled <c>RequirementFlags</c>.</param>
            <summary>Filters the requirements, returning the subset that are enabled by the provided filter.</summary>
            <returns>The filtered requirements. If the filter does not cause a change in the requirements
                then this instance will be returned.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Scheduler.Requirements.GetRequirements">
            <summary>Returns the requirements.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Scheduler.RequirementsWatcher">
            <summary>Watches whether the <c>Requirements</c> are met and notifies the <c>Listener</c> on changes.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Scheduler.RequirementsWatcher.Requirements">
            <summary>Returns watched <c>Requirements</c>.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Scheduler.RequirementsWatcher.Start">
            <summary>Starts watching for changes.</summary>
            <returns>Initial <c>Requirements.RequirementFlags RequirementFlags</c> that are not met, or 0.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Scheduler.RequirementsWatcher.Stop">
            <summary>Stops watching for changes.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.SeekParameters">
            <summary>Parameters that apply to seeking.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.SeekParameters.ClosestSync">
            <summary>Parameters for seeking to the closest sync point.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.SeekParameters.Default">
            <summary>Default parameters.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.SeekParameters.Exact">
            <summary>Parameters for exact seeking.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.SeekParameters.NextSync">
            <summary>Parameters for seeking to the sync point immediately after a requested seek position.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.SeekParameters.PreviousSync">
            <summary>Parameters for seeking to the sync point immediately before a requested seek position.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.SeekParameters.ToleranceAfterUs">
            <summary>The maximum time that the actual position seeked to may exceed the requested seek position, in
            microseconds.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.SeekParameters.ToleranceBeforeUs">
            <summary>The maximum time that the actual position seeked to may precede the requested seek position, in
            microseconds.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.SeekParameters.#ctor(System.Int64,System.Int64)">
            <param name="toleranceBeforeUs">The maximum time that the actual position seeked to may precede the
                requested seek position, in microseconds. Must be non-negative.</param>
            <param name="toleranceAfterUs">The maximum time that the actual position seeked to may exceed the
                requested seek position, in microseconds. Must be non-negative.</param>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.SeekParameters.ResolveSeekPositionUs(System.Int64,System.Int64,System.Int64)">
            <param name="positionUs">The requested seek position, in microseocnds.</param>
            <param name="firstSyncUs">The first candidate seek point, in micrseconds.</param>
            <param name="secondSyncUs">The second candidate seek point, in microseconds. May equal <c>firstSyncUs</c> if there's only one candidate.</param>
            <summary>Resolves a seek based on the parameters, given the requested seek position and two candidate
            sync points.</summary>
            <returns>The resolved seek position, in microseconds.</returns>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.SimpleExoPlayer.InterfaceConsts.DefaultDetachSurfaceTimeoutMs">
            <summary>The default timeout for detaching a surface from the player, in milliseconds.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.SimpleExoPlayer.InterfaceConsts.DefaultReleaseTimeoutMs">
            <summary>The default timeout for calls to <c>#release</c> and <c>#setForegroundMode</c>, in
            milliseconds.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Text.ExoplayerCuesDecoder">
            <summary>A <c>SubtitleDecoder</c> that decodes subtitle samples of type <c>MimeTypes#TEXT_EXOPLAYER_CUES</c></summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Text.SubtitleDecoderFactory.Default">
            <summary>Default <c>SubtitleDecoderFactory</c> implementation.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Text.ISubtitleDecoderFactory">
            <summary>A factory for <c>SubtitleDecoder</c> instances.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Text.ISubtitleDecoderFactory.Default">
            <summary>Default <c>SubtitleDecoderFactory</c> implementation.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Text.ITextOutput">
            <summary>Receives text output.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Text.TextRenderer">
            <summary>A renderer for text.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Text.TextRenderer.SetFinalStreamEndPositionUs(System.Int64)">
            <param name="streamEndPositionUs">The position to stop rendering at or <c>C#LENGTH_UNSET</c> to
                render until the end of the current stream.</param>
            <summary>Sets the position at which to stop rendering the current stream.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Trackselection.AdaptiveTrackSelection">
            <summary>A bandwidth based adaptive <c>ExoTrackSelection</c>, whose selected track is updated to be the
            one of highest quality given the current network conditions and the state of the buffer.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Trackselection.AdaptiveTrackSelection.MinDurationToRetainAfterDiscardUs">
            <summary>Called from <c>#evaluateQueueSize(long, List)</c> to determine the minimum duration of buffer
            to retain after discarding chunks.</summary>
            <returns>The minimum duration of buffer to retain after discarding chunks, in microseconds.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Trackselection.AdaptiveTrackSelection.ShouldEvaluateQueueSize(System.Int64,System.Collections.Generic.IList{Com.Google.Android.Exoplayer2.Source.Chunk.MediaChunk})">
            <param name="nowMs">The current value of <c>Clock#elapsedRealtime()</c>.</param>
            <param name="queue">The queue of buffered <c>MediaChunk MediaChunks</c>. Must not be modified.</param>
            <summary>Called from <c>#evaluateQueueSize(long, List)</c> to determine whether an evaluation should be
            performed.</summary>
            <returns>Whether an evaluation should be performed.</returns>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Trackselection.BaseTrackSelection">
            <summary>An abstract base class suitable for most <c>ExoTrackSelection</c> implementations.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Trackselection.BaseTrackSelection.Tracks">
            <summary>The indices of the selected tracks in <c>#group</c>, in order of decreasing bandwidth.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Trackselection.BaseTrackSelection.InterfaceConsts.TypeCustomBase">
            <summary>The first value that can be used for application specific track selection types.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Trackselection.BaseTrackSelection.InterfaceConsts.TypeUnset">
            <summary>An unspecified track selection type.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Trackselection.BaseTrackSelection.UpdateSelectedTrack(System.Int64,System.Int64,System.Int64,System.Collections.Generic.IList{Com.Google.Android.Exoplayer2.Source.Chunk.MediaChunk},Com.Google.Android.Exoplayer2.Source.Chunk.IMediaChunkIterator[])">
            <param name="playbackPositionUs">The current playback position in microseconds. If playback of the
                period to which this track selection belongs has not yet started, the value will be the
                starting position in the period minus the duration of any media in previous periods still
                to be played.</param>
            <param name="bufferedDurationUs">The duration of media currently buffered from the current playback
                position, in microseconds. Note that the next load position can be calculated as <c>(playbackPositionUs + bufferedDurationUs)</c>.</param>
            <param name="availableDurationUs">The duration of media available for buffering from the current
                playback position, in microseconds, or <c>C#TIME_UNSET</c> if media can be buffered to the
                end of the current period. Note that if not set to <c>C#TIME_UNSET</c>, the position up to
                which media is available for buffering can be calculated as <c>(playbackPositionUs +
                availableDurationUs)</c>.</param>
            <param name="queue">The queue of already buffered <c>MediaChunk</c>s. Must not be modified.</param>
            <param name="mediaChunkIterators">An array of <c>MediaChunkIterator</c>s providing information about
                the sequence of upcoming media chunks for each track in the selection. All iterators start
                from the media chunk which will be loaded next if the respective track is selected. Note
                that this information may not be available for all tracks, and so some iterators may be
                empty.</param>
            <summary>Updates the selected track for sources that load media in discrete <c>MediaChunk</c>s.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Trackselection.BaseTrackSelectionInvoker.SelectedIndex">
            <summary>Returns the index of the selected track.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Trackselection.BaseTrackSelectionInvoker.SelectionData">
            <summary>Returns optional data associated with the current track selection.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Trackselection.BaseTrackSelectionInvoker.SelectionReason">
            <summary>Returns the reason for the current track selection.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Trackselection.BaseTrackSelectionInvoker.UpdateSelectedTrack(System.Int64,System.Int64,System.Int64,System.Collections.Generic.IList{Com.Google.Android.Exoplayer2.Source.Chunk.MediaChunk},Com.Google.Android.Exoplayer2.Source.Chunk.IMediaChunkIterator[])">
            <param name="playbackPositionUs">The current playback position in microseconds. If playback of the
                period to which this track selection belongs has not yet started, the value will be the
                starting position in the period minus the duration of any media in previous periods still
                to be played.</param>
            <param name="bufferedDurationUs">The duration of media currently buffered from the current playback
                position, in microseconds. Note that the next load position can be calculated as <c>(playbackPositionUs + bufferedDurationUs)</c>.</param>
            <param name="availableDurationUs">The duration of media available for buffering from the current
                playback position, in microseconds, or <c>C#TIME_UNSET</c> if media can be buffered to the
                end of the current period. Note that if not set to <c>C#TIME_UNSET</c>, the position up to
                which media is available for buffering can be calculated as <c>(playbackPositionUs +
                availableDurationUs)</c>.</param>
            <param name="queue">The queue of already buffered <c>MediaChunk</c>s. Must not be modified.</param>
            <param name="mediaChunkIterators">An array of <c>MediaChunkIterator</c>s providing information about
                the sequence of upcoming media chunks for each track in the selection. All iterators start
                from the media chunk which will be loaded next if the respective track is selected. Note
                that this information may not be available for all tracks, and so some iterators may be
                empty.</param>
            <summary>Updates the selected track for sources that load media in discrete <c>MediaChunk</c>s.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Trackselection.DefaultTrackSelector">
            <summary>A default <c>TrackSelector</c> suitable for most use cases.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Trackselection.DefaultTrackSelector.SelectionEligibilityAdaptive">
            <summary>Track is eligible for both a fixed selection and as part of an adaptive selection with multiple
            tracks.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Trackselection.DefaultTrackSelector.SelectionEligibilityFixed">
            <summary>Track is eligible for a fixed selection with one track.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Trackselection.DefaultTrackSelector.SelectionEligibilityNo">
            <summary>Track is not eligible for selection.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Trackselection.DefaultTrackSelector.IsSupported(System.Int32,System.Boolean)">
            <param name="formatSupport">
              <c>Capabilities</c>.</param>
            <param name="allowExceedsCapabilities">Whether to return true if <c>FormatSupport</c> is <c>C#FORMAT_EXCEEDS_CAPABILITIES</c>.</param>
            <summary>Returns true if the <c>FormatSupport</c> in the given <c>Capabilities</c> is <c>C#FORMAT_HANDLED</c> or if <c>allowExceedsCapabilities</c> is set and the format support is
            <c>C#FORMAT_EXCEEDS_CAPABILITIES</c>.</summary>
            <returns>True if <c>FormatSupport</c> is <c>C#FORMAT_HANDLED</c>, or if <c>allowExceedsCapabilities</c> is set and the format support is <c>C#FORMAT_EXCEEDS_CAPABILITIES</c>.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Trackselection.DefaultTrackSelector.NormalizeUndeterminedLanguageToNull(System.String)">
            <param name="language">The string.</param>
            <summary>Normalizes the input string to null if it does not define a language, or returns it otherwise.</summary>
            <returns>The string, optionally normalized to null if it does not define a language.</returns>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Trackselection.FixedTrackSelection">
            <summary>A <c>TrackSelection</c> consisting of a single track.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Trackselection.IExoTrackSelection">
            <summary>A <c>TrackSelection</c> that can change the individually selected track as a result of calling
            <c>#updateSelectedTrack(long, long, long, List, MediaChunkIterator[])</c> or <c>#evaluateQueueSize(long, List)</c>.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Trackselection.IExoTrackSelection.Blacklist(System.Int32,System.Int64)">
            <param name="index">The index of the track in the selection.</param>
            <param name="exclusionDurationMs">The duration of time for which the track should be excluded, in
                milliseconds.</param>
            <summary>Attempts to exclude the track at the specified index in the selection, making it ineligible for
            selection by calls to <c>#updateSelectedTrack(long, long, long, List,
            MediaChunkIterator[])</c> for the specified period of time.</summary>
            <returns>Whether exclusion was successful.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Trackselection.IExoTrackSelection.Disable">
            <summary>Disables this track selection.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Trackselection.IExoTrackSelection.Enable">
            <summary>Enables the track selection.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Trackselection.IExoTrackSelection.EvaluateQueueSize(System.Int64,System.Collections.Generic.IList{Com.Google.Android.Exoplayer2.Source.Chunk.MediaChunk})">
            <param name="playbackPositionUs">The current playback position in microseconds. If playback of the
                period to which this track selection belongs has not yet started, the value will be the
                starting position in the period minus the duration of any media in previous periods still
                to be played.</param>
            <param name="queue">The queue of buffered <c>MediaChunk MediaChunks</c>. Must not be modified.</param>
            <summary>Returns the number of chunks that should be retained in the queue.</summary>
            <returns>The number of chunks to retain in the queue.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Trackselection.IExoTrackSelection.IsBlacklisted(System.Int32,System.Int64)">
            <param name="index">The index of the track in the selection.</param>
            <param name="nowMs">The current time in the timebase of <c>android.os.SystemClock#elapsedRealtime()</c>.</param>
            <summary>Returns whether the track at the specified index in the selection is excluded.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Trackselection.IExoTrackSelection.OnPlaybackSpeed(System.Single)">
            <param name="playbackSpeed">The factor by which playback is sped up.</param>
            <summary>Called to notify the selection of the current playback speed.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Trackselection.IExoTrackSelection.UpdateSelectedTrack(System.Int64,System.Int64,System.Int64,System.Collections.Generic.IList{Com.Google.Android.Exoplayer2.Source.Chunk.MediaChunk},Com.Google.Android.Exoplayer2.Source.Chunk.IMediaChunkIterator[])">
            <param name="playbackPositionUs">The current playback position in microseconds. If playback of the
                period to which this track selection belongs has not yet started, the value will be the
                starting position in the period minus the duration of any media in previous periods still
                to be played.</param>
            <param name="bufferedDurationUs">The duration of media currently buffered from the current playback
                position, in microseconds. Note that the next load position can be calculated as <c>(playbackPositionUs + bufferedDurationUs)</c>.</param>
            <param name="availableDurationUs">The duration of media available for buffering from the current
                playback position, in microseconds, or <c>C#TIME_UNSET</c> if media can be buffered to the
                end of the current period. Note that if not set to <c>C#TIME_UNSET</c>, the position up to
                which media is available for buffering can be calculated as <c>(playbackPositionUs +
                availableDurationUs)</c>.</param>
            <param name="queue">The queue of already buffered <c>MediaChunk</c>s. Must not be modified.</param>
            <param name="mediaChunkIterators">An array of <c>MediaChunkIterator</c>s providing information about
                the sequence of upcoming media chunks for each track in the selection. All iterators start
                from the media chunk which will be loaded next if the respective track is selected. Note
                that this information may not be available for all tracks, and so some iterators may be
                empty.</param>
            <summary>Updates the selected track for sources that load media in discrete <c>MediaChunk</c>s.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Trackselection.IExoTrackSelection.OnDiscontinuity">
            <summary>Called to notify the selection of a position discontinuity.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Trackselection.IExoTrackSelection.OnPlayWhenReadyChanged(System.Boolean)">
            <param name="playWhenReady">Whether playback will proceed when ready.</param>
            <summary>Called to notify when the playback is paused or resumed.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Trackselection.IExoTrackSelection.OnRebuffer">
            <summary>Called to notify when a rebuffer occurred.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Trackselection.IExoTrackSelection.ShouldCancelChunkLoad(System.Int64,Com.Google.Android.Exoplayer2.Source.Chunk.Chunk,System.Collections.Generic.IList{Com.Google.Android.Exoplayer2.Source.Chunk.MediaChunk})">
            <param name="playbackPositionUs">The current playback position in microseconds. If playback of the
                period to which this track selection belongs has not yet started, the value will be the
                starting position in the period minus the duration of any media in previous periods still
                to be played.</param>
            <param name="loadingChunk">The currently loading <c>Chunk</c> that will be canceled if this method
                returns <c>true</c>.</param>
            <param name="queue">The queue of buffered <c>MediaChunk MediaChunks</c>, including the <c>loadingChunk</c> if it's a <c>MediaChunk</c>. Must not be modified.</param>
            <summary>Returns whether an ongoing load of a chunk should be canceled.</summary>
            <returns>Whether the ongoing load of <c>loadingChunk</c> should be canceled.</returns>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Trackselection.TrackSelection.TypeCustomBase">
            <summary>The first value that can be used for application specific track selection types.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Trackselection.TrackSelection.TypeUnset">
            <summary>An unspecified track selection type.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Trackselection.ITrackSelection">
            <summary>A track selection consisting of a static subset of selected tracks belonging to a <c>TrackGroup</c>.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Trackselection.ITrackSelection.TypeCustomBase">
            <summary>The first value that can be used for application specific track selection types.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Trackselection.ITrackSelection.TypeUnset">
            <summary>An unspecified track selection type.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Trackselection.ITrackSelection.GetIndexInTrackGroup(System.Int32)">
            <param name="index">The index in the selection.</param>
            <summary>Returns the index in the track group of the track at a given index in the selection.</summary>
            <returns>The index of the selected track.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Trackselection.ITrackSelection.IndexOf(System.Int32)">
            <param name="indexInTrackGroup">The index in the track group.</param>
            <summary>Returns the index in the selection of the track with the specified index in the track group.</summary>
            <returns>The index in the selection, or <c>C#INDEX_UNSET</c> if the track with the specified
                index is not part of the selection.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Trackselection.ITrackSelection.Length">
            <summary>Returns the number of tracks in the selection.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Trackselection.MappingTrackSelector">
            <summary>Base class for <c>TrackSelector</c>s that first establish a mapping between <c>TrackGroup</c>s
            and <c>Renderer</c>s, and then from that mapping create a <c>ExoTrackSelection</c> for each
            renderer.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Trackselection.RandomTrackSelection">
            <summary>An <c>ExoTrackSelection</c> whose selected track is updated randomly.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Trackselection.TrackSelectionArray">
            <summary>An array of <c>TrackSelection</c>s.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Trackselection.TrackSelectionArray.Length">
            <summary>The length of this array.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Trackselection.TrackSelectionArray.Get(System.Int32)">
            <param name="index">The index of the selection.</param>
            <summary>Returns the selection at a given index.</summary>
            <returns>The selection.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Trackselection.TrackSelectionArray.GetAll">
            <summary>Returns the selections in a newly allocated array.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Trackselection.TrackSelectionUtil">
            <summary>Track selection related utility methods.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Trackselection.TrackSelector">
            <summary>The component of an <c>ExoPlayer</c> responsible for selecting tracks to be consumed by each of
            the player's <c>Renderer</c>s.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Trackselection.TrackSelector.BandwidthMeter">
            <summary>Returns a bandwidth meter which can be used by track selections to select tracks.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Trackselection.TrackSelector.IsSetParametersSupported">
            <summary>Returns if this <c>TrackSelector</c> supports <c>#setParameters(TrackSelectionParameters)</c>.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Trackselection.TrackSelector.Invalidate">
            <summary>Calls <c>InvalidationListener#onTrackSelectionsInvalidated()</c> to invalidate all previously
            generated track selections.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Trackselection.TrackSelector.OnSelectionActivated(Java.Lang.Object)">
            <param name="info">The value of <c>TrackSelectorResult#info</c> in the activated selection.</param>
            <summary>Called by the player when a <c>TrackSelectorResult</c> previously generated by <c>#selectTracks(RendererCapabilities[], TrackGroupArray, MediaPeriodId, Timeline)</c> is activated.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Trackselection.TrackSelector.Release">
            <summary>Called by the player to release the selector.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Trackselection.TrackSelectorInvoker.OnSelectionActivated(Java.Lang.Object)">
            <param name="info">The value of <c>TrackSelectorResult#info</c> in the activated selection.</param>
            <summary>Called by the player when a <c>TrackSelectorResult</c> previously generated by <c>#selectTracks(RendererCapabilities[], TrackGroupArray, MediaPeriodId, Timeline)</c> is activated.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Trackselection.TrackSelectorResult">
            <summary>The result of a <c>TrackSelector</c> operation.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Trackselection.TrackSelectorResult.Info">
            <summary>An opaque object that will be returned to <c>TrackSelector#onSelectionActivated(Object)</c>
            should the selections be activated.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Trackselection.TrackSelectorResult.Length">
            <summary>The number of selections in the result.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Trackselection.TrackSelectorResult.RendererConfigurations">
            <summary>A <c>RendererConfiguration</c> for each renderer.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Trackselection.TrackSelectorResult.Selections">
            <summary>A <c>ExoTrackSelection</c> array containing the track selection for each renderer.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Trackselection.TrackSelectorResult.#ctor(Com.Google.Android.Exoplayer2.RendererConfiguration[],Com.Google.Android.Exoplayer2.Trackselection.IExoTrackSelection[],Java.Lang.Object)">
            <param name="rendererConfigurations">A <c>RendererConfiguration</c> for each renderer. A null entry
                indicates the corresponding renderer should be disabled.</param>
            <param name="selections">A <c>ExoTrackSelection</c> array containing the selection for each renderer.</param>
            <param name="info">An opaque object that will be returned to <c>TrackSelector#onSelectionActivated(Object)</c> should the selection be activated. May be
                <c>null</c>.</param>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Trackselection.TrackSelectorResult.IsEquivalent(Com.Google.Android.Exoplayer2.Trackselection.TrackSelectorResult)">
            <param name="other">The other <c>TrackSelectorResult</c>. May be null, in which case <c>false</c>
                will be returned.</param>
            <summary>Returns whether this result is equivalent to <c>other</c> for all renderers.</summary>
            <returns>Whether this result is equivalent to <c>other</c> for all renderers.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Trackselection.TrackSelectorResult.IsEquivalent(Com.Google.Android.Exoplayer2.Trackselection.TrackSelectorResult,System.Int32)">
            <param name="other">The other <c>TrackSelectorResult</c>. May be null, in which case <c>false</c>
                will be returned.</param>
            <param name="index">The renderer index to check for equivalence.</param>
            <summary>Returns whether this result is equivalent to <c>other</c> for the renderer at the given index.</summary>
            <returns>Whether this result is equivalent to <c>other</c> for the renderer at the specified
                index.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Trackselection.TrackSelectorResult.IsRendererEnabled(System.Int32)">
            <summary>Returns whether the renderer at the specified index is enabled.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.UI.DownloadNotificationHelper">
            <summary>Helper for creating download notifications.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Upstream.Allocation">
            <summary>An allocation within a byte array.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Upstream.Allocation.Data">
            <summary>The array containing the allocated space.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Upstream.Allocation.Offset">
            <summary>The offset of the allocated space in <c>#data</c>.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Upstream.Allocation.#ctor(System.Byte[],System.Int32)">
            <param name="data">The array containing the allocated space.</param>
            <param name="offset">The offset of the allocated space in <c>data</c>.</param>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Upstream.CachedRegionTracker">
            <summary>Utility class for efficiently tracking regions of data that are stored in a <c>Cache</c> for a
            given cache key.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Upstream.CachedRegionTracker.GetRegionEndTimeMs(System.Int64)">
            <param name="byteOffset">The byte offset in the underlying stream.</param>
            <summary>When provided with a byte offset, this method locates the cached region within which the offset
            falls, and returns the approximate end position in milliseconds of that region.</summary>
            <returns>The end position of the corresponding cache region, <c>#NOT_CACHED</c>, or <c>#CACHED_TO_END</c>.</returns>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Upstream.DefaultAllocator">
            <summary>Default implementation of <c>Allocator</c>.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Upstream.DefaultAllocator.#ctor(System.Boolean,System.Int32)">
            <param name="trimOnReset">Whether memory is freed when the allocator is reset. Should be true unless
                the allocator will be re-used by multiple player instances.</param>
            <param name="individualAllocationSize">The length of each individual <c>Allocation</c>.</param>
            <summary>Constructs an instance without creating any <c>Allocation</c>s up front.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Upstream.DefaultAllocator.#ctor(System.Boolean,System.Int32,System.Int32)">
            <param name="trimOnReset">Whether memory is freed when the allocator is reset. Should be true unless
                the allocator will be re-used by multiple player instances.</param>
            <param name="individualAllocationSize">The length of each individual <c>Allocation</c>.</param>
            <param name="initialAllocationCount">The number of allocations to create up front.</param>
            <summary>Constructs an instance with some <c>Allocation</c>s created up front.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Upstream.DefaultBandwidthMeter">
            <summary>Estimates bandwidth by listening to data transfers.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Upstream.DefaultBandwidthMeter.DefaultInitialBitrateEstimate">
            <summary>Default initial bitrate estimate used when the device is offline or the network type cannot be
            determined, in bits per second.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Upstream.DefaultBandwidthMeter.DefaultSlidingWindowMaxWeight">
            <summary>Default maximum weight for the sliding window.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Upstream.DefaultBandwidthMeter.SetNetworkTypeOverride(System.Int32)">
            <param name="networkType">The overriding network type.</param>
            <summary>Overrides the network type.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Upstream.DefaultLoadErrorHandlingPolicy">
            <summary>Default implementation of <c>LoadErrorHandlingPolicy</c>.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Upstream.DefaultLoadErrorHandlingPolicy.DefaultLocationExclusionMs">
            <summary>The default duration for which a location is excluded in milliseconds.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Upstream.DefaultLoadErrorHandlingPolicy.DefaultMinLoadableRetryCount">
            <summary>The default minimum number of times to retry loading data prior to propagating the error.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Upstream.DefaultLoadErrorHandlingPolicy.DefaultMinLoadableRetryCountProgressiveLive">
            <summary>The default minimum number of times to retry loading prior to failing for progressive live
            streams.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Upstream.DefaultLoadErrorHandlingPolicy.DefaultTrackExclusionMs">
            <summary>The default duration for which a track is excluded in milliseconds.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Upstream.DefaultLoadErrorHandlingPolicy.InterfaceConsts.FallbackTypeLocation">
            <summary>Fallback to the same resource at a different location (i.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Upstream.DefaultLoadErrorHandlingPolicy.InterfaceConsts.FallbackTypeTrack">
            <summary>Fallback to a different track (i.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Upstream.DefaultLoadErrorHandlingPolicy.#ctor">
            <summary>Creates an instance with default behavior.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Upstream.DefaultLoadErrorHandlingPolicy.#ctor(System.Int32)">
            <param name="minimumLoadableRetryCount">See <c>#getMinimumLoadableRetryCount</c>.</param>
            <summary>Creates an instance with the given value for <c>#getMinimumLoadableRetryCount(int)</c>.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Upstream.DefaultLoadErrorHandlingPolicy.GetMinimumLoadableRetryCount(System.Int32)">
            <summary>See <c>#DefaultLoadErrorHandlingPolicy()</c> and <c>#DefaultLoadErrorHandlingPolicy(int)</c>
            for documentation about the behavior of this method.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Upstream.DefaultLoadErrorHandlingPolicy.IsEligibleForFallback(Java.IO.IOException)">
            <summary>Returns whether an error should trigger a fallback if possible.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Upstream.IAllocator">
            <summary>A source of allocations.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Upstream.IAllocator.Allocate">
            <summary>Obtain an <c>Allocation</c>.</summary>
            <returns>The <c>Allocation</c>.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Upstream.IAllocator.Release(Com.Google.Android.Exoplayer2.Upstream.Allocation)">
            <param name="allocation">The <c>Allocation</c> being released.</param>
            <summary>Releases an <c>Allocation</c> back to the allocator.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Upstream.IAllocator.Trim">
            <summary>Hints to the allocator that it should make a best effort to release any excess <c>Allocation Allocations</c>.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Upstream.IBandwidthMeter">
            <summary>Provides estimates of the currently available bandwidth.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Upstream.IBandwidthMeter.TimeToFirstByteEstimateUs">
            <summary>Returns the estimated time to first byte, in microseconds, or <c>C#TIME_UNSET</c> if no
            estimate is available.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Upstream.ILoaderErrorThrower">
            <summary>Conditionally throws errors affecting a <c>Loader</c>.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Upstream.ILoaderErrorThrower.MaybeThrowError">
            <summary>Throws a fatal error, or a non-fatal error if loading is currently backed off and the current
            <c>Loadable</c> has incurred a number of errors greater than the <c>Loader</c>s default
            minimum number of retries.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Upstream.ILoaderErrorThrower.MaybeThrowError(System.Int32)">
            <param name="minRetryCount">A minimum retry count that must be exceeded for a non-fatal error to be
                thrown. Should be non-negative.</param>
            <summary>Throws a fatal error, or a non-fatal error if loading is currently backed off and the current
            <c>Loadable</c> has incurred a number of errors greater than the specified minimum number of
            retries.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Upstream.LoadErrorHandlingPolicy.FallbackTypeLocation">
            <summary>Fallback to the same resource at a different location (i.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Upstream.LoadErrorHandlingPolicy.FallbackTypeTrack">
            <summary>Fallback to a different track (i.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Upstream.ILoadErrorHandlingPolicy">
            <summary>A policy that defines how load errors are handled.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Upstream.ILoadErrorHandlingPolicy.FallbackTypeLocation">
            <summary>Fallback to the same resource at a different location (i.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Upstream.ILoadErrorHandlingPolicy.FallbackTypeTrack">
            <summary>Fallback to a different track (i.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Upstream.ILoadErrorHandlingPolicy.GetMinimumLoadableRetryCount(System.Int32)">
            <param name="dataType">One of the <c>C C.DATA_TYPE_*</c> constants indicating the type of data being
                loaded.</param>
            <summary>Returns the minimum number of times to retry a load before a load error that can be retried may
            be considered fatal.</summary>
            <returns>The minimum number of times to retry a load before a load error that can be retried may
                be considered fatal.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Upstream.ILoadErrorHandlingPolicy.OnLoadTaskConcluded(System.Int64)">
            <summary>Called once <c>loadTaskId</c> will not be associated with any more load errors.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Upstream.ITimeToFirstByteEstimator">
            <summary>Provides an estimate of the time to first byte of a transfer.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Upstream.ITimeToFirstByteEstimator.Reset">
            <summary>Resets the estimator.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Upstream.Loader">
            <summary>Manages the background loading of <c>Loadable</c>s.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Upstream.Loader.#ctor(System.String)">
            <param name="threadNameSuffix">A name suffix for the loader's thread. This should be the name of the
                component using the loader.</param>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Upstream.Loader.HasFatalError">
            <summary>Whether the last call to <c>#startLoading</c> resulted in a fatal error.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Upstream.Loader.IsLoading">
            <summary>Returns whether the loader is currently loading.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Upstream.Loader.CancelLoading">
            <summary>Cancels the current load.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Upstream.Loader.ClearFatalError">
            <summary>Clears any stored fatal error.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Upstream.Loader.Release">
            <summary>Releases the loader.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Upstream.ParsingLoadable">
            <param name="&lt;T&gt;&lt;T&gt;">The type of the object being loaded.</param>
            <summary>A <c>Loadable</c> for objects that can be parsed from binary data using a <c>Parser</c>.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Upstream.ParsingLoadable.LoadTaskId">
            <summary>Identifies the load task for this loadable.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Upstream.ParsingLoadable.Type">
            <summary>The type of the data.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Upstream.ParsingLoadable.ResponseHeaders">
            <summary>Returns the response headers associated with the load.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Upstream.ParsingLoadable.Result">
            <summary>Returns the loaded object, or null if an object has not been loaded.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Upstream.ParsingLoadable.BytesLoaded">
            <summary>Returns the number of bytes loaded.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Upstream.SlidingPercentile">
            <summary>Calculate any percentile over a sliding window of weighted values.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Upstream.SlidingPercentile.#ctor(System.Int32)">
            <param name="maxWeight">The maximum weight.</param>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Upstream.SlidingPercentile.AddSample(System.Int32,System.Single)">
            <param name="weight">The weight of the new observation.</param>
            <param name="value">The value of the new observation.</param>
            <summary>Adds a new weighted value.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Upstream.SlidingPercentile.GetPercentile(System.Single)">
            <param name="percentile">The desired percentile, expressed as a fraction in the range (0,1].</param>
            <summary>Computes a percentile by integration.</summary>
            <returns>The requested percentile value or <c>Float#NaN</c> if no samples have been added.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Upstream.SlidingPercentile.Reset">
            <summary>Resets the sliding percentile.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Util.DebugTextViewHelper">
            <summary>A helper class for periodically updating a <c>TextView</c> with debug information obtained from
            an <c>ExoPlayer</c>.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Util.DebugTextViewHelper.AudioString">
            <summary>Returns a string containing audio debugging information.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Util.DebugTextViewHelper.DebugString">
            <summary>Returns the debugging information string to be shown by the target <c>TextView</c>.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Util.DebugTextViewHelper.PlayerStateString">
            <summary>Returns a string containing player state debugging information.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Util.DebugTextViewHelper.VideoString">
            <summary>Returns a string containing video debugging information.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Util.DebugTextViewHelper.Start">
            <summary>Starts periodic updates of the <c>TextView</c>.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Util.DebugTextViewHelper.Stop">
            <summary>Stops periodic updates of the <c>TextView</c>.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Util.EventLogger">
            <summary>Logs events from <c>Player</c> and other core components using <c>Log</c>.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Util.EventLogger.InterfaceConsts.EventAudioAttributesChanged">
            <summary>Audio attributes changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Util.EventLogger.InterfaceConsts.EventAudioCodecError">
            <summary>The audio codec encountered an error.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Util.EventLogger.InterfaceConsts.EventAudioDecoderInitialized">
            <summary>An audio renderer created a decoder.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Util.EventLogger.InterfaceConsts.EventAudioDecoderReleased">
            <summary>An audio renderer released a decoder.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Util.EventLogger.InterfaceConsts.EventAudioDisabled">
            <summary>An audio renderer was disabled.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Util.EventLogger.InterfaceConsts.EventAudioEnabled">
            <summary>An audio renderer was enabled.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Util.EventLogger.InterfaceConsts.EventAudioInputFormatChanged">
            <summary>The format consumed by an audio renderer changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Util.EventLogger.InterfaceConsts.EventAudioPositionAdvancing">
            <summary>The audio position has increased for the first time since the last pause or position reset.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Util.EventLogger.InterfaceConsts.EventAudioSessionId">
            <summary>An audio session id was set.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Util.EventLogger.InterfaceConsts.EventAudioSinkError">
            <summary>The audio sink encountered a non-fatal error.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Util.EventLogger.InterfaceConsts.EventAudioUnderrun">
            <summary>An audio underrun occurred.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Util.EventLogger.InterfaceConsts.EventAvailableCommandsChanged">
            <summary>
              <c>Player#getAvailableCommands()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Util.EventLogger.InterfaceConsts.EventBandwidthEstimate">
            <summary>The bandwidth estimate has been updated.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Util.EventLogger.InterfaceConsts.EventCues">
            <summary>
              <c>Player#getCurrentCues()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Util.EventLogger.InterfaceConsts.EventDeviceInfoChanged">
            <summary>
              <c>Player#getDeviceInfo()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Util.EventLogger.InterfaceConsts.EventDeviceVolumeChanged">
            <summary>
              <c>Player#getDeviceVolume()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Util.EventLogger.InterfaceConsts.EventDownstreamFormatChanged">
            <summary>The downstream format sent to renderers changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Util.EventLogger.InterfaceConsts.EventDrmKeysLoaded">
            <summary>DRM keys were loaded.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Util.EventLogger.InterfaceConsts.EventDrmKeysRemoved">
            <summary>DRM keys were removed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Util.EventLogger.InterfaceConsts.EventDrmKeysRestored">
            <summary>DRM keys were restored.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Util.EventLogger.InterfaceConsts.EventDrmSessionAcquired">
            <summary>A DRM session has been acquired.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Util.EventLogger.InterfaceConsts.EventDrmSessionManagerError">
            <summary>A non-fatal DRM session manager error occurred.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Util.EventLogger.InterfaceConsts.EventDrmSessionReleased">
            <summary>A DRM session has been released.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Util.EventLogger.InterfaceConsts.EventDroppedVideoFrames">
            <summary>Video frames have been dropped.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Util.EventLogger.InterfaceConsts.EventIsPlayingChanged">
            <summary>
              <c>Player#isPlaying()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Util.EventLogger.InterfaceConsts.EventLoadCanceled">
            <summary>A source canceled loading data.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Util.EventLogger.InterfaceConsts.EventLoadCompleted">
            <summary>A source started completed loading data.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Util.EventLogger.InterfaceConsts.EventLoadError">
            <summary>A source had a non-fatal error loading data.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Util.EventLogger.InterfaceConsts.EventLoadStarted">
            <summary>A source started loading data.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Util.EventLogger.InterfaceConsts.EventMaxSeekToPreviousPositionChanged">
            <summary>
              <c>Player#getMaxSeekToPreviousPosition()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Util.EventLogger.InterfaceConsts.EventMediaItemTransition">
            <summary>
              <c>Player#getCurrentMediaItem()</c> changed or the player started repeating the current item.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Util.EventLogger.InterfaceConsts.EventMediaMetadataChanged">
            <summary>
              <c>Player#getMediaMetadata()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Util.EventLogger.InterfaceConsts.EventMetadata">
            <summary>Metadata associated with the current playback time was reported.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Util.EventLogger.InterfaceConsts.EventPlaybackParametersChanged">
            <summary>
              <c>Player#getPlaybackParameters()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Util.EventLogger.InterfaceConsts.EventPlaybackStateChanged">
            <summary>
              <c>Player#getPlaybackState()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Util.EventLogger.InterfaceConsts.EventPlaybackSuppressionReasonChanged">
            <summary>
              <c>Player#getPlaybackSuppressionReason()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Util.EventLogger.InterfaceConsts.EventPlayerError">
            <summary>
              <c>Player#getPlayerError()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Util.EventLogger.InterfaceConsts.EventPlayerReleased">
            <summary>The player was released.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Util.EventLogger.InterfaceConsts.EventPlaylistMetadataChanged">
            <summary>
              <c>Player#getPlaylistMetadata()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Util.EventLogger.InterfaceConsts.EventPlayWhenReadyChanged">
            <summary>
              <c>Player#getPlayWhenReady()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Util.EventLogger.InterfaceConsts.EventPositionDiscontinuity">
            <summary>A position discontinuity occurred.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Util.EventLogger.InterfaceConsts.EventRenderedFirstFrame">
            <summary>The first frame has been rendered since setting the surface, since the renderer was reset or
            since the stream changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Util.EventLogger.InterfaceConsts.EventRepeatModeChanged">
            <summary>
              <c>Player#getRepeatMode()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Util.EventLogger.InterfaceConsts.EventSeekBackIncrementChanged">
            <summary>
              <c>Player#getSeekBackIncrement()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Util.EventLogger.InterfaceConsts.EventSeekForwardIncrementChanged">
            <summary>
              <c>Player#getSeekForwardIncrement()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Util.EventLogger.InterfaceConsts.EventShuffleModeEnabledChanged">
            <summary>
              <c>Player#getShuffleModeEnabled()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Util.EventLogger.InterfaceConsts.EventSkipSilenceEnabledChanged">
            <summary>Skipping silences was enabled or disabled in the audio stream.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Util.EventLogger.InterfaceConsts.EventSurfaceSizeChanged">
            <summary>The surface size changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Util.EventLogger.InterfaceConsts.EventTimelineChanged">
            <summary>
              <c>Player#getCurrentTimeline()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Util.EventLogger.InterfaceConsts.EventTracksChanged">
            <summary>
              <c>Player#getCurrentTracks()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Util.EventLogger.InterfaceConsts.EventTrackSelectionParametersChanged">
            <summary>
              <c>Player#getTrackSelectionParameters()</c> changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Util.EventLogger.InterfaceConsts.EventUpstreamDiscarded">
            <summary>Data was removed from the end of the media buffer.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Util.EventLogger.InterfaceConsts.EventVideoCodecError">
            <summary>The video codec encountered an error.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Util.EventLogger.InterfaceConsts.EventVideoDecoderInitialized">
            <summary>A video renderer created a decoder.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Util.EventLogger.InterfaceConsts.EventVideoDecoderReleased">
            <summary>A video renderer released a decoder.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Util.EventLogger.InterfaceConsts.EventVideoDisabled">
            <summary>A video renderer was disabled.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Util.EventLogger.InterfaceConsts.EventVideoEnabled">
            <summary>A video renderer was enabled.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Util.EventLogger.InterfaceConsts.EventVideoFrameProcessingOffset">
            <summary>Video frame processing offset data has been reported.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Util.EventLogger.InterfaceConsts.EventVideoInputFormatChanged">
            <summary>The format consumed by a video renderer changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Util.EventLogger.InterfaceConsts.EventVideoSizeChanged">
            <summary>The video size changed.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Util.EventLogger.InterfaceConsts.EventVolumeChanged">
            <summary>The volume changed.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Util.EventLogger.#ctor">
            <summary>Creates an instance.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Util.EventLogger.#ctor(Com.Google.Android.Exoplayer2.Trackselection.MappingTrackSelector)">
            <param name="trackSelector">This parameter is ignored.</param>
            <summary>Creates an instance.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Util.EventLogger.#ctor(Com.Google.Android.Exoplayer2.Trackselection.MappingTrackSelector,System.String)">
            <param name="trackSelector">This parameter is ignored.</param>
            <param name="tag">The tag used for logging.</param>
            <summary>Creates an instance.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Util.EventLogger.#ctor(System.String)">
            <param name="tag">The tag used for logging.</param>
            <summary>Creates an instance.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Util.EventLogger.Logd(System.String)">
            <param name="msg">The message to log.</param>
            <summary>Logs a debug message.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Util.EventLogger.Loge(System.String)">
            <param name="msg">The message to log.</param>
            <summary>Logs an error message.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Util.IMediaClock">
            <summary>Tracks the progression of media time.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Util.SntpClient">
            <summary>Static utility to retrieve the device time offset using SNTP.</summary>
        </member>
        <member name="F:Com.Google.Android.Exoplayer2.Util.SntpClient.DefaultNtpHost">
            <summary>The default NTP host address used to retrieve <c>#getElapsedRealtimeOffsetMs()</c>.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Util.SntpClient.ElapsedRealtimeOffsetMs">
            <summary>Returns the offset between <c>SystemClock#elapsedRealtime()</c> and the NTP server time in
            milliseconds, or <c>C#TIME_UNSET</c> if <c>#isInitialized()</c> returns false.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Util.SntpClient.IsInitialized">
            <summary>Returns whether the device time offset has already been loaded.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Util.SntpClient.NtpHost">
            <summary>Returns the NTP host address used to retrieve <c>#getElapsedRealtimeOffsetMs()</c>.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Util.StandaloneMediaClock">
            <summary>A <c>MediaClock</c> whose position advances with real time based on the playback parameters when
            started.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Util.StandaloneMediaClock.ResetPosition(System.Int64)">
            <param name="positionUs">The position to set in microseconds.</param>
            <summary>Resets the clock's position.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Util.StandaloneMediaClock.Start">
            <summary>Starts the clock.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Util.StandaloneMediaClock.Stop">
            <summary>Stops the clock.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Video.DecoderVideoRenderer">
            <summary>Decodes and renders video using a <c>Decoder</c>.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Video.DecoderVideoRenderer.DecoderCounters">
            <summary>Decoder event counters used for debugging purposes.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Video.DecoderVideoRenderer.FlushDecoder">
            <summary>Flushes the decoder.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Video.DecoderVideoRenderer.MaybeDropBuffersToKeyframe(System.Int64)">
            <param name="positionUs">The current playback position, in microseconds.</param>
            <summary>Drops frames from the current output buffer to the next keyframe at or before the playback
            position.</summary>
            <returns>Whether any buffers were dropped.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Video.DecoderVideoRenderer.OnInputFormatChanged(Com.Google.Android.Exoplayer2.FormatHolder)">
            <param name="formatHolder">A <c>FormatHolder</c> that holds the new <c>Format</c>.</param>
            <summary>Called when a new format is read from the upstream source.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Video.DecoderVideoRenderer.OnProcessedOutputBuffer(System.Int64)">
            <param name="presentationTimeUs">The timestamp associated with the output buffer.</param>
            <summary>Called when an output buffer is successfully processed.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Video.DecoderVideoRenderer.ReleaseDecoder">
            <summary>Releases the decoder.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Video.DecoderVideoRenderer.SetDecoderOutputMode(System.Int32)">
            <param name="outputMode">Output mode.</param>
            <summary>Sets output mode of the decoder.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Video.DecoderVideoRenderer.SetOutput(Java.Lang.Object)">
            <summary>Sets the video output.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Video.DecoderVideoRenderer.ShouldDropBuffersToKeyframe(System.Int64,System.Int64)">
            <param name="earlyUs">The time until the current buffer should be presented in microseconds. A
                negative value indicates that the buffer is late.</param>
            <param name="elapsedRealtimeUs">
              <c>android.os.SystemClock#elapsedRealtime()</c> in microseconds,
                measured at the start of the current iteration of the rendering loop.</param>
            <summary>Returns whether to drop all buffers from the buffer being processed to the keyframe at or after
            the current playback position, if possible.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Video.DecoderVideoRenderer.ShouldDropOutputBuffer(System.Int64,System.Int64)">
            <param name="earlyUs">The time until the buffer should be presented in microseconds. A negative value
                indicates that the buffer is late.</param>
            <param name="elapsedRealtimeUs">
              <c>android.os.SystemClock#elapsedRealtime()</c> in microseconds,
                measured at the start of the current iteration of the rendering loop.</param>
            <summary>Returns whether the buffer being processed should be dropped.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Video.DecoderVideoRenderer.ShouldForceRenderOutputBuffer(System.Int64,System.Int64)">
            <param name="earlyUs">The time until the current buffer should be presented in microseconds. A
                negative value indicates that the buffer is late.</param>
            <param name="elapsedSinceLastRenderUs">The elapsed time since the last output buffer was rendered, in
                microseconds.</param>
            <summary>Returns whether to force rendering an output buffer.</summary>
            <returns>Returns whether to force rendering an output buffer.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Video.DecoderVideoRenderer.UpdateDroppedBufferCounters(System.Int32,System.Int32)">
            <param name="droppedInputBufferCount">The number of buffers dropped from the source before being
                passed to the decoder.</param>
            <param name="droppedDecoderBufferCount">The number of buffers dropped after being passed to the
                decoder.</param>
            <summary>Updates local counters and <c>#decoderCounters</c> to reflect that buffers were dropped.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Video.DecoderVideoRendererInvoker.SetDecoderOutputMode(System.Int32)">
            <param name="outputMode">Output mode.</param>
            <summary>Sets output mode of the decoder.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Video.DecoderVideoRendererInvoker.Name">
            <summary>Returns the name of the <c>Renderer</c>.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Video.IVideoDecoderOutputBufferRenderer">
            <summary>Renders the <c>VideoDecoderOutputBuffer</c>.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Video.IVideoFrameMetadataListener">
            <summary>A listener for metadata corresponding to video frames being rendered.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Video.IVideoRendererEventListener">
            <summary>Listener of video <c>Renderer</c> events.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Video.IVideoRendererEventListener.OnDroppedFrames(System.Int32,System.Int64)">
            <param name="count">The number of dropped frames.</param>
            <param name="elapsedMs">The duration in milliseconds over which the frames were dropped. This duration
                is timed from when the renderer was started or from when dropped frames were last reported
                (whichever was more recent), and not from when the first of the reported drops occurred.</param>
            <summary>Called to report the number of frames dropped by the renderer.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Video.IVideoRendererEventListener.OnRenderedFirstFrame(Java.Lang.Object,System.Int64)">
            <param name="output">The output of the video renderer. Normally a <c>Surface</c>, however some video
                renderers may have other output types (e.g., a <c>VideoDecoderOutputBufferRenderer</c>).</param>
            <param name="renderTimeMs">The <c>SystemClock#elapsedRealtime()</c> when the frame was rendered.</param>
            <summary>Called when a frame is rendered for the first time since setting the output, or since the
            renderer was reset, or since the stream being rendered was changed.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Video.IVideoRendererEventListener.OnVideoCodecError(Java.Lang.Exception)">
            <param name="videoCodecError">The error. Typically a <c>CodecException</c> if the renderer uses
                <c>MediaCodec</c>, or a <c>DecoderException</c> if the renderer uses a software decoder.</param>
            <summary>Called when a video decoder encounters an error.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Video.IVideoRendererEventListener.OnVideoDecoderInitialized(System.String,System.Int64,System.Int64)">
            <param name="decoderName">The decoder that was created.</param>
            <param name="initializedTimestampMs">
              <c>SystemClock#elapsedRealtime()</c> when initialization
                finished.</param>
            <param name="initializationDurationMs">The time taken to initialize the decoder in milliseconds.</param>
            <summary>Called when a decoder is created.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Video.IVideoRendererEventListener.OnVideoDecoderReleased(System.String)">
            <param name="decoderName">The decoder that was released.</param>
            <summary>Called when a decoder is released.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Video.IVideoRendererEventListener.OnVideoDisabled(Com.Google.Android.Exoplayer2.Decoder.DecoderCounters)">
            <param name="counters">
              <c>DecoderCounters</c> that were updated by the renderer.</param>
            <summary>Called when the renderer is disabled.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Video.IVideoRendererEventListener.OnVideoEnabled(Com.Google.Android.Exoplayer2.Decoder.DecoderCounters)">
            <param name="counters">
              <c>DecoderCounters</c> that will be updated by the renderer for as long as it
                remains enabled.</param>
            <summary>Called when the renderer is enabled.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Video.IVideoRendererEventListener.OnVideoFrameProcessingOffset(System.Int64,System.Int32)">
            <param name="totalProcessingOffsetUs">The sum of all video frame processing offset samples for the
                video frames processed by the renderer in microseconds.</param>
            <param name="frameCount">The number of samples included in the <c>totalProcessingOffsetUs</c>.</param>
            <summary>Called to report the video processing offset of video frames processed by the video renderer.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Video.MediaCodecVideoDecoderException">
            <summary>Thrown when a failure occurs in a <c>MediaCodec</c> video decoder.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Video.MediaCodecVideoDecoderException.IsSurfaceValid">
            <summary>Whether the surface was valid when the exception occurred.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Video.MediaCodecVideoDecoderException.SurfaceIdentityHashCode">
            <summary>The <c>System#identityHashCode(Object)</c> of the surface when the exception occurred.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Video.MediaCodecVideoRenderer">
            <summary>Decodes and renders video using <c>MediaCodec</c>.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Video.MediaCodecVideoRenderer.CodecNeedsSetOutputSurfaceWorkaround(System.String)">
            <param name="name">The name of the codec.</param>
            <summary>Returns whether the codec is known to implement <c>MediaCodec#setOutputSurface(Surface)</c>
            incorrectly.</summary>
            <returns>True if the device is known to implement <c>MediaCodec#setOutputSurface(Surface)</c>
                incorrectly.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Video.MediaCodecVideoRenderer.DropOutputBuffer(Com.Google.Android.Exoplayer2.Mediacodec.IMediaCodecAdapter,System.Int32,System.Int64)">
            <param name="codec">The codec that owns the output buffer.</param>
            <param name="index">The index of the output buffer to drop.</param>
            <param name="presentationTimeUs">The presentation time of the output buffer, in microseconds.</param>
            <summary>Drops the output buffer with the specified index.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Video.MediaCodecVideoRenderer.MaybeDropBuffersToKeyframe(System.Int64,System.Boolean)">
            <param name="positionUs">The current playback position, in microseconds.</param>
            <param name="treatDroppedBuffersAsSkipped">Whether dropped buffers should be treated as intentionally
                skipped.</param>
            <summary>Drops frames from the current output buffer to the next keyframe at or before the playback
            position.</summary>
            <returns>Whether any buffers were dropped.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Video.MediaCodecVideoRenderer.OnProcessedTunneledBuffer(System.Int64)">
            <summary>Called when a buffer was processed in tunneling mode.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Video.MediaCodecVideoRenderer.RenderOutputBuffer(Com.Google.Android.Exoplayer2.Mediacodec.IMediaCodecAdapter,System.Int32,System.Int64)">
            <param name="codec">The codec that owns the output buffer.</param>
            <param name="index">The index of the output buffer to drop.</param>
            <param name="presentationTimeUs">The presentation time of the output buffer, in microseconds.</param>
            <summary>Renders the output buffer with the specified index.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Video.MediaCodecVideoRenderer.RenderOutputBufferV21(Com.Google.Android.Exoplayer2.Mediacodec.IMediaCodecAdapter,System.Int32,System.Int64,System.Int64)">
            <param name="codec">The codec that owns the output buffer.</param>
            <param name="index">The index of the output buffer to drop.</param>
            <param name="presentationTimeUs">The presentation time of the output buffer, in microseconds.</param>
            <param name="releaseTimeNs">The wallclock time at which the frame should be displayed, in nanoseconds.</param>
            <summary>Renders the output buffer with the specified index.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Video.MediaCodecVideoRenderer.ShouldDropBuffersToKeyframe(System.Int64,System.Int64,System.Boolean)">
            <param name="earlyUs">The time until the current buffer should be presented in microseconds. A
                negative value indicates that the buffer is late.</param>
            <param name="elapsedRealtimeUs">
              <c>android.os.SystemClock#elapsedRealtime()</c> in microseconds,
                measured at the start of the current iteration of the rendering loop.</param>
            <param name="isLastBuffer">Whether the buffer is the last buffer in the current stream.</param>
            <summary>Returns whether to drop all buffers from the buffer being processed to the keyframe at or after
            the current playback position, if possible.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Video.MediaCodecVideoRenderer.ShouldDropOutputBuffer(System.Int64,System.Int64,System.Boolean)">
            <param name="earlyUs">The time until the buffer should be presented in microseconds. A negative value
                indicates that the buffer is late.</param>
            <param name="elapsedRealtimeUs">
              <c>android.os.SystemClock#elapsedRealtime()</c> in microseconds,
                measured at the start of the current iteration of the rendering loop.</param>
            <param name="isLastBuffer">Whether the buffer is the last buffer in the current stream.</param>
            <summary>Returns whether the buffer being processed should be dropped.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Video.MediaCodecVideoRenderer.ShouldForceRenderOutputBuffer(System.Int64,System.Int64)">
            <param name="earlyUs">The time until the current buffer should be presented in microseconds. A
                negative value indicates that the buffer is late.</param>
            <param name="elapsedSinceLastRenderUs">The elapsed time since the last output buffer was rendered, in
                microseconds.</param>
            <summary>Returns whether to force rendering an output buffer.</summary>
            <returns>Returns whether to force rendering an output buffer.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Video.MediaCodecVideoRenderer.SkipOutputBuffer(Com.Google.Android.Exoplayer2.Mediacodec.IMediaCodecAdapter,System.Int32,System.Int64)">
            <param name="codec">The codec that owns the output buffer.</param>
            <param name="index">The index of the output buffer to skip.</param>
            <param name="presentationTimeUs">The presentation time of the output buffer, in microseconds.</param>
            <summary>Skips the output buffer with the specified index.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Video.MediaCodecVideoRenderer.UpdateDroppedBufferCounters(System.Int32,System.Int32)">
            <param name="droppedInputBufferCount">The number of buffers dropped from the source before being
                passed to the decoder.</param>
            <param name="droppedDecoderBufferCount">The number of buffers dropped after being passed to the
                decoder.</param>
            <summary>Updates local counters and <c>#decoderCounters</c> to reflect that buffers were dropped.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Video.MediaCodecVideoRenderer.UpdateVideoFrameProcessingOffsetCounters(System.Int64)">
            <param name="processingOffsetUs">The video frame processing offset.</param>
            <summary>Updates local counters and <c>DecoderCounters</c> with a new video frame processing offset.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Video.PlaceholderSurface">
            <summary>A placeholder <c>Surface</c>.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Video.PlaceholderSurface.Secure">
            <summary>Whether the surface is secure.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Video.Spherical.CameraMotionRenderer">
            <summary>A <c>Renderer</c> that parses the camera motion track.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Video.Spherical.ICameraMotionListener">
            <summary>Listens camera motion.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Video.Spherical.ICameraMotionListener.OnCameraMotion(System.Int64,System.Single[])">
            <param name="timeUs">The presentation time of the data.</param>
            <param name="rotation">Angle axis orientation in radians representing the rotation from camera
                coordinate system to world coordinate system.</param>
            <summary>Called when a new camera motion is read.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Video.Spherical.ICameraMotionListener.OnCameraMotionReset">
            <summary>Called when the camera motion track position is reset or the track is disabled.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Video.Spherical.SphericalGLSurfaceView">
            <summary>Renders a GL scene in a non-VR Activity that is affected by phone orientation and touch input.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Video.Spherical.SphericalGLSurfaceView.CameraMotionListener">
            <summary>Returns the <c>CameraMotionListener</c> that should be registered during playback.</summary>
        </member>
        <member name="P:Com.Google.Android.Exoplayer2.Video.Spherical.SphericalGLSurfaceView.VideoFrameMetadataListener">
            <summary>Returns the <c>VideoFrameMetadataListener</c> that should be registered during playback.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Video.Spherical.SphericalGLSurfaceView.SetDefaultStereoMode(System.Int32)">
            <param name="stereoMode">A <c>C.StereoMode</c> value.</param>
            <summary>Sets the default stereo mode.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Video.Spherical.SphericalGLSurfaceView.SetUseSensorRotation(System.Boolean)">
            <summary>Sets whether to use the orientation sensor for rotation (if available).</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Video.VideoDecoderGLSurfaceView">
            <summary>GLSurfaceView implementing <c>VideoDecoderOutputBufferRenderer</c> for rendering <c>VideoDecoderOutputBuffer VideoDecoderOutputBuffers</c>.</summary>
        </member>
        <member name="T:Com.Google.Android.Exoplayer2.Video.VideoFrameReleaseHelper">
            <summary>Helps a video <c>Renderer</c> release frames to a <c>Surface</c>.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Video.VideoFrameReleaseHelper.AdjustReleaseTime(System.Int64)">
            <param name="releaseTimeNs">The frame's unadjusted release time, in nanoseconds and in the same time
                base as <c>System#nanoTime()</c>.</param>
            <summary>Adjusts the release timestamp for the next frame.</summary>
            <returns>The adjusted frame release timestamp, in nanoseconds and in the same time base as
                <c>System#nanoTime()</c>.</returns>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Video.VideoFrameReleaseHelper.OnFormatChanged(System.Single)">
            <param name="formatFrameRate">The format's frame rate, or <c>Format#NO_VALUE</c> if unknown.</param>
            <summary>Called when the renderer's output format changes.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Video.VideoFrameReleaseHelper.OnNextFrame(System.Int64)">
            <param name="framePresentationTimeUs">The frame presentation timestamp, in microseconds.</param>
            <summary>Called by the renderer for each frame, prior to it being skipped, dropped or rendered.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Video.VideoFrameReleaseHelper.OnPlaybackSpeed(System.Single)">
            <param name="playbackSpeed">The factor by which playback is sped up.</param>
            <summary>Called when the renderer's playback speed changes.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Video.VideoFrameReleaseHelper.OnPositionReset">
            <summary>Called when the renderer's position is reset.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Video.VideoFrameReleaseHelper.OnStarted">
            <summary>Called when the renderer is started.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Video.VideoFrameReleaseHelper.OnStopped">
            <summary>Called when the renderer is stopped.</summary>
        </member>
        <member name="M:Com.Google.Android.Exoplayer2.Video.VideoFrameReleaseHelper.SetChangeFrameRateStrategy(System.Int32)">
            <summary>Change the <c>C.VideoChangeFrameRateStrategy</c> used when calling <c>Surface#setFrameRate</c>.</summary>
        </member>
    </members>
</doc>
